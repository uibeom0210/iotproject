
IoT_dresser.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a2c8  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000088c  0800a4b0  0800a4b0  0001a4b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad3c  0800ad3c  000202dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800ad3c  0800ad3c  000202dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ad3c  0800ad3c  000202dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad3c  0800ad3c  0001ad3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ad40  0800ad40  0001ad40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002dc  20000000  0800ad44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003f10  200002dc  0800b020  000202dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200041ec  0800b020  000241ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000202dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017a77  00000000  00000000  00020305  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037f7  00000000  00000000  00037d7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001148  00000000  00000000  0003b578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fe0  00000000  00000000  0003c6c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d489  00000000  00000000  0003d6a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000156db  00000000  00000000  0005ab29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d7bf  00000000  00000000  00070204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010d9c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005940  00000000  00000000  0010da18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200002dc 	.word	0x200002dc
 8000204:	00000000 	.word	0x00000000
 8000208:	0800a498 	.word	0x0800a498

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200002e0 	.word	0x200002e0
 8000224:	0800a498 	.word	0x0800a498

08000228 <strcmp>:
 8000228:	f810 2b01 	ldrb.w	r2, [r0], #1
 800022c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000230:	2a01      	cmp	r2, #1
 8000232:	bf28      	it	cs
 8000234:	429a      	cmpcs	r2, r3
 8000236:	d0f7      	beq.n	8000228 <strcmp>
 8000238:	1ad0      	subs	r0, r2, r3
 800023a:	4770      	bx	lr

0800023c <strlen>:
 800023c:	4603      	mov	r3, r0
 800023e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000242:	2a00      	cmp	r2, #0
 8000244:	d1fb      	bne.n	800023e <strlen+0x2>
 8000246:	1a18      	subs	r0, r3, r0
 8000248:	3801      	subs	r0, #1
 800024a:	4770      	bx	lr

0800024c <__aeabi_drsub>:
 800024c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000250:	e002      	b.n	8000258 <__adddf3>
 8000252:	bf00      	nop

08000254 <__aeabi_dsub>:
 8000254:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000258 <__adddf3>:
 8000258:	b530      	push	{r4, r5, lr}
 800025a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800025e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000262:	ea94 0f05 	teq	r4, r5
 8000266:	bf08      	it	eq
 8000268:	ea90 0f02 	teqeq	r0, r2
 800026c:	bf1f      	itttt	ne
 800026e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000272:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000276:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800027e:	f000 80e2 	beq.w	8000446 <__adddf3+0x1ee>
 8000282:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000286:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028a:	bfb8      	it	lt
 800028c:	426d      	neglt	r5, r5
 800028e:	dd0c      	ble.n	80002aa <__adddf3+0x52>
 8000290:	442c      	add	r4, r5
 8000292:	ea80 0202 	eor.w	r2, r0, r2
 8000296:	ea81 0303 	eor.w	r3, r1, r3
 800029a:	ea82 0000 	eor.w	r0, r2, r0
 800029e:	ea83 0101 	eor.w	r1, r3, r1
 80002a2:	ea80 0202 	eor.w	r2, r0, r2
 80002a6:	ea81 0303 	eor.w	r3, r1, r3
 80002aa:	2d36      	cmp	r5, #54	; 0x36
 80002ac:	bf88      	it	hi
 80002ae:	bd30      	pophi	{r4, r5, pc}
 80002b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x70>
 80002c2:	4240      	negs	r0, r0
 80002c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d4:	d002      	beq.n	80002dc <__adddf3+0x84>
 80002d6:	4252      	negs	r2, r2
 80002d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002dc:	ea94 0f05 	teq	r4, r5
 80002e0:	f000 80a7 	beq.w	8000432 <__adddf3+0x1da>
 80002e4:	f1a4 0401 	sub.w	r4, r4, #1
 80002e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80002ec:	db0d      	blt.n	800030a <__adddf3+0xb2>
 80002ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f2:	fa22 f205 	lsr.w	r2, r2, r5
 80002f6:	1880      	adds	r0, r0, r2
 80002f8:	f141 0100 	adc.w	r1, r1, #0
 80002fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000300:	1880      	adds	r0, r0, r2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	4159      	adcs	r1, r3
 8000308:	e00e      	b.n	8000328 <__adddf3+0xd0>
 800030a:	f1a5 0520 	sub.w	r5, r5, #32
 800030e:	f10e 0e20 	add.w	lr, lr, #32
 8000312:	2a01      	cmp	r2, #1
 8000314:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000318:	bf28      	it	cs
 800031a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800031e:	fa43 f305 	asr.w	r3, r3, r5
 8000322:	18c0      	adds	r0, r0, r3
 8000324:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000328:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800032c:	d507      	bpl.n	800033e <__adddf3+0xe6>
 800032e:	f04f 0e00 	mov.w	lr, #0
 8000332:	f1dc 0c00 	rsbs	ip, ip, #0
 8000336:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033a:	eb6e 0101 	sbc.w	r1, lr, r1
 800033e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000342:	d31b      	bcc.n	800037c <__adddf3+0x124>
 8000344:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000348:	d30c      	bcc.n	8000364 <__adddf3+0x10c>
 800034a:	0849      	lsrs	r1, r1, #1
 800034c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000350:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000354:	f104 0401 	add.w	r4, r4, #1
 8000358:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800035c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000360:	f080 809a 	bcs.w	8000498 <__adddf3+0x240>
 8000364:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000368:	bf08      	it	eq
 800036a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800036e:	f150 0000 	adcs.w	r0, r0, #0
 8000372:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000376:	ea41 0105 	orr.w	r1, r1, r5
 800037a:	bd30      	pop	{r4, r5, pc}
 800037c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000380:	4140      	adcs	r0, r0
 8000382:	eb41 0101 	adc.w	r1, r1, r1
 8000386:	3c01      	subs	r4, #1
 8000388:	bf28      	it	cs
 800038a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800038e:	d2e9      	bcs.n	8000364 <__adddf3+0x10c>
 8000390:	f091 0f00 	teq	r1, #0
 8000394:	bf04      	itt	eq
 8000396:	4601      	moveq	r1, r0
 8000398:	2000      	moveq	r0, #0
 800039a:	fab1 f381 	clz	r3, r1
 800039e:	bf08      	it	eq
 80003a0:	3320      	addeq	r3, #32
 80003a2:	f1a3 030b 	sub.w	r3, r3, #11
 80003a6:	f1b3 0220 	subs.w	r2, r3, #32
 80003aa:	da0c      	bge.n	80003c6 <__adddf3+0x16e>
 80003ac:	320c      	adds	r2, #12
 80003ae:	dd08      	ble.n	80003c2 <__adddf3+0x16a>
 80003b0:	f102 0c14 	add.w	ip, r2, #20
 80003b4:	f1c2 020c 	rsb	r2, r2, #12
 80003b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80003bc:	fa21 f102 	lsr.w	r1, r1, r2
 80003c0:	e00c      	b.n	80003dc <__adddf3+0x184>
 80003c2:	f102 0214 	add.w	r2, r2, #20
 80003c6:	bfd8      	it	le
 80003c8:	f1c2 0c20 	rsble	ip, r2, #32
 80003cc:	fa01 f102 	lsl.w	r1, r1, r2
 80003d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d4:	bfdc      	itt	le
 80003d6:	ea41 010c 	orrle.w	r1, r1, ip
 80003da:	4090      	lslle	r0, r2
 80003dc:	1ae4      	subs	r4, r4, r3
 80003de:	bfa2      	ittt	ge
 80003e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e4:	4329      	orrge	r1, r5
 80003e6:	bd30      	popge	{r4, r5, pc}
 80003e8:	ea6f 0404 	mvn.w	r4, r4
 80003ec:	3c1f      	subs	r4, #31
 80003ee:	da1c      	bge.n	800042a <__adddf3+0x1d2>
 80003f0:	340c      	adds	r4, #12
 80003f2:	dc0e      	bgt.n	8000412 <__adddf3+0x1ba>
 80003f4:	f104 0414 	add.w	r4, r4, #20
 80003f8:	f1c4 0220 	rsb	r2, r4, #32
 80003fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000400:	fa01 f302 	lsl.w	r3, r1, r2
 8000404:	ea40 0003 	orr.w	r0, r0, r3
 8000408:	fa21 f304 	lsr.w	r3, r1, r4
 800040c:	ea45 0103 	orr.w	r1, r5, r3
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	f1c4 040c 	rsb	r4, r4, #12
 8000416:	f1c4 0220 	rsb	r2, r4, #32
 800041a:	fa20 f002 	lsr.w	r0, r0, r2
 800041e:	fa01 f304 	lsl.w	r3, r1, r4
 8000422:	ea40 0003 	orr.w	r0, r0, r3
 8000426:	4629      	mov	r1, r5
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	fa21 f004 	lsr.w	r0, r1, r4
 800042e:	4629      	mov	r1, r5
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	f094 0f00 	teq	r4, #0
 8000436:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800043a:	bf06      	itte	eq
 800043c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000440:	3401      	addeq	r4, #1
 8000442:	3d01      	subne	r5, #1
 8000444:	e74e      	b.n	80002e4 <__adddf3+0x8c>
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf18      	it	ne
 800044c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000450:	d029      	beq.n	80004a6 <__adddf3+0x24e>
 8000452:	ea94 0f05 	teq	r4, r5
 8000456:	bf08      	it	eq
 8000458:	ea90 0f02 	teqeq	r0, r2
 800045c:	d005      	beq.n	800046a <__adddf3+0x212>
 800045e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000462:	bf04      	itt	eq
 8000464:	4619      	moveq	r1, r3
 8000466:	4610      	moveq	r0, r2
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	ea91 0f03 	teq	r1, r3
 800046e:	bf1e      	ittt	ne
 8000470:	2100      	movne	r1, #0
 8000472:	2000      	movne	r0, #0
 8000474:	bd30      	popne	{r4, r5, pc}
 8000476:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047a:	d105      	bne.n	8000488 <__adddf3+0x230>
 800047c:	0040      	lsls	r0, r0, #1
 800047e:	4149      	adcs	r1, r1
 8000480:	bf28      	it	cs
 8000482:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000486:	bd30      	pop	{r4, r5, pc}
 8000488:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800048c:	bf3c      	itt	cc
 800048e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000492:	bd30      	popcc	{r4, r5, pc}
 8000494:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000498:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800049c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004a0:	f04f 0000 	mov.w	r0, #0
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004aa:	bf1a      	itte	ne
 80004ac:	4619      	movne	r1, r3
 80004ae:	4610      	movne	r0, r2
 80004b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b4:	bf1c      	itt	ne
 80004b6:	460b      	movne	r3, r1
 80004b8:	4602      	movne	r2, r0
 80004ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004be:	bf06      	itte	eq
 80004c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c4:	ea91 0f03 	teqeq	r1, r3
 80004c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	bf00      	nop

080004d0 <__aeabi_ui2d>:
 80004d0:	f090 0f00 	teq	r0, #0
 80004d4:	bf04      	itt	eq
 80004d6:	2100      	moveq	r1, #0
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e4:	f04f 0500 	mov.w	r5, #0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e750      	b.n	8000390 <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_i2d>:
 80004f0:	f090 0f00 	teq	r0, #0
 80004f4:	bf04      	itt	eq
 80004f6:	2100      	moveq	r1, #0
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000500:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000504:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000508:	bf48      	it	mi
 800050a:	4240      	negmi	r0, r0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e73e      	b.n	8000390 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_f2d>:
 8000514:	0042      	lsls	r2, r0, #1
 8000516:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051a:	ea4f 0131 	mov.w	r1, r1, rrx
 800051e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000522:	bf1f      	itttt	ne
 8000524:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000528:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800052c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000530:	4770      	bxne	lr
 8000532:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000536:	bf08      	it	eq
 8000538:	4770      	bxeq	lr
 800053a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800053e:	bf04      	itt	eq
 8000540:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 7460 	mov.w	r4, #896	; 0x380
 800054c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000550:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000554:	e71c      	b.n	8000390 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_ul2d>:
 8000558:	ea50 0201 	orrs.w	r2, r0, r1
 800055c:	bf08      	it	eq
 800055e:	4770      	bxeq	lr
 8000560:	b530      	push	{r4, r5, lr}
 8000562:	f04f 0500 	mov.w	r5, #0
 8000566:	e00a      	b.n	800057e <__aeabi_l2d+0x16>

08000568 <__aeabi_l2d>:
 8000568:	ea50 0201 	orrs.w	r2, r0, r1
 800056c:	bf08      	it	eq
 800056e:	4770      	bxeq	lr
 8000570:	b530      	push	{r4, r5, lr}
 8000572:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000576:	d502      	bpl.n	800057e <__aeabi_l2d+0x16>
 8000578:	4240      	negs	r0, r0
 800057a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800057e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000582:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000586:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058a:	f43f aed8 	beq.w	800033e <__adddf3+0xe6>
 800058e:	f04f 0203 	mov.w	r2, #3
 8000592:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000596:	bf18      	it	ne
 8000598:	3203      	addne	r2, #3
 800059a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059e:	bf18      	it	ne
 80005a0:	3203      	addne	r2, #3
 80005a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005a6:	f1c2 0320 	rsb	r3, r2, #32
 80005aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ae:	fa20 f002 	lsr.w	r0, r0, r2
 80005b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80005b6:	ea40 000e 	orr.w	r0, r0, lr
 80005ba:	fa21 f102 	lsr.w	r1, r1, r2
 80005be:	4414      	add	r4, r2
 80005c0:	e6bd      	b.n	800033e <__adddf3+0xe6>
 80005c2:	bf00      	nop

080005c4 <__aeabi_dmul>:
 80005c4:	b570      	push	{r4, r5, r6, lr}
 80005c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d2:	bf1d      	ittte	ne
 80005d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005d8:	ea94 0f0c 	teqne	r4, ip
 80005dc:	ea95 0f0c 	teqne	r5, ip
 80005e0:	f000 f8de 	bleq	80007a0 <__aeabi_dmul+0x1dc>
 80005e4:	442c      	add	r4, r5
 80005e6:	ea81 0603 	eor.w	r6, r1, r3
 80005ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005f6:	bf18      	it	ne
 80005f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000600:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000604:	d038      	beq.n	8000678 <__aeabi_dmul+0xb4>
 8000606:	fba0 ce02 	umull	ip, lr, r0, r2
 800060a:	f04f 0500 	mov.w	r5, #0
 800060e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000612:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000616:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061a:	f04f 0600 	mov.w	r6, #0
 800061e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000622:	f09c 0f00 	teq	ip, #0
 8000626:	bf18      	it	ne
 8000628:	f04e 0e01 	orrne.w	lr, lr, #1
 800062c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000630:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000634:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000638:	d204      	bcs.n	8000644 <__aeabi_dmul+0x80>
 800063a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800063e:	416d      	adcs	r5, r5
 8000640:	eb46 0606 	adc.w	r6, r6, r6
 8000644:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000648:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800064c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000650:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000654:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000658:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800065c:	bf88      	it	hi
 800065e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000662:	d81e      	bhi.n	80006a2 <__aeabi_dmul+0xde>
 8000664:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000668:	bf08      	it	eq
 800066a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800066e:	f150 0000 	adcs.w	r0, r0, #0
 8000672:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000676:	bd70      	pop	{r4, r5, r6, pc}
 8000678:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800067c:	ea46 0101 	orr.w	r1, r6, r1
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	ea81 0103 	eor.w	r1, r1, r3
 8000688:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800068c:	bfc2      	ittt	gt
 800068e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000692:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000696:	bd70      	popgt	{r4, r5, r6, pc}
 8000698:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800069c:	f04f 0e00 	mov.w	lr, #0
 80006a0:	3c01      	subs	r4, #1
 80006a2:	f300 80ab 	bgt.w	80007fc <__aeabi_dmul+0x238>
 80006a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006aa:	bfde      	ittt	le
 80006ac:	2000      	movle	r0, #0
 80006ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006b2:	bd70      	pople	{r4, r5, r6, pc}
 80006b4:	f1c4 0400 	rsb	r4, r4, #0
 80006b8:	3c20      	subs	r4, #32
 80006ba:	da35      	bge.n	8000728 <__aeabi_dmul+0x164>
 80006bc:	340c      	adds	r4, #12
 80006be:	dc1b      	bgt.n	80006f8 <__aeabi_dmul+0x134>
 80006c0:	f104 0414 	add.w	r4, r4, #20
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f305 	lsl.w	r3, r0, r5
 80006cc:	fa20 f004 	lsr.w	r0, r0, r4
 80006d0:	fa01 f205 	lsl.w	r2, r1, r5
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	fa21 f604 	lsr.w	r6, r1, r4
 80006e8:	eb42 0106 	adc.w	r1, r2, r6
 80006ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f0:	bf08      	it	eq
 80006f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f6:	bd70      	pop	{r4, r5, r6, pc}
 80006f8:	f1c4 040c 	rsb	r4, r4, #12
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f304 	lsl.w	r3, r0, r4
 8000704:	fa20 f005 	lsr.w	r0, r0, r5
 8000708:	fa01 f204 	lsl.w	r2, r1, r4
 800070c:	ea40 0002 	orr.w	r0, r0, r2
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	f141 0100 	adc.w	r1, r1, #0
 800071c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000720:	bf08      	it	eq
 8000722:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000726:	bd70      	pop	{r4, r5, r6, pc}
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f205 	lsl.w	r2, r0, r5
 8000730:	ea4e 0e02 	orr.w	lr, lr, r2
 8000734:	fa20 f304 	lsr.w	r3, r0, r4
 8000738:	fa01 f205 	lsl.w	r2, r1, r5
 800073c:	ea43 0302 	orr.w	r3, r3, r2
 8000740:	fa21 f004 	lsr.w	r0, r1, r4
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	fa21 f204 	lsr.w	r2, r1, r4
 800074c:	ea20 0002 	bic.w	r0, r0, r2
 8000750:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000754:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000758:	bf08      	it	eq
 800075a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075e:	bd70      	pop	{r4, r5, r6, pc}
 8000760:	f094 0f00 	teq	r4, #0
 8000764:	d10f      	bne.n	8000786 <__aeabi_dmul+0x1c2>
 8000766:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800076a:	0040      	lsls	r0, r0, #1
 800076c:	eb41 0101 	adc.w	r1, r1, r1
 8000770:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000774:	bf08      	it	eq
 8000776:	3c01      	subeq	r4, #1
 8000778:	d0f7      	beq.n	800076a <__aeabi_dmul+0x1a6>
 800077a:	ea41 0106 	orr.w	r1, r1, r6
 800077e:	f095 0f00 	teq	r5, #0
 8000782:	bf18      	it	ne
 8000784:	4770      	bxne	lr
 8000786:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800078a:	0052      	lsls	r2, r2, #1
 800078c:	eb43 0303 	adc.w	r3, r3, r3
 8000790:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000794:	bf08      	it	eq
 8000796:	3d01      	subeq	r5, #1
 8000798:	d0f7      	beq.n	800078a <__aeabi_dmul+0x1c6>
 800079a:	ea43 0306 	orr.w	r3, r3, r6
 800079e:	4770      	bx	lr
 80007a0:	ea94 0f0c 	teq	r4, ip
 80007a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007a8:	bf18      	it	ne
 80007aa:	ea95 0f0c 	teqne	r5, ip
 80007ae:	d00c      	beq.n	80007ca <__aeabi_dmul+0x206>
 80007b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b4:	bf18      	it	ne
 80007b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ba:	d1d1      	bne.n	8000760 <__aeabi_dmul+0x19c>
 80007bc:	ea81 0103 	eor.w	r1, r1, r3
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ce:	bf06      	itte	eq
 80007d0:	4610      	moveq	r0, r2
 80007d2:	4619      	moveq	r1, r3
 80007d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d8:	d019      	beq.n	800080e <__aeabi_dmul+0x24a>
 80007da:	ea94 0f0c 	teq	r4, ip
 80007de:	d102      	bne.n	80007e6 <__aeabi_dmul+0x222>
 80007e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e4:	d113      	bne.n	800080e <__aeabi_dmul+0x24a>
 80007e6:	ea95 0f0c 	teq	r5, ip
 80007ea:	d105      	bne.n	80007f8 <__aeabi_dmul+0x234>
 80007ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f0:	bf1c      	itt	ne
 80007f2:	4610      	movne	r0, r2
 80007f4:	4619      	movne	r1, r3
 80007f6:	d10a      	bne.n	800080e <__aeabi_dmul+0x24a>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000804:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000812:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000816:	bd70      	pop	{r4, r5, r6, pc}

08000818 <__aeabi_ddiv>:
 8000818:	b570      	push	{r4, r5, r6, lr}
 800081a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800081e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000822:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000826:	bf1d      	ittte	ne
 8000828:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800082c:	ea94 0f0c 	teqne	r4, ip
 8000830:	ea95 0f0c 	teqne	r5, ip
 8000834:	f000 f8a7 	bleq	8000986 <__aeabi_ddiv+0x16e>
 8000838:	eba4 0405 	sub.w	r4, r4, r5
 800083c:	ea81 0e03 	eor.w	lr, r1, r3
 8000840:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000844:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000848:	f000 8088 	beq.w	800095c <__aeabi_ddiv+0x144>
 800084c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000850:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000854:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000858:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800085c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000860:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000864:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000868:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800086c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000870:	429d      	cmp	r5, r3
 8000872:	bf08      	it	eq
 8000874:	4296      	cmpeq	r6, r2
 8000876:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800087a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800087e:	d202      	bcs.n	8000886 <__aeabi_ddiv+0x6e>
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	1ab6      	subs	r6, r6, r2
 8000888:	eb65 0503 	sbc.w	r5, r5, r3
 800088c:	085b      	lsrs	r3, r3, #1
 800088e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000892:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000896:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800089a:	ebb6 0e02 	subs.w	lr, r6, r2
 800089e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a2:	bf22      	ittt	cs
 80008a4:	1ab6      	subcs	r6, r6, r2
 80008a6:	4675      	movcs	r5, lr
 80008a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ba:	bf22      	ittt	cs
 80008bc:	1ab6      	subcs	r6, r6, r2
 80008be:	4675      	movcs	r5, lr
 80008c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d2:	bf22      	ittt	cs
 80008d4:	1ab6      	subcs	r6, r6, r2
 80008d6:	4675      	movcs	r5, lr
 80008d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80008f8:	d018      	beq.n	800092c <__aeabi_ddiv+0x114>
 80008fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000902:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000906:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800090e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000912:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000916:	d1c0      	bne.n	800089a <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	d10b      	bne.n	8000936 <__aeabi_ddiv+0x11e>
 800091e:	ea41 0100 	orr.w	r1, r1, r0
 8000922:	f04f 0000 	mov.w	r0, #0
 8000926:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800092a:	e7b6      	b.n	800089a <__aeabi_ddiv+0x82>
 800092c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000930:	bf04      	itt	eq
 8000932:	4301      	orreq	r1, r0
 8000934:	2000      	moveq	r0, #0
 8000936:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800093a:	bf88      	it	hi
 800093c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000940:	f63f aeaf 	bhi.w	80006a2 <__aeabi_dmul+0xde>
 8000944:	ebb5 0c03 	subs.w	ip, r5, r3
 8000948:	bf04      	itt	eq
 800094a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800094e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000952:	f150 0000 	adcs.w	r0, r0, #0
 8000956:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095a:	bd70      	pop	{r4, r5, r6, pc}
 800095c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000960:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000964:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000968:	bfc2      	ittt	gt
 800096a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800096e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000972:	bd70      	popgt	{r4, r5, r6, pc}
 8000974:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000978:	f04f 0e00 	mov.w	lr, #0
 800097c:	3c01      	subs	r4, #1
 800097e:	e690      	b.n	80006a2 <__aeabi_dmul+0xde>
 8000980:	ea45 0e06 	orr.w	lr, r5, r6
 8000984:	e68d      	b.n	80006a2 <__aeabi_dmul+0xde>
 8000986:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098a:	ea94 0f0c 	teq	r4, ip
 800098e:	bf08      	it	eq
 8000990:	ea95 0f0c 	teqeq	r5, ip
 8000994:	f43f af3b 	beq.w	800080e <__aeabi_dmul+0x24a>
 8000998:	ea94 0f0c 	teq	r4, ip
 800099c:	d10a      	bne.n	80009b4 <__aeabi_ddiv+0x19c>
 800099e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a2:	f47f af34 	bne.w	800080e <__aeabi_dmul+0x24a>
 80009a6:	ea95 0f0c 	teq	r5, ip
 80009aa:	f47f af25 	bne.w	80007f8 <__aeabi_dmul+0x234>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e72c      	b.n	800080e <__aeabi_dmul+0x24a>
 80009b4:	ea95 0f0c 	teq	r5, ip
 80009b8:	d106      	bne.n	80009c8 <__aeabi_ddiv+0x1b0>
 80009ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009be:	f43f aefd 	beq.w	80007bc <__aeabi_dmul+0x1f8>
 80009c2:	4610      	mov	r0, r2
 80009c4:	4619      	mov	r1, r3
 80009c6:	e722      	b.n	800080e <__aeabi_dmul+0x24a>
 80009c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009cc:	bf18      	it	ne
 80009ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d2:	f47f aec5 	bne.w	8000760 <__aeabi_dmul+0x19c>
 80009d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009da:	f47f af0d 	bne.w	80007f8 <__aeabi_dmul+0x234>
 80009de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e2:	f47f aeeb 	bne.w	80007bc <__aeabi_dmul+0x1f8>
 80009e6:	e712      	b.n	800080e <__aeabi_dmul+0x24a>

080009e8 <__gedf2>:
 80009e8:	f04f 3cff 	mov.w	ip, #4294967295
 80009ec:	e006      	b.n	80009fc <__cmpdf2+0x4>
 80009ee:	bf00      	nop

080009f0 <__ledf2>:
 80009f0:	f04f 0c01 	mov.w	ip, #1
 80009f4:	e002      	b.n	80009fc <__cmpdf2+0x4>
 80009f6:	bf00      	nop

080009f8 <__cmpdf2>:
 80009f8:	f04f 0c01 	mov.w	ip, #1
 80009fc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a0c:	bf18      	it	ne
 8000a0e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a12:	d01b      	beq.n	8000a4c <__cmpdf2+0x54>
 8000a14:	b001      	add	sp, #4
 8000a16:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a1a:	bf0c      	ite	eq
 8000a1c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a20:	ea91 0f03 	teqne	r1, r3
 8000a24:	bf02      	ittt	eq
 8000a26:	ea90 0f02 	teqeq	r0, r2
 8000a2a:	2000      	moveq	r0, #0
 8000a2c:	4770      	bxeq	lr
 8000a2e:	f110 0f00 	cmn.w	r0, #0
 8000a32:	ea91 0f03 	teq	r1, r3
 8000a36:	bf58      	it	pl
 8000a38:	4299      	cmppl	r1, r3
 8000a3a:	bf08      	it	eq
 8000a3c:	4290      	cmpeq	r0, r2
 8000a3e:	bf2c      	ite	cs
 8000a40:	17d8      	asrcs	r0, r3, #31
 8000a42:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a46:	f040 0001 	orr.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__cmpdf2+0x64>
 8000a56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5a:	d107      	bne.n	8000a6c <__cmpdf2+0x74>
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a64:	d1d6      	bne.n	8000a14 <__cmpdf2+0x1c>
 8000a66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6a:	d0d3      	beq.n	8000a14 <__cmpdf2+0x1c>
 8000a6c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop

08000a74 <__aeabi_cdrcmple>:
 8000a74:	4684      	mov	ip, r0
 8000a76:	4610      	mov	r0, r2
 8000a78:	4662      	mov	r2, ip
 8000a7a:	468c      	mov	ip, r1
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4663      	mov	r3, ip
 8000a80:	e000      	b.n	8000a84 <__aeabi_cdcmpeq>
 8000a82:	bf00      	nop

08000a84 <__aeabi_cdcmpeq>:
 8000a84:	b501      	push	{r0, lr}
 8000a86:	f7ff ffb7 	bl	80009f8 <__cmpdf2>
 8000a8a:	2800      	cmp	r0, #0
 8000a8c:	bf48      	it	mi
 8000a8e:	f110 0f00 	cmnmi.w	r0, #0
 8000a92:	bd01      	pop	{r0, pc}

08000a94 <__aeabi_dcmpeq>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff fff4 	bl	8000a84 <__aeabi_cdcmpeq>
 8000a9c:	bf0c      	ite	eq
 8000a9e:	2001      	moveq	r0, #1
 8000aa0:	2000      	movne	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmplt>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffea 	bl	8000a84 <__aeabi_cdcmpeq>
 8000ab0:	bf34      	ite	cc
 8000ab2:	2001      	movcc	r0, #1
 8000ab4:	2000      	movcs	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmple>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffe0 	bl	8000a84 <__aeabi_cdcmpeq>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpge>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffce 	bl	8000a74 <__aeabi_cdrcmple>
 8000ad8:	bf94      	ite	ls
 8000ada:	2001      	movls	r0, #1
 8000adc:	2000      	movhi	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpgt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffc4 	bl	8000a74 <__aeabi_cdrcmple>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmpun>:
 8000af8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000afc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b00:	d102      	bne.n	8000b08 <__aeabi_dcmpun+0x10>
 8000b02:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b06:	d10a      	bne.n	8000b1e <__aeabi_dcmpun+0x26>
 8000b08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b10:	d102      	bne.n	8000b18 <__aeabi_dcmpun+0x20>
 8000b12:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b16:	d102      	bne.n	8000b1e <__aeabi_dcmpun+0x26>
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	f04f 0001 	mov.w	r0, #1
 8000b22:	4770      	bx	lr

08000b24 <__aeabi_d2iz>:
 8000b24:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b28:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b2c:	d215      	bcs.n	8000b5a <__aeabi_d2iz+0x36>
 8000b2e:	d511      	bpl.n	8000b54 <__aeabi_d2iz+0x30>
 8000b30:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b34:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b38:	d912      	bls.n	8000b60 <__aeabi_d2iz+0x3c>
 8000b3a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b42:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b46:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b4e:	bf18      	it	ne
 8000b50:	4240      	negne	r0, r0
 8000b52:	4770      	bx	lr
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b5e:	d105      	bne.n	8000b6c <__aeabi_d2iz+0x48>
 8000b60:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b64:	bf08      	it	eq
 8000b66:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <__aeabi_d2f>:
 8000b74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b78:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b7c:	bf24      	itt	cs
 8000b7e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b82:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b86:	d90d      	bls.n	8000ba4 <__aeabi_d2f+0x30>
 8000b88:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b8c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b90:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b94:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b98:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b9c:	bf08      	it	eq
 8000b9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ba2:	4770      	bx	lr
 8000ba4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ba8:	d121      	bne.n	8000bee <__aeabi_d2f+0x7a>
 8000baa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bae:	bfbc      	itt	lt
 8000bb0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bb4:	4770      	bxlt	lr
 8000bb6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bbe:	f1c2 0218 	rsb	r2, r2, #24
 8000bc2:	f1c2 0c20 	rsb	ip, r2, #32
 8000bc6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bca:	fa20 f002 	lsr.w	r0, r0, r2
 8000bce:	bf18      	it	ne
 8000bd0:	f040 0001 	orrne.w	r0, r0, #1
 8000bd4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bdc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000be0:	ea40 000c 	orr.w	r0, r0, ip
 8000be4:	fa23 f302 	lsr.w	r3, r3, r2
 8000be8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bec:	e7cc      	b.n	8000b88 <__aeabi_d2f+0x14>
 8000bee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bf2:	d107      	bne.n	8000c04 <__aeabi_d2f+0x90>
 8000bf4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bf8:	bf1e      	ittt	ne
 8000bfa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bfe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c02:	4770      	bxne	lr
 8000c04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop

08000c14 <__aeabi_frsub>:
 8000c14:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c18:	e002      	b.n	8000c20 <__addsf3>
 8000c1a:	bf00      	nop

08000c1c <__aeabi_fsub>:
 8000c1c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c20 <__addsf3>:
 8000c20:	0042      	lsls	r2, r0, #1
 8000c22:	bf1f      	itttt	ne
 8000c24:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c28:	ea92 0f03 	teqne	r2, r3
 8000c2c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c30:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c34:	d06a      	beq.n	8000d0c <__addsf3+0xec>
 8000c36:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c3a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c3e:	bfc1      	itttt	gt
 8000c40:	18d2      	addgt	r2, r2, r3
 8000c42:	4041      	eorgt	r1, r0
 8000c44:	4048      	eorgt	r0, r1
 8000c46:	4041      	eorgt	r1, r0
 8000c48:	bfb8      	it	lt
 8000c4a:	425b      	neglt	r3, r3
 8000c4c:	2b19      	cmp	r3, #25
 8000c4e:	bf88      	it	hi
 8000c50:	4770      	bxhi	lr
 8000c52:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c56:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c5a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c5e:	bf18      	it	ne
 8000c60:	4240      	negne	r0, r0
 8000c62:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c66:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c6a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c6e:	bf18      	it	ne
 8000c70:	4249      	negne	r1, r1
 8000c72:	ea92 0f03 	teq	r2, r3
 8000c76:	d03f      	beq.n	8000cf8 <__addsf3+0xd8>
 8000c78:	f1a2 0201 	sub.w	r2, r2, #1
 8000c7c:	fa41 fc03 	asr.w	ip, r1, r3
 8000c80:	eb10 000c 	adds.w	r0, r0, ip
 8000c84:	f1c3 0320 	rsb	r3, r3, #32
 8000c88:	fa01 f103 	lsl.w	r1, r1, r3
 8000c8c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c90:	d502      	bpl.n	8000c98 <__addsf3+0x78>
 8000c92:	4249      	negs	r1, r1
 8000c94:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c98:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c9c:	d313      	bcc.n	8000cc6 <__addsf3+0xa6>
 8000c9e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ca2:	d306      	bcc.n	8000cb2 <__addsf3+0x92>
 8000ca4:	0840      	lsrs	r0, r0, #1
 8000ca6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000caa:	f102 0201 	add.w	r2, r2, #1
 8000cae:	2afe      	cmp	r2, #254	; 0xfe
 8000cb0:	d251      	bcs.n	8000d56 <__addsf3+0x136>
 8000cb2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000cb6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cba:	bf08      	it	eq
 8000cbc:	f020 0001 	biceq.w	r0, r0, #1
 8000cc0:	ea40 0003 	orr.w	r0, r0, r3
 8000cc4:	4770      	bx	lr
 8000cc6:	0049      	lsls	r1, r1, #1
 8000cc8:	eb40 0000 	adc.w	r0, r0, r0
 8000ccc:	3a01      	subs	r2, #1
 8000cce:	bf28      	it	cs
 8000cd0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000cd4:	d2ed      	bcs.n	8000cb2 <__addsf3+0x92>
 8000cd6:	fab0 fc80 	clz	ip, r0
 8000cda:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cde:	ebb2 020c 	subs.w	r2, r2, ip
 8000ce2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000ce6:	bfaa      	itet	ge
 8000ce8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cec:	4252      	neglt	r2, r2
 8000cee:	4318      	orrge	r0, r3
 8000cf0:	bfbc      	itt	lt
 8000cf2:	40d0      	lsrlt	r0, r2
 8000cf4:	4318      	orrlt	r0, r3
 8000cf6:	4770      	bx	lr
 8000cf8:	f092 0f00 	teq	r2, #0
 8000cfc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d00:	bf06      	itte	eq
 8000d02:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d06:	3201      	addeq	r2, #1
 8000d08:	3b01      	subne	r3, #1
 8000d0a:	e7b5      	b.n	8000c78 <__addsf3+0x58>
 8000d0c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d10:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d14:	bf18      	it	ne
 8000d16:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d1a:	d021      	beq.n	8000d60 <__addsf3+0x140>
 8000d1c:	ea92 0f03 	teq	r2, r3
 8000d20:	d004      	beq.n	8000d2c <__addsf3+0x10c>
 8000d22:	f092 0f00 	teq	r2, #0
 8000d26:	bf08      	it	eq
 8000d28:	4608      	moveq	r0, r1
 8000d2a:	4770      	bx	lr
 8000d2c:	ea90 0f01 	teq	r0, r1
 8000d30:	bf1c      	itt	ne
 8000d32:	2000      	movne	r0, #0
 8000d34:	4770      	bxne	lr
 8000d36:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d3a:	d104      	bne.n	8000d46 <__addsf3+0x126>
 8000d3c:	0040      	lsls	r0, r0, #1
 8000d3e:	bf28      	it	cs
 8000d40:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d44:	4770      	bx	lr
 8000d46:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d4a:	bf3c      	itt	cc
 8000d4c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d50:	4770      	bxcc	lr
 8000d52:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d56:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d5e:	4770      	bx	lr
 8000d60:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d64:	bf16      	itet	ne
 8000d66:	4608      	movne	r0, r1
 8000d68:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d6c:	4601      	movne	r1, r0
 8000d6e:	0242      	lsls	r2, r0, #9
 8000d70:	bf06      	itte	eq
 8000d72:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d76:	ea90 0f01 	teqeq	r0, r1
 8000d7a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d7e:	4770      	bx	lr

08000d80 <__aeabi_ui2f>:
 8000d80:	f04f 0300 	mov.w	r3, #0
 8000d84:	e004      	b.n	8000d90 <__aeabi_i2f+0x8>
 8000d86:	bf00      	nop

08000d88 <__aeabi_i2f>:
 8000d88:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d8c:	bf48      	it	mi
 8000d8e:	4240      	negmi	r0, r0
 8000d90:	ea5f 0c00 	movs.w	ip, r0
 8000d94:	bf08      	it	eq
 8000d96:	4770      	bxeq	lr
 8000d98:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d9c:	4601      	mov	r1, r0
 8000d9e:	f04f 0000 	mov.w	r0, #0
 8000da2:	e01c      	b.n	8000dde <__aeabi_l2f+0x2a>

08000da4 <__aeabi_ul2f>:
 8000da4:	ea50 0201 	orrs.w	r2, r0, r1
 8000da8:	bf08      	it	eq
 8000daa:	4770      	bxeq	lr
 8000dac:	f04f 0300 	mov.w	r3, #0
 8000db0:	e00a      	b.n	8000dc8 <__aeabi_l2f+0x14>
 8000db2:	bf00      	nop

08000db4 <__aeabi_l2f>:
 8000db4:	ea50 0201 	orrs.w	r2, r0, r1
 8000db8:	bf08      	it	eq
 8000dba:	4770      	bxeq	lr
 8000dbc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000dc0:	d502      	bpl.n	8000dc8 <__aeabi_l2f+0x14>
 8000dc2:	4240      	negs	r0, r0
 8000dc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dc8:	ea5f 0c01 	movs.w	ip, r1
 8000dcc:	bf02      	ittt	eq
 8000dce:	4684      	moveq	ip, r0
 8000dd0:	4601      	moveq	r1, r0
 8000dd2:	2000      	moveq	r0, #0
 8000dd4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000dd8:	bf08      	it	eq
 8000dda:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000dde:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000de2:	fabc f28c 	clz	r2, ip
 8000de6:	3a08      	subs	r2, #8
 8000de8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dec:	db10      	blt.n	8000e10 <__aeabi_l2f+0x5c>
 8000dee:	fa01 fc02 	lsl.w	ip, r1, r2
 8000df2:	4463      	add	r3, ip
 8000df4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df8:	f1c2 0220 	rsb	r2, r2, #32
 8000dfc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e00:	fa20 f202 	lsr.w	r2, r0, r2
 8000e04:	eb43 0002 	adc.w	r0, r3, r2
 8000e08:	bf08      	it	eq
 8000e0a:	f020 0001 	biceq.w	r0, r0, #1
 8000e0e:	4770      	bx	lr
 8000e10:	f102 0220 	add.w	r2, r2, #32
 8000e14:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e18:	f1c2 0220 	rsb	r2, r2, #32
 8000e1c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e20:	fa21 f202 	lsr.w	r2, r1, r2
 8000e24:	eb43 0002 	adc.w	r0, r3, r2
 8000e28:	bf08      	it	eq
 8000e2a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e2e:	4770      	bx	lr

08000e30 <__gesf2>:
 8000e30:	f04f 3cff 	mov.w	ip, #4294967295
 8000e34:	e006      	b.n	8000e44 <__cmpsf2+0x4>
 8000e36:	bf00      	nop

08000e38 <__lesf2>:
 8000e38:	f04f 0c01 	mov.w	ip, #1
 8000e3c:	e002      	b.n	8000e44 <__cmpsf2+0x4>
 8000e3e:	bf00      	nop

08000e40 <__cmpsf2>:
 8000e40:	f04f 0c01 	mov.w	ip, #1
 8000e44:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e48:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e4c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e50:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e54:	bf18      	it	ne
 8000e56:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e5a:	d011      	beq.n	8000e80 <__cmpsf2+0x40>
 8000e5c:	b001      	add	sp, #4
 8000e5e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e62:	bf18      	it	ne
 8000e64:	ea90 0f01 	teqne	r0, r1
 8000e68:	bf58      	it	pl
 8000e6a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e6e:	bf88      	it	hi
 8000e70:	17c8      	asrhi	r0, r1, #31
 8000e72:	bf38      	it	cc
 8000e74:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e78:	bf18      	it	ne
 8000e7a:	f040 0001 	orrne.w	r0, r0, #1
 8000e7e:	4770      	bx	lr
 8000e80:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e84:	d102      	bne.n	8000e8c <__cmpsf2+0x4c>
 8000e86:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e8a:	d105      	bne.n	8000e98 <__cmpsf2+0x58>
 8000e8c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000e90:	d1e4      	bne.n	8000e5c <__cmpsf2+0x1c>
 8000e92:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000e96:	d0e1      	beq.n	8000e5c <__cmpsf2+0x1c>
 8000e98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <__aeabi_cfrcmple>:
 8000ea0:	4684      	mov	ip, r0
 8000ea2:	4608      	mov	r0, r1
 8000ea4:	4661      	mov	r1, ip
 8000ea6:	e7ff      	b.n	8000ea8 <__aeabi_cfcmpeq>

08000ea8 <__aeabi_cfcmpeq>:
 8000ea8:	b50f      	push	{r0, r1, r2, r3, lr}
 8000eaa:	f7ff ffc9 	bl	8000e40 <__cmpsf2>
 8000eae:	2800      	cmp	r0, #0
 8000eb0:	bf48      	it	mi
 8000eb2:	f110 0f00 	cmnmi.w	r0, #0
 8000eb6:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000eb8 <__aeabi_fcmpeq>:
 8000eb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ebc:	f7ff fff4 	bl	8000ea8 <__aeabi_cfcmpeq>
 8000ec0:	bf0c      	ite	eq
 8000ec2:	2001      	moveq	r0, #1
 8000ec4:	2000      	movne	r0, #0
 8000ec6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eca:	bf00      	nop

08000ecc <__aeabi_fcmplt>:
 8000ecc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed0:	f7ff ffea 	bl	8000ea8 <__aeabi_cfcmpeq>
 8000ed4:	bf34      	ite	cc
 8000ed6:	2001      	movcc	r0, #1
 8000ed8:	2000      	movcs	r0, #0
 8000eda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ede:	bf00      	nop

08000ee0 <__aeabi_fcmple>:
 8000ee0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee4:	f7ff ffe0 	bl	8000ea8 <__aeabi_cfcmpeq>
 8000ee8:	bf94      	ite	ls
 8000eea:	2001      	movls	r0, #1
 8000eec:	2000      	movhi	r0, #0
 8000eee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef2:	bf00      	nop

08000ef4 <__aeabi_fcmpge>:
 8000ef4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ef8:	f7ff ffd2 	bl	8000ea0 <__aeabi_cfrcmple>
 8000efc:	bf94      	ite	ls
 8000efe:	2001      	movls	r0, #1
 8000f00:	2000      	movhi	r0, #0
 8000f02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f06:	bf00      	nop

08000f08 <__aeabi_fcmpgt>:
 8000f08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f0c:	f7ff ffc8 	bl	8000ea0 <__aeabi_cfrcmple>
 8000f10:	bf34      	ite	cc
 8000f12:	2001      	movcc	r0, #1
 8000f14:	2000      	movcs	r0, #0
 8000f16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f1a:	bf00      	nop

08000f1c <send_and_check_command>:
#include "WizFi250Handler.h"

/* USER CODE BEGIN 0 */

uint8_t send_and_check_command(char* send_command, uint8_t cr_lf, uint32_t check_delay, uint32_t check_count, char* str_find1, char* str_find2, uint8_t debug_print)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b088      	sub	sp, #32
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	607a      	str	r2, [r7, #4]
 8000f26:	603b      	str	r3, [r7, #0]
 8000f28:	460b      	mov	r3, r1
 8000f2a:	72fb      	strb	r3, [r7, #11]
	uint32_t i = 0;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	61fb      	str	r3, [r7, #28]
	uint8_t is_found1=0, is_found2=0;
 8000f30:	2300      	movs	r3, #0
 8000f32:	76fb      	strb	r3, [r7, #27]
 8000f34:	2300      	movs	r3, #0
 8000f36:	76bb      	strb	r3, [r7, #26]
	uint32_t nResult = 0;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	617b      	str	r3, [r7, #20]
	char crlf_string[3];
	uart1_hal_rx_buffer_init();
 8000f3c:	f001 ff48 	bl	8002dd0 <uart1_hal_rx_buffer_init>
	uart2_hal_rx_buffer_init();
 8000f40:	f001 ff7c 	bl	8002e3c <uart2_hal_rx_buffer_init>

	// Send Command
	uart2_hal_putchar((uint8_t*)send_command, strlen(send_command));
 8000f44:	68f8      	ldr	r0, [r7, #12]
 8000f46:	f7ff f979 	bl	800023c <strlen>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	68f8      	ldr	r0, [r7, #12]
 8000f50:	f002 fb72 	bl	8003638 <uart2_hal_putchar>

	// Send CR, LF
	if ( cr_lf==1 )		strcpy(crlf_string, "\r");
 8000f54:	7afb      	ldrb	r3, [r7, #11]
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d104      	bne.n	8000f64 <send_and_check_command+0x48>
 8000f5a:	f107 0310 	add.w	r3, r7, #16
 8000f5e:	220d      	movs	r2, #13
 8000f60:	801a      	strh	r2, [r3, #0]
 8000f62:	e013      	b.n	8000f8c <send_and_check_command+0x70>
	else if ( cr_lf==2 )	strcpy(crlf_string, "\n");
 8000f64:	7afb      	ldrb	r3, [r7, #11]
 8000f66:	2b02      	cmp	r3, #2
 8000f68:	d104      	bne.n	8000f74 <send_and_check_command+0x58>
 8000f6a:	f107 0310 	add.w	r3, r7, #16
 8000f6e:	220a      	movs	r2, #10
 8000f70:	801a      	strh	r2, [r3, #0]
 8000f72:	e00b      	b.n	8000f8c <send_and_check_command+0x70>
	else if ( cr_lf==3 )	strcpy(crlf_string, "\r\n");
 8000f74:	7afb      	ldrb	r3, [r7, #11]
 8000f76:	2b03      	cmp	r3, #3
 8000f78:	d108      	bne.n	8000f8c <send_and_check_command+0x70>
 8000f7a:	4a41      	ldr	r2, [pc, #260]	; (8001080 <send_and_check_command+0x164>)
 8000f7c:	f107 0310 	add.w	r3, r7, #16
 8000f80:	6812      	ldr	r2, [r2, #0]
 8000f82:	4611      	mov	r1, r2
 8000f84:	8019      	strh	r1, [r3, #0]
 8000f86:	3302      	adds	r3, #2
 8000f88:	0c12      	lsrs	r2, r2, #16
 8000f8a:	701a      	strb	r2, [r3, #0]
	if ( cr_lf==1 || cr_lf==2 || cr_lf==3 ){
 8000f8c:	7afb      	ldrb	r3, [r7, #11]
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d005      	beq.n	8000f9e <send_and_check_command+0x82>
 8000f92:	7afb      	ldrb	r3, [r7, #11]
 8000f94:	2b02      	cmp	r3, #2
 8000f96:	d002      	beq.n	8000f9e <send_and_check_command+0x82>
 8000f98:	7afb      	ldrb	r3, [r7, #11]
 8000f9a:	2b03      	cmp	r3, #3
 8000f9c:	d10c      	bne.n	8000fb8 <send_and_check_command+0x9c>
		uart2_hal_putchar((uint8_t*)crlf_string, strlen(crlf_string));
 8000f9e:	f107 0310 	add.w	r3, r7, #16
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff f94a 	bl	800023c <strlen>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	461a      	mov	r2, r3
 8000fac:	f107 0310 	add.w	r3, r7, #16
 8000fb0:	4611      	mov	r1, r2
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f002 fb40 	bl	8003638 <uart2_hal_putchar>
	}
	if ( debug_print==1 )	printf("\r\nDBG>>> Send : %s\r\n", send_command);
 8000fb8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d103      	bne.n	8000fc8 <send_and_check_command+0xac>
 8000fc0:	68f9      	ldr	r1, [r7, #12]
 8000fc2:	4830      	ldr	r0, [pc, #192]	; (8001084 <send_and_check_command+0x168>)
 8000fc4:	f006 fed2 	bl	8007d6c <iprintf>

	// Recv Response
	if ( str_find1==0 ) is_found1 = 1;
 8000fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d101      	bne.n	8000fd2 <send_and_check_command+0xb6>
 8000fce:	2301      	movs	r3, #1
 8000fd0:	76fb      	strb	r3, [r7, #27]
	if ( str_find2==0 ) is_found2 = 1;
 8000fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d135      	bne.n	8001044 <send_and_check_command+0x128>
 8000fd8:	2301      	movs	r3, #1
 8000fda:	76bb      	strb	r3, [r7, #26]

	while(uart2_hal_getchar() != 0){
 8000fdc:	e032      	b.n	8001044 <send_and_check_command+0x128>

		if ( is_found1==0 ){
 8000fde:	7efb      	ldrb	r3, [r7, #27]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d108      	bne.n	8000ff6 <send_and_check_command+0xda>
			if ( strstr((char*)uart2_hal_rx.buffer, str_find1) ) is_found1 = 1;
 8000fe4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000fe6:	4828      	ldr	r0, [pc, #160]	; (8001088 <send_and_check_command+0x16c>)
 8000fe8:	f007 f834 	bl	8008054 <strstr>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <send_and_check_command+0xda>
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	76fb      	strb	r3, [r7, #27]
		}
		if ( is_found2==0 ){
 8000ff6:	7ebb      	ldrb	r3, [r7, #26]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d108      	bne.n	800100e <send_and_check_command+0xf2>
			if ( strstr((char*)uart2_hal_rx.buffer, str_find2) ) is_found2 = 1;
 8000ffc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000ffe:	4822      	ldr	r0, [pc, #136]	; (8001088 <send_and_check_command+0x16c>)
 8001000:	f007 f828 	bl	8008054 <strstr>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <send_and_check_command+0xf2>
 800100a:	2301      	movs	r3, #1
 800100c:	76bb      	strb	r3, [r7, #26]
		}
		if( (is_found1 == 1) && (is_found2 == 1) ) {
 800100e:	7efb      	ldrb	r3, [r7, #27]
 8001010:	2b01      	cmp	r3, #1
 8001012:	d10e      	bne.n	8001032 <send_and_check_command+0x116>
 8001014:	7ebb      	ldrb	r3, [r7, #26]
 8001016:	2b01      	cmp	r3, #1
 8001018:	d10b      	bne.n	8001032 <send_and_check_command+0x116>
			HAL_Delay(100);
 800101a:	2064      	movs	r0, #100	; 0x64
 800101c:	f002 fe68 	bl	8003cf0 <HAL_Delay>
			if ( debug_print==1 )	printf("%s", uart2_hal_rx.buffer[0]);
 8001020:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001024:	2b01      	cmp	r3, #1
 8001026:	d113      	bne.n	8001050 <send_and_check_command+0x134>
 8001028:	4917      	ldr	r1, [pc, #92]	; (8001088 <send_and_check_command+0x16c>)
 800102a:	4818      	ldr	r0, [pc, #96]	; (800108c <send_and_check_command+0x170>)
 800102c:	f006 fe9e 	bl	8007d6c <iprintf>
			break;
 8001030:	e00e      	b.n	8001050 <send_and_check_command+0x134>
		}
		if( (i++ >= check_count))
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	1c5a      	adds	r2, r3, #1
 8001036:	61fa      	str	r2, [r7, #28]
 8001038:	683a      	ldr	r2, [r7, #0]
 800103a:	429a      	cmp	r2, r3
 800103c:	d90a      	bls.n	8001054 <send_and_check_command+0x138>
			break;

		HAL_Delay(check_delay);
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f002 fe56 	bl	8003cf0 <HAL_Delay>
	while(uart2_hal_getchar() != 0){
 8001044:	f002 f8d8 	bl	80031f8 <uart2_hal_getchar>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d1c7      	bne.n	8000fde <send_and_check_command+0xc2>
 800104e:	e002      	b.n	8001056 <send_and_check_command+0x13a>
			break;
 8001050:	bf00      	nop
 8001052:	e000      	b.n	8001056 <send_and_check_command+0x13a>
			break;
 8001054:	bf00      	nop
	}

	// Error : Timeout or Not Found Success String
	if ( !(is_found1 && is_found2) ){
 8001056:	7efb      	ldrb	r3, [r7, #27]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d002      	beq.n	8001062 <send_and_check_command+0x146>
 800105c:	7ebb      	ldrb	r3, [r7, #26]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d107      	bne.n	8001072 <send_and_check_command+0x156>
		printf("DBG>>> Error : Timeout or Not Found Success String\r\n");
 8001062:	480b      	ldr	r0, [pc, #44]	; (8001090 <send_and_check_command+0x174>)
 8001064:	f006 ff08 	bl	8007e78 <puts>
		nResult = 2;
 8001068:	2302      	movs	r3, #2
 800106a:	617b      	str	r3, [r7, #20]
		return nResult;
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	b2db      	uxtb	r3, r3
 8001070:	e001      	b.n	8001076 <send_and_check_command+0x15a>
	}

	return nResult;
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	b2db      	uxtb	r3, r3
}
 8001076:	4618      	mov	r0, r3
 8001078:	3720      	adds	r7, #32
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	0800a4b0 	.word	0x0800a4b0
 8001084:	0800a4b4 	.word	0x0800a4b4
 8001088:	20001534 	.word	0x20001534
 800108c:	0800a4cc 	.word	0x0800a4cc
 8001090:	0800a4d0 	.word	0x0800a4d0

08001094 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b088      	sub	sp, #32
 8001098:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109a:	f107 0310 	add.w	r3, r7, #16
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	605a      	str	r2, [r3, #4]
 80010a4:	609a      	str	r2, [r3, #8]
 80010a6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010a8:	4b38      	ldr	r3, [pc, #224]	; (800118c <MX_GPIO_Init+0xf8>)
 80010aa:	699b      	ldr	r3, [r3, #24]
 80010ac:	4a37      	ldr	r2, [pc, #220]	; (800118c <MX_GPIO_Init+0xf8>)
 80010ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010b2:	6193      	str	r3, [r2, #24]
 80010b4:	4b35      	ldr	r3, [pc, #212]	; (800118c <MX_GPIO_Init+0xf8>)
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010c0:	4b32      	ldr	r3, [pc, #200]	; (800118c <MX_GPIO_Init+0xf8>)
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	4a31      	ldr	r2, [pc, #196]	; (800118c <MX_GPIO_Init+0xf8>)
 80010c6:	f043 0310 	orr.w	r3, r3, #16
 80010ca:	6193      	str	r3, [r2, #24]
 80010cc:	4b2f      	ldr	r3, [pc, #188]	; (800118c <MX_GPIO_Init+0xf8>)
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	f003 0310 	and.w	r3, r3, #16
 80010d4:	60bb      	str	r3, [r7, #8]
 80010d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d8:	4b2c      	ldr	r3, [pc, #176]	; (800118c <MX_GPIO_Init+0xf8>)
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	4a2b      	ldr	r2, [pc, #172]	; (800118c <MX_GPIO_Init+0xf8>)
 80010de:	f043 0304 	orr.w	r3, r3, #4
 80010e2:	6193      	str	r3, [r2, #24]
 80010e4:	4b29      	ldr	r3, [pc, #164]	; (800118c <MX_GPIO_Init+0xf8>)
 80010e6:	699b      	ldr	r3, [r3, #24]
 80010e8:	f003 0304 	and.w	r3, r3, #4
 80010ec:	607b      	str	r3, [r7, #4]
 80010ee:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f0:	4b26      	ldr	r3, [pc, #152]	; (800118c <MX_GPIO_Init+0xf8>)
 80010f2:	699b      	ldr	r3, [r3, #24]
 80010f4:	4a25      	ldr	r2, [pc, #148]	; (800118c <MX_GPIO_Init+0xf8>)
 80010f6:	f043 0308 	orr.w	r3, r3, #8
 80010fa:	6193      	str	r3, [r2, #24]
 80010fc:	4b23      	ldr	r3, [pc, #140]	; (800118c <MX_GPIO_Init+0xf8>)
 80010fe:	699b      	ldr	r3, [r3, #24]
 8001100:	f003 0308 	and.w	r3, r3, #8
 8001104:	603b      	str	r3, [r7, #0]
 8001106:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_RED_Pin|LED_GREEN_Pin|LED_BLUE_Pin, GPIO_PIN_SET);
 8001108:	2201      	movs	r2, #1
 800110a:	f44f 7150 	mov.w	r1, #832	; 0x340
 800110e:	4820      	ldr	r0, [pc, #128]	; (8001190 <MX_GPIO_Init+0xfc>)
 8001110:	f003 f9f6 	bl	8004500 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = SECTOR1_Pin|SECTOR2_Pin|SECTOR3_Pin|SECTOR4_Pin;
 8001114:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001118:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800111a:	4b1e      	ldr	r3, [pc, #120]	; (8001194 <MX_GPIO_Init+0x100>)
 800111c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800111e:	2301      	movs	r3, #1
 8001120:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001122:	f107 0310 	add.w	r3, r7, #16
 8001126:	4619      	mov	r1, r3
 8001128:	481b      	ldr	r0, [pc, #108]	; (8001198 <MX_GPIO_Init+0x104>)
 800112a:	f003 f855 	bl	80041d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800112e:	2302      	movs	r3, #2
 8001130:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001132:	4b18      	ldr	r3, [pc, #96]	; (8001194 <MX_GPIO_Init+0x100>)
 8001134:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001136:	2301      	movs	r3, #1
 8001138:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800113a:	f107 0310 	add.w	r3, r7, #16
 800113e:	4619      	mov	r1, r3
 8001140:	4816      	ldr	r0, [pc, #88]	; (800119c <MX_GPIO_Init+0x108>)
 8001142:	f003 f849 	bl	80041d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin|LED_BLUE_Pin;
 8001146:	f44f 7350 	mov.w	r3, #832	; 0x340
 800114a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800114c:	2301      	movs	r3, #1
 800114e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001154:	2302      	movs	r3, #2
 8001156:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001158:	f107 0310 	add.w	r3, r7, #16
 800115c:	4619      	mov	r1, r3
 800115e:	480c      	ldr	r0, [pc, #48]	; (8001190 <MX_GPIO_Init+0xfc>)
 8001160:	f003 f83a 	bl	80041d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001164:	2200      	movs	r2, #0
 8001166:	2100      	movs	r1, #0
 8001168:	2007      	movs	r0, #7
 800116a:	f002 febc 	bl	8003ee6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800116e:	2007      	movs	r0, #7
 8001170:	f002 fed5 	bl	8003f1e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001174:	2200      	movs	r2, #0
 8001176:	2100      	movs	r1, #0
 8001178:	2017      	movs	r0, #23
 800117a:	f002 feb4 	bl	8003ee6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800117e:	2017      	movs	r0, #23
 8001180:	f002 fecd 	bl	8003f1e <HAL_NVIC_EnableIRQ>

}
 8001184:	bf00      	nop
 8001186:	3720      	adds	r7, #32
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	40021000 	.word	0x40021000
 8001190:	40011000 	.word	0x40011000
 8001194:	10210000 	.word	0x10210000
 8001198:	40011800 	.word	0x40011800
 800119c:	40010c00 	.word	0x40010c00

080011a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011a0:	b590      	push	{r4, r7, lr}
 80011a2:	f5ad 7d4f 	sub.w	sp, sp, #828	; 0x33c
 80011a6:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	float value_T3H = 0;
 80011a8:	f04f 0300 	mov.w	r3, #0
 80011ac:	f8c7 3318 	str.w	r3, [r7, #792]	; 0x318
	float value_Wind = 0;
 80011b0:	f04f 0300 	mov.w	r3, #0
 80011b4:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
	float value_REH = 0;
 80011b8:	f04f 0300 	mov.w	r3, #0
 80011bc:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
	float value_POP = 0;
 80011c0:	f04f 0300 	mov.w	r3, #0
 80011c4:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
	float value_SKY = 0;
 80011c8:	f04f 0300 	mov.w	r3, #0
 80011cc:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
	int i;
	char cmd[256];
	char sendView[512];
	char exists_sector = 0;
 80011d0:	2300      	movs	r3, #0
 80011d2:	f887 3307 	strb.w	r3, [r7, #775]	; 0x307
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011d6:	f002 fd29 	bl	8003c2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011da:	f000 fc7f 	bl	8001adc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011de:	f7ff ff59 	bl	8001094 <MX_GPIO_Init>
  MX_RTC_Init();
 80011e2:	f001 fb31 	bl	8002848 <MX_RTC_Init>
  MX_TIM2_Init();
 80011e6:	f001 fd2b 	bl	8002c40 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80011ea:	f001 fe87 	bl	8002efc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80011ee:	f001 feb3 	bl	8002f58 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80011f2:	f001 fedf 	bl	8002fb4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  init_cmd_msg();
 80011f6:	f001 faf9 	bl	80027ec <init_cmd_msg>
  init_sector_matching();
 80011fa:	f001 fb05 	bl	8002808 <init_sector_matching>

  printf("uart test\r\n");
 80011fe:	48b5      	ldr	r0, [pc, #724]	; (80014d4 <main+0x334>)
 8001200:	f006 fe3a 	bl	8007e78 <puts>
  printf("Buffer check : %s\r\n", &uart2_hal_rx.buffer[0]);
 8001204:	49b4      	ldr	r1, [pc, #720]	; (80014d8 <main+0x338>)
 8001206:	48b5      	ldr	r0, [pc, #724]	; (80014dc <main+0x33c>)
 8001208:	f006 fdb0 	bl	8007d6c <iprintf>

  HAL_UART_Receive_IT(&huart1, &uart1_hal_rx.temp, 1);
 800120c:	2201      	movs	r2, #1
 800120e:	49b4      	ldr	r1, [pc, #720]	; (80014e0 <main+0x340>)
 8001210:	48b4      	ldr	r0, [pc, #720]	; (80014e4 <main+0x344>)
 8001212:	f005 fd04 	bl	8006c1e <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, &uart2_hal_rx.temp, 1);
 8001216:	2201      	movs	r2, #1
 8001218:	49b3      	ldr	r1, [pc, #716]	; (80014e8 <main+0x348>)
 800121a:	48b4      	ldr	r0, [pc, #720]	; (80014ec <main+0x34c>)
 800121c:	f005 fcff 	bl	8006c1e <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart3, &uart3_hal_rx.temp, 1);
 8001220:	2201      	movs	r2, #1
 8001222:	49b3      	ldr	r1, [pc, #716]	; (80014f0 <main+0x350>)
 8001224:	48b3      	ldr	r0, [pc, #716]	; (80014f4 <main+0x354>)
 8001226:	f005 fcfa 	bl	8006c1e <HAL_UART_Receive_IT>

  /////START/////
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, RESET);
 800122a:	2200      	movs	r2, #0
 800122c:	2140      	movs	r1, #64	; 0x40
 800122e:	48b2      	ldr	r0, [pc, #712]	; (80014f8 <main+0x358>)
 8001230:	f003 f966 	bl	8004500 <HAL_GPIO_WritePin>
  if ( send_and_check_command("AT+WLEAVE", 1, 500,  50, "[OK]", "", 1) !=0 )	{ printf("DBG>>> Error : AT Command\r\n");}
 8001234:	2301      	movs	r3, #1
 8001236:	9302      	str	r3, [sp, #8]
 8001238:	4bb0      	ldr	r3, [pc, #704]	; (80014fc <main+0x35c>)
 800123a:	9301      	str	r3, [sp, #4]
 800123c:	4bb0      	ldr	r3, [pc, #704]	; (8001500 <main+0x360>)
 800123e:	9300      	str	r3, [sp, #0]
 8001240:	2332      	movs	r3, #50	; 0x32
 8001242:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001246:	2101      	movs	r1, #1
 8001248:	48ae      	ldr	r0, [pc, #696]	; (8001504 <main+0x364>)
 800124a:	f7ff fe67 	bl	8000f1c <send_and_check_command>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d002      	beq.n	800125a <main+0xba>
 8001254:	48ac      	ldr	r0, [pc, #688]	; (8001508 <main+0x368>)
 8001256:	f006 fe0f 	bl	8007e78 <puts>
  if ( send_and_check_command("AT+WNET=1", 1, 500,  10, "[OK]", "", 1) !=0 )	{ printf("DBG>>> Error : AT Command\r\n");}
 800125a:	2301      	movs	r3, #1
 800125c:	9302      	str	r3, [sp, #8]
 800125e:	4ba7      	ldr	r3, [pc, #668]	; (80014fc <main+0x35c>)
 8001260:	9301      	str	r3, [sp, #4]
 8001262:	4ba7      	ldr	r3, [pc, #668]	; (8001500 <main+0x360>)
 8001264:	9300      	str	r3, [sp, #0]
 8001266:	230a      	movs	r3, #10
 8001268:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800126c:	2101      	movs	r1, #1
 800126e:	48a7      	ldr	r0, [pc, #668]	; (800150c <main+0x36c>)
 8001270:	f7ff fe54 	bl	8000f1c <send_and_check_command>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d002      	beq.n	8001280 <main+0xe0>
 800127a:	48a3      	ldr	r0, [pc, #652]	; (8001508 <main+0x368>)
 800127c:	f006 fdfc 	bl	8007e78 <puts>
  sprintf(cmd,"AT+WSET=0,%s",SSID);
 8001280:	f507 7301 	add.w	r3, r7, #516	; 0x204
 8001284:	4aa2      	ldr	r2, [pc, #648]	; (8001510 <main+0x370>)
 8001286:	49a3      	ldr	r1, [pc, #652]	; (8001514 <main+0x374>)
 8001288:	4618      	mov	r0, r3
 800128a:	f006 fec3 	bl	8008014 <siprintf>
  if ( send_and_check_command(cmd, 1, 500,  10, "[OK]", "", 1) !=0 )			{ printf("DBG>>> Error : AT Command\r\n");}
 800128e:	f507 7001 	add.w	r0, r7, #516	; 0x204
 8001292:	2301      	movs	r3, #1
 8001294:	9302      	str	r3, [sp, #8]
 8001296:	4b99      	ldr	r3, [pc, #612]	; (80014fc <main+0x35c>)
 8001298:	9301      	str	r3, [sp, #4]
 800129a:	4b99      	ldr	r3, [pc, #612]	; (8001500 <main+0x360>)
 800129c:	9300      	str	r3, [sp, #0]
 800129e:	230a      	movs	r3, #10
 80012a0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80012a4:	2101      	movs	r1, #1
 80012a6:	f7ff fe39 	bl	8000f1c <send_and_check_command>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d002      	beq.n	80012b6 <main+0x116>
 80012b0:	4895      	ldr	r0, [pc, #596]	; (8001508 <main+0x368>)
 80012b2:	f006 fde1 	bl	8007e78 <puts>
  sprintf(cmd,"AT+WSEC=0,,%s",PASSWORD);
 80012b6:	f507 7301 	add.w	r3, r7, #516	; 0x204
 80012ba:	4a97      	ldr	r2, [pc, #604]	; (8001518 <main+0x378>)
 80012bc:	4997      	ldr	r1, [pc, #604]	; (800151c <main+0x37c>)
 80012be:	4618      	mov	r0, r3
 80012c0:	f006 fea8 	bl	8008014 <siprintf>
  if ( send_and_check_command(cmd, 1, 500,  10, "[OK]", "", 1) !=0 )			{ printf("DBG>>> Error : AT Command\r\n");}
 80012c4:	f507 7001 	add.w	r0, r7, #516	; 0x204
 80012c8:	2301      	movs	r3, #1
 80012ca:	9302      	str	r3, [sp, #8]
 80012cc:	4b8b      	ldr	r3, [pc, #556]	; (80014fc <main+0x35c>)
 80012ce:	9301      	str	r3, [sp, #4]
 80012d0:	4b8b      	ldr	r3, [pc, #556]	; (8001500 <main+0x360>)
 80012d2:	9300      	str	r3, [sp, #0]
 80012d4:	230a      	movs	r3, #10
 80012d6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80012da:	2101      	movs	r1, #1
 80012dc:	f7ff fe1e 	bl	8000f1c <send_and_check_command>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d002      	beq.n	80012ec <main+0x14c>
 80012e6:	4888      	ldr	r0, [pc, #544]	; (8001508 <main+0x368>)
 80012e8:	f006 fdc6 	bl	8007e78 <puts>
  if ( send_and_check_command("AT+WJOIN", 1, 500,  100, "[OK]", "", 1) !=0 )	{ printf("DBG>>> Error : AT Command\r\n"); Error_Handler();}
 80012ec:	2301      	movs	r3, #1
 80012ee:	9302      	str	r3, [sp, #8]
 80012f0:	4b82      	ldr	r3, [pc, #520]	; (80014fc <main+0x35c>)
 80012f2:	9301      	str	r3, [sp, #4]
 80012f4:	4b82      	ldr	r3, [pc, #520]	; (8001500 <main+0x360>)
 80012f6:	9300      	str	r3, [sp, #0]
 80012f8:	2364      	movs	r3, #100	; 0x64
 80012fa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80012fe:	2101      	movs	r1, #1
 8001300:	4887      	ldr	r0, [pc, #540]	; (8001520 <main+0x380>)
 8001302:	f7ff fe0b 	bl	8000f1c <send_and_check_command>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d004      	beq.n	8001316 <main+0x176>
 800130c:	487e      	ldr	r0, [pc, #504]	; (8001508 <main+0x368>)
 800130e:	f006 fdb3 	bl	8007e78 <puts>
 8001312:	f000 fc39 	bl	8001b88 <Error_Handler>
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, SET);
 8001316:	2201      	movs	r2, #1
 8001318:	2140      	movs	r1, #64	; 0x40
 800131a:	4877      	ldr	r0, [pc, #476]	; (80014f8 <main+0x358>)
 800131c:	f003 f8f0 	bl	8004500 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8001320:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001324:	f002 fce4 	bl	8003cf0 <HAL_Delay>

  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK){
 8001328:	2200      	movs	r2, #0
 800132a:	497e      	ldr	r1, [pc, #504]	; (8001524 <main+0x384>)
 800132c:	487e      	ldr	r0, [pc, #504]	; (8001528 <main+0x388>)
 800132e:	f004 f9a3 	bl	8005678 <HAL_RTC_SetAlarm_IT>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <main+0x19c>
    Error_Handler();
 8001338:	f000 fc26 	bl	8001b88 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  switch(is_connected)
 800133c:	4b7b      	ldr	r3, [pc, #492]	; (800152c <main+0x38c>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2b05      	cmp	r3, #5
 8001342:	f200 83a0 	bhi.w	8001a86 <main+0x8e6>
 8001346:	a201      	add	r2, pc, #4	; (adr r2, 800134c <main+0x1ac>)
 8001348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800134c:	08001365 	.word	0x08001365
 8001350:	080013cd 	.word	0x080013cd
 8001354:	080013ef 	.word	0x080013ef
 8001358:	08001421 	.word	0x08001421
 800135c:	08001715 	.word	0x08001715
 8001360:	08001a45 	.word	0x08001a45
	  {
	  	  case CONNECTION_TO_SERVER:
	  		  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, RESET);
 8001364:	2200      	movs	r2, #0
 8001366:	f44f 7180 	mov.w	r1, #256	; 0x100
 800136a:	4863      	ldr	r0, [pc, #396]	; (80014f8 <main+0x358>)
 800136c:	f003 f8c8 	bl	8004500 <HAL_GPIO_WritePin>
	  		  sprintf(cmd,"AT+SCON=O,TCN,%s,%s,,1",SERVER_IP,SERVER_PORT);
 8001370:	f507 7001 	add.w	r0, r7, #516	; 0x204
 8001374:	4b6e      	ldr	r3, [pc, #440]	; (8001530 <main+0x390>)
 8001376:	4a6f      	ldr	r2, [pc, #444]	; (8001534 <main+0x394>)
 8001378:	496f      	ldr	r1, [pc, #444]	; (8001538 <main+0x398>)
 800137a:	f006 fe4b 	bl	8008014 <siprintf>
//			if ( send_and_check_command(cmd, 1, 500,  100, "[OK]", "[CONNECT", 1) !=0 )	{ printf("DBG>>> Error : AT Command\r\n"); break;}
	  		  if ( send_and_check_command(cmd, 1, 500,  100, "[OK]", "[CONNECT", 1) !=0 )	{ printf("DBG>>> Error : AT Command\r\n"); Error_Handler();}
 800137e:	f507 7001 	add.w	r0, r7, #516	; 0x204
 8001382:	2301      	movs	r3, #1
 8001384:	9302      	str	r3, [sp, #8]
 8001386:	4b6d      	ldr	r3, [pc, #436]	; (800153c <main+0x39c>)
 8001388:	9301      	str	r3, [sp, #4]
 800138a:	4b5d      	ldr	r3, [pc, #372]	; (8001500 <main+0x360>)
 800138c:	9300      	str	r3, [sp, #0]
 800138e:	2364      	movs	r3, #100	; 0x64
 8001390:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001394:	2101      	movs	r1, #1
 8001396:	f7ff fdc1 	bl	8000f1c <send_and_check_command>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d004      	beq.n	80013aa <main+0x20a>
 80013a0:	4859      	ldr	r0, [pc, #356]	; (8001508 <main+0x368>)
 80013a2:	f006 fd69 	bl	8007e78 <puts>
 80013a6:	f000 fbef 	bl	8001b88 <Error_Handler>
	  		  is_connected = GET_WEATHER_DATA;
 80013aa:	4b60      	ldr	r3, [pc, #384]	; (800152c <main+0x38c>)
 80013ac:	2201      	movs	r2, #1
 80013ae:	601a      	str	r2, [r3, #0]
	  		  uart1_hal_putchar("Send Query\r\n", strlen("Send Query\r\n"));
 80013b0:	210c      	movs	r1, #12
 80013b2:	4863      	ldr	r0, [pc, #396]	; (8001540 <main+0x3a0>)
 80013b4:	f002 f8c6 	bl	8003544 <uart1_hal_putchar>
	  		  uart2_hal_putchar(service_key, 247);
 80013b8:	21f7      	movs	r1, #247	; 0xf7
 80013ba:	4862      	ldr	r0, [pc, #392]	; (8001544 <main+0x3a4>)
 80013bc:	f002 f93c 	bl	8003638 <uart2_hal_putchar>
	  		  uart2_hal_rx_buffer_init();
 80013c0:	f001 fd3c 	bl	8002e3c <uart2_hal_rx_buffer_init>
	  		  printf("Received Data : ");
 80013c4:	4860      	ldr	r0, [pc, #384]	; (8001548 <main+0x3a8>)
 80013c6:	f006 fcd1 	bl	8007d6c <iprintf>
	  		  break;
 80013ca:	e35d      	b.n	8001a88 <main+0x8e8>
	  	  case GET_WEATHER_DATA:
	  		  is_connected = uart2_hal_rx_monitor();
 80013cc:	f001 ff5c 	bl	8003288 <uart2_hal_rx_monitor>
 80013d0:	4603      	mov	r3, r0
 80013d2:	461a      	mov	r2, r3
 80013d4:	4b55      	ldr	r3, [pc, #340]	; (800152c <main+0x38c>)
 80013d6:	601a      	str	r2, [r3, #0]
	  		  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, SET);
 80013d8:	2201      	movs	r2, #1
 80013da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013de:	4846      	ldr	r0, [pc, #280]	; (80014f8 <main+0x358>)
 80013e0:	f003 f88e 	bl	8004500 <HAL_GPIO_WritePin>
	  		  HAL_Delay(1000);
 80013e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013e8:	f002 fc82 	bl	8003cf0 <HAL_Delay>
	  		  break;
 80013ec:	e34c      	b.n	8001a88 <main+0x8e8>
	  	  case DATA_PARSING:
	  		  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, RESET);
 80013ee:	2200      	movs	r2, #0
 80013f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013f4:	4840      	ldr	r0, [pc, #256]	; (80014f8 <main+0x358>)
 80013f6:	f003 f883 	bl	8004500 <HAL_GPIO_WritePin>
	  		  printf("\n\nStart Parsing\n");
 80013fa:	4854      	ldr	r0, [pc, #336]	; (800154c <main+0x3ac>)
 80013fc:	f006 fd3c 	bl	8007e78 <puts>
	  		  Data_parse1((char*)uart2_hal_rx.rx_data);
 8001400:	4853      	ldr	r0, [pc, #332]	; (8001550 <main+0x3b0>)
 8001402:	f000 fe2d 	bl	8002060 <Data_parse1>
	  		  printf("End Parsing\n\n");
 8001406:	4853      	ldr	r0, [pc, #332]	; (8001554 <main+0x3b4>)
 8001408:	f006 fd36 	bl	8007e78 <puts>
	  		  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, SET);
 800140c:	2201      	movs	r2, #1
 800140e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001412:	4839      	ldr	r0, [pc, #228]	; (80014f8 <main+0x358>)
 8001414:	f003 f874 	bl	8004500 <HAL_GPIO_WritePin>
	  		  is_connected = ROTATE_MOTOR;
 8001418:	4b44      	ldr	r3, [pc, #272]	; (800152c <main+0x38c>)
 800141a:	2203      	movs	r2, #3
 800141c:	601a      	str	r2, [r3, #0]
	  		  break;
 800141e:	e333      	b.n	8001a88 <main+0x8e8>
	  	  case ROTATE_MOTOR:
	  		  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, RESET);
 8001420:	2200      	movs	r2, #0
 8001422:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001426:	4834      	ldr	r0, [pc, #208]	; (80014f8 <main+0x358>)
 8001428:	f003 f86a 	bl	8004500 <HAL_GPIO_WritePin>
	  		  if(cmd_msg.cmd == Ctrl){   // if control command is sent(manual)
 800142c:	4b4a      	ldr	r3, [pc, #296]	; (8001558 <main+0x3b8>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b01      	cmp	r3, #1
 8001432:	d119      	bne.n	8001468 <main+0x2c8>
	  			  if(cmd_msg.msg == Sector1)
 8001434:	4b48      	ldr	r3, [pc, #288]	; (8001558 <main+0x3b8>)
 8001436:	785b      	ldrb	r3, [r3, #1]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d102      	bne.n	8001442 <main+0x2a2>
	  				  PWM_SECTOR1();
 800143c:	f000 fdbe 	bl	8001fbc <PWM_SECTOR1>
 8001440:	e15b      	b.n	80016fa <main+0x55a>
	  			  else if(cmd_msg.msg == Sector2 || cmd_msg.msg == Sector3)
 8001442:	4b45      	ldr	r3, [pc, #276]	; (8001558 <main+0x3b8>)
 8001444:	785b      	ldrb	r3, [r3, #1]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d003      	beq.n	8001452 <main+0x2b2>
 800144a:	4b43      	ldr	r3, [pc, #268]	; (8001558 <main+0x3b8>)
 800144c:	785b      	ldrb	r3, [r3, #1]
 800144e:	2b02      	cmp	r3, #2
 8001450:	d102      	bne.n	8001458 <main+0x2b8>
	  				  PWM_SECTOR2();
 8001452:	f000 fdc8 	bl	8001fe6 <PWM_SECTOR2>
 8001456:	e150      	b.n	80016fa <main+0x55a>
	  			  else if(cmd_msg.msg == Sector4)
 8001458:	4b3f      	ldr	r3, [pc, #252]	; (8001558 <main+0x3b8>)
 800145a:	785b      	ldrb	r3, [r3, #1]
 800145c:	2b03      	cmp	r3, #3
 800145e:	f040 814c 	bne.w	80016fa <main+0x55a>
	  				  PWM_SECTOR4();
 8001462:	f000 fde8 	bl	8002036 <PWM_SECTOR4>
 8001466:	e148      	b.n	80016fa <main+0x55a>
	  		  }
	  		  else if(cmd_msg.cmd == Select){   // if searching command is sent
 8001468:	4b3b      	ldr	r3, [pc, #236]	; (8001558 <main+0x3b8>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b03      	cmp	r3, #3
 800146e:	d177      	bne.n	8001560 <main+0x3c0>
	  			  for(i=0; i<4; i++){
 8001470:	2300      	movs	r3, #0
 8001472:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
 8001476:	e028      	b.n	80014ca <main+0x32a>
	  				  if(sector[i].matched_weather == cmd_msg.msg){
 8001478:	4a38      	ldr	r2, [pc, #224]	; (800155c <main+0x3bc>)
 800147a:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	4413      	add	r3, r2
 8001482:	785a      	ldrb	r2, [r3, #1]
 8001484:	4b34      	ldr	r3, [pc, #208]	; (8001558 <main+0x3b8>)
 8001486:	785b      	ldrb	r3, [r3, #1]
 8001488:	429a      	cmp	r2, r3
 800148a:	d119      	bne.n	80014c0 <main+0x320>
	  					  if(i == Sector1)
 800148c:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 8001490:	2b00      	cmp	r3, #0
 8001492:	d102      	bne.n	800149a <main+0x2fa>
	  						  PWM_SECTOR1();
 8001494:	f000 fd92 	bl	8001fbc <PWM_SECTOR1>
	  					  else if(i == Sector2 || i == Sector3)
	  						  PWM_SECTOR2();
	  					  else if(i == Sector4)
	  						  PWM_SECTOR4();
	  					  break;
 8001498:	e12e      	b.n	80016f8 <main+0x558>
	  					  else if(i == Sector2 || i == Sector3)
 800149a:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d003      	beq.n	80014aa <main+0x30a>
 80014a2:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d102      	bne.n	80014b0 <main+0x310>
	  						  PWM_SECTOR2();
 80014aa:	f000 fd9c 	bl	8001fe6 <PWM_SECTOR2>
	  					  break;
 80014ae:	e123      	b.n	80016f8 <main+0x558>
	  					  else if(i == Sector4)
 80014b0:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 80014b4:	2b03      	cmp	r3, #3
 80014b6:	f040 811f 	bne.w	80016f8 <main+0x558>
	  						  PWM_SECTOR4();
 80014ba:	f000 fdbc 	bl	8002036 <PWM_SECTOR4>
	  					  break;
 80014be:	e11b      	b.n	80016f8 <main+0x558>
	  			  for(i=0; i<4; i++){
 80014c0:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 80014c4:	3301      	adds	r3, #1
 80014c6:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
 80014ca:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 80014ce:	2b03      	cmp	r3, #3
 80014d0:	ddd2      	ble.n	8001478 <main+0x2d8>
 80014d2:	e112      	b.n	80016fa <main+0x55a>
 80014d4:	0800a504 	.word	0x0800a504
 80014d8:	20001534 	.word	0x20001534
 80014dc:	0800a510 	.word	0x0800a510
 80014e0:	20003940 	.word	0x20003940
 80014e4:	20003948 	.word	0x20003948
 80014e8:	20002534 	.word	0x20002534
 80014ec:	20004194 	.word	0x20004194
 80014f0:	200014e8 	.word	0x200014e8
 80014f4:	200014f0 	.word	0x200014f0
 80014f8:	40011000 	.word	0x40011000
 80014fc:	0800a530 	.word	0x0800a530
 8001500:	0800a534 	.word	0x0800a534
 8001504:	0800a524 	.word	0x0800a524
 8001508:	0800a53c 	.word	0x0800a53c
 800150c:	0800a558 	.word	0x0800a558
 8001510:	0800a564 	.word	0x0800a564
 8001514:	0800a56c 	.word	0x0800a56c
 8001518:	0800a57c 	.word	0x0800a57c
 800151c:	0800a588 	.word	0x0800a588
 8001520:	0800a598 	.word	0x0800a598
 8001524:	20000304 	.word	0x20000304
 8001528:	2000048c 	.word	0x2000048c
 800152c:	200002f8 	.word	0x200002f8
 8001530:	0800a5a4 	.word	0x0800a5a4
 8001534:	0800a5a8 	.word	0x0800a5a8
 8001538:	0800a5b8 	.word	0x0800a5b8
 800153c:	0800a5d0 	.word	0x0800a5d0
 8001540:	0800a5dc 	.word	0x0800a5dc
 8001544:	20000000 	.word	0x20000000
 8001548:	0800a5ec 	.word	0x0800a5ec
 800154c:	0800a600 	.word	0x0800a600
 8001550:	20001d34 	.word	0x20001d34
 8001554:	0800a610 	.word	0x0800a610
 8001558:	20000330 	.word	0x20000330
 800155c:	20000334 	.word	0x20000334
	  				  }
	  			  }
	  		  }
	  		  else if(cmd_msg.cmd == is_Invalid || cmd_msg.cmd == View){   // if no command is sent(auto)
 8001560:	4b9f      	ldr	r3, [pc, #636]	; (80017e0 <main+0x640>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2b0a      	cmp	r3, #10
 8001566:	d004      	beq.n	8001572 <main+0x3d2>
 8001568:	4b9d      	ldr	r3, [pc, #628]	; (80017e0 <main+0x640>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	2b02      	cmp	r3, #2
 800156e:	f040 80c4 	bne.w	80016fa <main+0x55a>
	  			  printf("Start auto motor rotation\n");
 8001572:	489c      	ldr	r0, [pc, #624]	; (80017e4 <main+0x644>)
 8001574:	f006 fc80 	bl	8007e78 <puts>

	  			  value_T3H = char_to_float(fcst.fcstValue[T3H]);
 8001578:	489b      	ldr	r0, [pc, #620]	; (80017e8 <main+0x648>)
 800157a:	f000 fb0b 	bl	8001b94 <char_to_float>
 800157e:	f8c7 0318 	str.w	r0, [r7, #792]	; 0x318
	  			  value_Wind = (char_to_float(fcst.fcstValue[UUU]) > char_to_float(fcst.fcstValue[VVV])) ? char_to_float(fcst.fcstValue[UUU]) : char_to_float(fcst.fcstValue[VVV]);
 8001582:	489a      	ldr	r0, [pc, #616]	; (80017ec <main+0x64c>)
 8001584:	f000 fb06 	bl	8001b94 <char_to_float>
 8001588:	4604      	mov	r4, r0
 800158a:	4899      	ldr	r0, [pc, #612]	; (80017f0 <main+0x650>)
 800158c:	f000 fb02 	bl	8001b94 <char_to_float>
 8001590:	4603      	mov	r3, r0
 8001592:	4619      	mov	r1, r3
 8001594:	4620      	mov	r0, r4
 8001596:	f7ff fcb7 	bl	8000f08 <__aeabi_fcmpgt>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d004      	beq.n	80015aa <main+0x40a>
 80015a0:	4892      	ldr	r0, [pc, #584]	; (80017ec <main+0x64c>)
 80015a2:	f000 faf7 	bl	8001b94 <char_to_float>
 80015a6:	4603      	mov	r3, r0
 80015a8:	e003      	b.n	80015b2 <main+0x412>
 80015aa:	4891      	ldr	r0, [pc, #580]	; (80017f0 <main+0x650>)
 80015ac:	f000 faf2 	bl	8001b94 <char_to_float>
 80015b0:	4603      	mov	r3, r0
 80015b2:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
	  			  value_Wind = (char_to_float(fcst.fcstValue[WSD]) > value_Wind) ? char_to_float(fcst.fcstValue[WSD]) : value_Wind;
 80015b6:	488f      	ldr	r0, [pc, #572]	; (80017f4 <main+0x654>)
 80015b8:	f000 faec 	bl	8001b94 <char_to_float>
 80015bc:	4603      	mov	r3, r0
 80015be:	4619      	mov	r1, r3
 80015c0:	f8d7 0314 	ldr.w	r0, [r7, #788]	; 0x314
 80015c4:	f7ff fc82 	bl	8000ecc <__aeabi_fcmplt>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d004      	beq.n	80015d8 <main+0x438>
 80015ce:	4889      	ldr	r0, [pc, #548]	; (80017f4 <main+0x654>)
 80015d0:	f000 fae0 	bl	8001b94 <char_to_float>
 80015d4:	4603      	mov	r3, r0
 80015d6:	e001      	b.n	80015dc <main+0x43c>
 80015d8:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 80015dc:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
	  			  value_REH = char_to_float(fcst.fcstValue[REH]);
 80015e0:	4885      	ldr	r0, [pc, #532]	; (80017f8 <main+0x658>)
 80015e2:	f000 fad7 	bl	8001b94 <char_to_float>
 80015e6:	f8c7 0310 	str.w	r0, [r7, #784]	; 0x310
	  			  value_POP = char_to_float(fcst.fcstValue[POP]);
 80015ea:	4884      	ldr	r0, [pc, #528]	; (80017fc <main+0x65c>)
 80015ec:	f000 fad2 	bl	8001b94 <char_to_float>
 80015f0:	f8c7 030c 	str.w	r0, [r7, #780]	; 0x30c
	  			  value_SKY = char_to_float(fcst.fcstValue[SKY]);
 80015f4:	4882      	ldr	r0, [pc, #520]	; (8001800 <main+0x660>)
 80015f6:	f000 facd 	bl	8001b94 <char_to_float>
 80015fa:	f8c7 0308 	str.w	r0, [r7, #776]	; 0x308

	  			  printf("temperature : %f\n", value_T3H);
 80015fe:	f8d7 0318 	ldr.w	r0, [r7, #792]	; 0x318
 8001602:	f7fe ff87 	bl	8000514 <__aeabi_f2d>
 8001606:	4602      	mov	r2, r0
 8001608:	460b      	mov	r3, r1
 800160a:	487e      	ldr	r0, [pc, #504]	; (8001804 <main+0x664>)
 800160c:	f006 fbae 	bl	8007d6c <iprintf>
	  			  printf("wind speed : %f\n", value_Wind);
 8001610:	f8d7 0314 	ldr.w	r0, [r7, #788]	; 0x314
 8001614:	f7fe ff7e 	bl	8000514 <__aeabi_f2d>
 8001618:	4602      	mov	r2, r0
 800161a:	460b      	mov	r3, r1
 800161c:	487a      	ldr	r0, [pc, #488]	; (8001808 <main+0x668>)
 800161e:	f006 fba5 	bl	8007d6c <iprintf>
	  			  printf("humidity : %f\n", value_REH);
 8001622:	f8d7 0310 	ldr.w	r0, [r7, #784]	; 0x310
 8001626:	f7fe ff75 	bl	8000514 <__aeabi_f2d>
 800162a:	4602      	mov	r2, r0
 800162c:	460b      	mov	r3, r1
 800162e:	4877      	ldr	r0, [pc, #476]	; (800180c <main+0x66c>)
 8001630:	f006 fb9c 	bl	8007d6c <iprintf>
	  			  printf("precipitation probability : %f\n", value_POP);
 8001634:	f8d7 030c 	ldr.w	r0, [r7, #780]	; 0x30c
 8001638:	f7fe ff6c 	bl	8000514 <__aeabi_f2d>
 800163c:	4602      	mov	r2, r0
 800163e:	460b      	mov	r3, r1
 8001640:	4873      	ldr	r0, [pc, #460]	; (8001810 <main+0x670>)
 8001642:	f006 fb93 	bl	8007d6c <iprintf>
	  			  printf("sky : %f\n", value_SKY);
 8001646:	f8d7 0308 	ldr.w	r0, [r7, #776]	; 0x308
 800164a:	f7fe ff63 	bl	8000514 <__aeabi_f2d>
 800164e:	4602      	mov	r2, r0
 8001650:	460b      	mov	r3, r1
 8001652:	4870      	ldr	r0, [pc, #448]	; (8001814 <main+0x674>)
 8001654:	f006 fb8a 	bl	8007d6c <iprintf>

	  			  for(int i = 0; i < 4; i++) {
 8001658:	2300      	movs	r3, #0
 800165a:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
 800165e:	e046      	b.n	80016ee <main+0x54e>
	  				  if(sector[i].is_matched) {
 8001660:	4a6d      	ldr	r2, [pc, #436]	; (8001818 <main+0x678>)
 8001662:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 8001666:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d03a      	beq.n	80016e4 <main+0x544>
	  					  if(sector[i].matched_weather == analyze_weather(value_T3H, value_Wind, value_REH, value_POP, value_SKY)){
 800166e:	4a6a      	ldr	r2, [pc, #424]	; (8001818 <main+0x678>)
 8001670:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	4413      	add	r3, r2
 8001678:	785b      	ldrb	r3, [r3, #1]
 800167a:	461c      	mov	r4, r3
 800167c:	f8d7 3308 	ldr.w	r3, [r7, #776]	; 0x308
 8001680:	9300      	str	r3, [sp, #0]
 8001682:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 8001686:	f8d7 2310 	ldr.w	r2, [r7, #784]	; 0x310
 800168a:	f8d7 1314 	ldr.w	r1, [r7, #788]	; 0x314
 800168e:	f8d7 0318 	ldr.w	r0, [r7, #792]	; 0x318
 8001692:	f000 fbc3 	bl	8001e1c <analyze_weather>
 8001696:	4603      	mov	r3, r0
 8001698:	429c      	cmp	r4, r3
 800169a:	d123      	bne.n	80016e4 <main+0x544>
 800169c:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 80016a0:	2b03      	cmp	r3, #3
 80016a2:	d017      	beq.n	80016d4 <main+0x534>
 80016a4:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 80016a8:	2b03      	cmp	r3, #3
 80016aa:	dc16      	bgt.n	80016da <main+0x53a>
 80016ac:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d009      	beq.n	80016c8 <main+0x528>
 80016b4:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	db0e      	blt.n	80016da <main+0x53a>
 80016bc:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 80016c0:	3b01      	subs	r3, #1
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d809      	bhi.n	80016da <main+0x53a>
 80016c6:	e002      	b.n	80016ce <main+0x52e>
	  						  switch(i)
	  						  {
	  						  	  case Sector1:
	  						  		  PWM_SECTOR1();
 80016c8:	f000 fc78 	bl	8001fbc <PWM_SECTOR1>
	  						  		  break;
 80016cc:	e009      	b.n	80016e2 <main+0x542>
	  						  	  case Sector2:
	  						  	  case Sector3:
	  						  		  PWM_SECTOR2();
 80016ce:	f000 fc8a 	bl	8001fe6 <PWM_SECTOR2>
	  						  		  break;
 80016d2:	e006      	b.n	80016e2 <main+0x542>
	  						  	  case Sector4:
	  						  		  PWM_SECTOR4();
 80016d4:	f000 fcaf 	bl	8002036 <PWM_SECTOR4>
	  						  		  break;
 80016d8:	e003      	b.n	80016e2 <main+0x542>
	  						  	  default:
	  						  		  printf("No corresponding sector found\r\n");
 80016da:	4850      	ldr	r0, [pc, #320]	; (800181c <main+0x67c>)
 80016dc:	f006 fbcc 	bl	8007e78 <puts>
	  						  		  break;
 80016e0:	bf00      	nop
	  						  }   // End switch
	  						  break;
 80016e2:	e00a      	b.n	80016fa <main+0x55a>
	  			  for(int i = 0; i < 4; i++) {
 80016e4:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 80016e8:	3301      	adds	r3, #1
 80016ea:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
 80016ee:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 80016f2:	2b03      	cmp	r3, #3
 80016f4:	ddb4      	ble.n	8001660 <main+0x4c0>
 80016f6:	e000      	b.n	80016fa <main+0x55a>
	  					  break;
 80016f8:	bf00      	nop
	  					  }   // End if
	  				  }   // End if
	  			  }   // End for
	  		  }
	  		  is_connected = BT_WAITING;
 80016fa:	4b49      	ldr	r3, [pc, #292]	; (8001820 <main+0x680>)
 80016fc:	2204      	movs	r2, #4
 80016fe:	601a      	str	r2, [r3, #0]
	  		  HAL_Delay(100);
 8001700:	2064      	movs	r0, #100	; 0x64
 8001702:	f002 faf5 	bl	8003cf0 <HAL_Delay>
	  		  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, SET);
 8001706:	2201      	movs	r2, #1
 8001708:	f44f 7180 	mov.w	r1, #256	; 0x100
 800170c:	4845      	ldr	r0, [pc, #276]	; (8001824 <main+0x684>)
 800170e:	f002 fef7 	bl	8004500 <HAL_GPIO_WritePin>
	  		  break;
 8001712:	e1b9      	b.n	8001a88 <main+0x8e8>
	  	  case BT_WAITING:
	  		  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, RESET);
 8001714:	2200      	movs	r2, #0
 8001716:	f44f 7100 	mov.w	r1, #512	; 0x200
 800171a:	4842      	ldr	r0, [pc, #264]	; (8001824 <main+0x684>)
 800171c:	f002 fef0 	bl	8004500 <HAL_GPIO_WritePin>
	  		  HAL_Delay(200);
 8001720:	20c8      	movs	r0, #200	; 0xc8
 8001722:	f002 fae5 	bl	8003cf0 <HAL_Delay>
	  		  if(uart3_hal_rx_monitor() == 1) {   // if '@'is received
 8001726:	f001 fe1d 	bl	8003364 <uart3_hal_rx_monitor>
 800172a:	4603      	mov	r3, r0
 800172c:	2b01      	cmp	r3, #1
 800172e:	f040 817f 	bne.w	8001a30 <main+0x890>
	  			  init_cmd_msg();   // initialize command and message for new one
 8001732:	f001 f85b 	bl	80027ec <init_cmd_msg>
	  			  if(get_userMessage((char*)uart3_hal_rx.rx_data) != is_Invalid) {
 8001736:	483c      	ldr	r0, [pc, #240]	; (8001828 <main+0x688>)
 8001738:	f000 ff6a 	bl	8002610 <get_userMessage>
 800173c:	4603      	mov	r3, r0
 800173e:	2b0a      	cmp	r3, #10
 8001740:	f000 8174 	beq.w	8001a2c <main+0x88c>
	  				  if(cmd_msg.cmd == Ctrl)
 8001744:	4b26      	ldr	r3, [pc, #152]	; (80017e0 <main+0x640>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d103      	bne.n	8001754 <main+0x5b4>
	  					  is_connected = ROTATE_MOTOR;   // for manual control
 800174c:	4b34      	ldr	r3, [pc, #208]	; (8001820 <main+0x680>)
 800174e:	2203      	movs	r2, #3
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	e16b      	b.n	8001a2c <main+0x88c>
	  				  else if(cmd_msg.cmd == View){
 8001754:	4b22      	ldr	r3, [pc, #136]	; (80017e0 <main+0x640>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	2b02      	cmp	r3, #2
 800175a:	f040 8160 	bne.w	8001a1e <main+0x87e>
	  					  i = sprintf(sendView, "City : Suwon\n");
 800175e:	1d3b      	adds	r3, r7, #4
 8001760:	4932      	ldr	r1, [pc, #200]	; (800182c <main+0x68c>)
 8001762:	4618      	mov	r0, r3
 8001764:	f006 fc56 	bl	8008014 <siprintf>
 8001768:	f8c7 0324 	str.w	r0, [r7, #804]	; 0x324
	  					  i += sprintf(sendView + i, "Forecast time : ");
 800176c:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 8001770:	1d3a      	adds	r2, r7, #4
 8001772:	4413      	add	r3, r2
 8001774:	492e      	ldr	r1, [pc, #184]	; (8001830 <main+0x690>)
 8001776:	4618      	mov	r0, r3
 8001778:	f006 fc4c 	bl	8008014 <siprintf>
 800177c:	4602      	mov	r2, r0
 800177e:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 8001782:	4413      	add	r3, r2
 8001784:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
	  					  for(int j = 0; j<4; j++){
 8001788:	2300      	movs	r3, #0
 800178a:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
 800178e:	e06e      	b.n	800186e <main+0x6ce>
	  						  i += sprintf(sendView + i, "%c", fcst.fcstTime[T3H][j]);
 8001790:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 8001794:	1d3a      	adds	r2, r7, #4
 8001796:	18d0      	adds	r0, r2, r3
 8001798:	4a26      	ldr	r2, [pc, #152]	; (8001834 <main+0x694>)
 800179a:	f8d7 331c 	ldr.w	r3, [r7, #796]	; 0x31c
 800179e:	4413      	add	r3, r2
 80017a0:	33da      	adds	r3, #218	; 0xda
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	461a      	mov	r2, r3
 80017a6:	4924      	ldr	r1, [pc, #144]	; (8001838 <main+0x698>)
 80017a8:	f006 fc34 	bl	8008014 <siprintf>
 80017ac:	4602      	mov	r2, r0
 80017ae:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 80017b2:	4413      	add	r3, r2
 80017b4:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
	  						  if(j==1)
 80017b8:	f8d7 331c 	ldr.w	r3, [r7, #796]	; 0x31c
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d13f      	bne.n	8001840 <main+0x6a0>
	  							  i += sprintf(sendView + i, ":");
 80017c0:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 80017c4:	1d3a      	adds	r2, r7, #4
 80017c6:	4413      	add	r3, r2
 80017c8:	491c      	ldr	r1, [pc, #112]	; (800183c <main+0x69c>)
 80017ca:	4618      	mov	r0, r3
 80017cc:	f006 fc22 	bl	8008014 <siprintf>
 80017d0:	4602      	mov	r2, r0
 80017d2:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 80017d6:	4413      	add	r3, r2
 80017d8:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
 80017dc:	e042      	b.n	8001864 <main+0x6c4>
 80017de:	bf00      	nop
 80017e0:	20000330 	.word	0x20000330
 80017e4:	0800a620 	.word	0x0800a620
 80017e8:	20000464 	.word	0x20000464
 80017ec:	20000473 	.word	0x20000473
 80017f0:	20000478 	.word	0x20000478
 80017f4:	20000487 	.word	0x20000487
 80017f8:	20000455 	.word	0x20000455
 80017fc:	20000446 	.word	0x20000446
 8001800:	2000045f 	.word	0x2000045f
 8001804:	0800a63c 	.word	0x0800a63c
 8001808:	0800a650 	.word	0x0800a650
 800180c:	0800a664 	.word	0x0800a664
 8001810:	0800a674 	.word	0x0800a674
 8001814:	0800a694 	.word	0x0800a694
 8001818:	20000334 	.word	0x20000334
 800181c:	0800a6a0 	.word	0x0800a6a0
 8001820:	200002f8 	.word	0x200002f8
 8001824:	40011000 	.word	0x40011000
 8001828:	20000ce8 	.word	0x20000ce8
 800182c:	0800a6c0 	.word	0x0800a6c0
 8001830:	0800a6d0 	.word	0x0800a6d0
 8001834:	2000033c 	.word	0x2000033c
 8001838:	0800a6e4 	.word	0x0800a6e4
 800183c:	0800a6e8 	.word	0x0800a6e8
	  						  else if(j==3)
 8001840:	f8d7 331c 	ldr.w	r3, [r7, #796]	; 0x31c
 8001844:	2b03      	cmp	r3, #3
 8001846:	d10d      	bne.n	8001864 <main+0x6c4>
	  							  i += sprintf(sendView + i, "\n\n");
 8001848:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 800184c:	1d3a      	adds	r2, r7, #4
 800184e:	4413      	add	r3, r2
 8001850:	498e      	ldr	r1, [pc, #568]	; (8001a8c <main+0x8ec>)
 8001852:	4618      	mov	r0, r3
 8001854:	f006 fbde 	bl	8008014 <siprintf>
 8001858:	4602      	mov	r2, r0
 800185a:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 800185e:	4413      	add	r3, r2
 8001860:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
	  					  for(int j = 0; j<4; j++){
 8001864:	f8d7 331c 	ldr.w	r3, [r7, #796]	; 0x31c
 8001868:	3301      	adds	r3, #1
 800186a:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
 800186e:	f8d7 331c 	ldr.w	r3, [r7, #796]	; 0x31c
 8001872:	2b03      	cmp	r3, #3
 8001874:	dd8c      	ble.n	8001790 <main+0x5f0>
	  					  }

	  					  i += sprintf(sendView + i, "--------------- Weather Information ---------------\n");
 8001876:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 800187a:	1d3a      	adds	r2, r7, #4
 800187c:	4413      	add	r3, r2
 800187e:	4984      	ldr	r1, [pc, #528]	; (8001a90 <main+0x8f0>)
 8001880:	4618      	mov	r0, r3
 8001882:	f006 fbc7 	bl	8008014 <siprintf>
 8001886:	4602      	mov	r2, r0
 8001888:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 800188c:	4413      	add	r3, r2
 800188e:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
	  					  i += sprintf(sendView + i, "Temperature : %s degrees Celsius\n", fcst.fcstValue[T3H]);
 8001892:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 8001896:	1d3a      	adds	r2, r7, #4
 8001898:	4413      	add	r3, r2
 800189a:	4a7e      	ldr	r2, [pc, #504]	; (8001a94 <main+0x8f4>)
 800189c:	497e      	ldr	r1, [pc, #504]	; (8001a98 <main+0x8f8>)
 800189e:	4618      	mov	r0, r3
 80018a0:	f006 fbb8 	bl	8008014 <siprintf>
 80018a4:	4602      	mov	r2, r0
 80018a6:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 80018aa:	4413      	add	r3, r2
 80018ac:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
	  					  i += sprintf(sendView + i, "Humidity : %s percentage\n", fcst.fcstValue[REH]);
 80018b0:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 80018b4:	1d3a      	adds	r2, r7, #4
 80018b6:	4413      	add	r3, r2
 80018b8:	4a78      	ldr	r2, [pc, #480]	; (8001a9c <main+0x8fc>)
 80018ba:	4979      	ldr	r1, [pc, #484]	; (8001aa0 <main+0x900>)
 80018bc:	4618      	mov	r0, r3
 80018be:	f006 fba9 	bl	8008014 <siprintf>
 80018c2:	4602      	mov	r2, r0
 80018c4:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 80018c8:	4413      	add	r3, r2
 80018ca:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
	  					  i += sprintf(sendView + i, "Wind speed : ");
 80018ce:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 80018d2:	1d3a      	adds	r2, r7, #4
 80018d4:	4413      	add	r3, r2
 80018d6:	4973      	ldr	r1, [pc, #460]	; (8001aa4 <main+0x904>)
 80018d8:	4618      	mov	r0, r3
 80018da:	f006 fb9b 	bl	8008014 <siprintf>
 80018de:	4602      	mov	r2, r0
 80018e0:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 80018e4:	4413      	add	r3, r2
 80018e6:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324

	  					  if(char_to_float(fcst.fcstValue[UUU]) > char_to_float(fcst.fcstValue[VVV]))
 80018ea:	486f      	ldr	r0, [pc, #444]	; (8001aa8 <main+0x908>)
 80018ec:	f000 f952 	bl	8001b94 <char_to_float>
 80018f0:	4604      	mov	r4, r0
 80018f2:	486e      	ldr	r0, [pc, #440]	; (8001aac <main+0x90c>)
 80018f4:	f000 f94e 	bl	8001b94 <char_to_float>
 80018f8:	4603      	mov	r3, r0
 80018fa:	4619      	mov	r1, r3
 80018fc:	4620      	mov	r0, r4
 80018fe:	f7ff fb03 	bl	8000f08 <__aeabi_fcmpgt>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d00f      	beq.n	8001928 <main+0x788>
	  						  i += sprintf(sendView + i, "%s m/s\n", fcst.fcstValue[UUU]);
 8001908:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 800190c:	1d3a      	adds	r2, r7, #4
 800190e:	4413      	add	r3, r2
 8001910:	4a65      	ldr	r2, [pc, #404]	; (8001aa8 <main+0x908>)
 8001912:	4967      	ldr	r1, [pc, #412]	; (8001ab0 <main+0x910>)
 8001914:	4618      	mov	r0, r3
 8001916:	f006 fb7d 	bl	8008014 <siprintf>
 800191a:	4602      	mov	r2, r0
 800191c:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 8001920:	4413      	add	r3, r2
 8001922:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
 8001926:	e00e      	b.n	8001946 <main+0x7a6>
	  					  else
	  						  i += sprintf(sendView + i, "%s m/s\n", fcst.fcstValue[VVV]);
 8001928:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 800192c:	1d3a      	adds	r2, r7, #4
 800192e:	4413      	add	r3, r2
 8001930:	4a5e      	ldr	r2, [pc, #376]	; (8001aac <main+0x90c>)
 8001932:	495f      	ldr	r1, [pc, #380]	; (8001ab0 <main+0x910>)
 8001934:	4618      	mov	r0, r3
 8001936:	f006 fb6d 	bl	8008014 <siprintf>
 800193a:	4602      	mov	r2, r0
 800193c:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 8001940:	4413      	add	r3, r2
 8001942:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324

	  					  i += sprintf(sendView + i, "Precipitation : %s percentage\n", fcst.fcstValue[POP]);
 8001946:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 800194a:	1d3a      	adds	r2, r7, #4
 800194c:	4413      	add	r3, r2
 800194e:	4a59      	ldr	r2, [pc, #356]	; (8001ab4 <main+0x914>)
 8001950:	4959      	ldr	r1, [pc, #356]	; (8001ab8 <main+0x918>)
 8001952:	4618      	mov	r0, r3
 8001954:	f006 fb5e 	bl	8008014 <siprintf>
 8001958:	4602      	mov	r2, r0
 800195a:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 800195e:	4413      	add	r3, r2
 8001960:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
	  					  i += sprintf(sendView + i, "Sky status : ");
 8001964:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 8001968:	1d3a      	adds	r2, r7, #4
 800196a:	4413      	add	r3, r2
 800196c:	4953      	ldr	r1, [pc, #332]	; (8001abc <main+0x91c>)
 800196e:	4618      	mov	r0, r3
 8001970:	f006 fb50 	bl	8008014 <siprintf>
 8001974:	4602      	mov	r2, r0
 8001976:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 800197a:	4413      	add	r3, r2
 800197c:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324

	  					  if(char_to_float(fcst.fcstValue[SKY]) == 1.0)
 8001980:	484f      	ldr	r0, [pc, #316]	; (8001ac0 <main+0x920>)
 8001982:	f000 f907 	bl	8001b94 <char_to_float>
 8001986:	4603      	mov	r3, r0
 8001988:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff fa93 	bl	8000eb8 <__aeabi_fcmpeq>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d00e      	beq.n	80019b6 <main+0x816>
	  						  i += sprintf(sendView + i, "Clear\n");
 8001998:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 800199c:	1d3a      	adds	r2, r7, #4
 800199e:	4413      	add	r3, r2
 80019a0:	4948      	ldr	r1, [pc, #288]	; (8001ac4 <main+0x924>)
 80019a2:	4618      	mov	r0, r3
 80019a4:	f006 fb36 	bl	8008014 <siprintf>
 80019a8:	4602      	mov	r2, r0
 80019aa:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 80019ae:	4413      	add	r3, r2
 80019b0:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
 80019b4:	e024      	b.n	8001a00 <main+0x860>
	  					  else if(char_to_float(fcst.fcstValue[SKY]) == 3.0 || char_to_float(fcst.fcstValue[SKY]) == 4.0)
 80019b6:	4842      	ldr	r0, [pc, #264]	; (8001ac0 <main+0x920>)
 80019b8:	f000 f8ec 	bl	8001b94 <char_to_float>
 80019bc:	4603      	mov	r3, r0
 80019be:	4942      	ldr	r1, [pc, #264]	; (8001ac8 <main+0x928>)
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff fa79 	bl	8000eb8 <__aeabi_fcmpeq>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d10b      	bne.n	80019e4 <main+0x844>
 80019cc:	483c      	ldr	r0, [pc, #240]	; (8001ac0 <main+0x920>)
 80019ce:	f000 f8e1 	bl	8001b94 <char_to_float>
 80019d2:	4603      	mov	r3, r0
 80019d4:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff fa6d 	bl	8000eb8 <__aeabi_fcmpeq>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d00d      	beq.n	8001a00 <main+0x860>
	  						  i += sprintf(sendView + i, "Cloudy\n");
 80019e4:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 80019e8:	1d3a      	adds	r2, r7, #4
 80019ea:	4413      	add	r3, r2
 80019ec:	4937      	ldr	r1, [pc, #220]	; (8001acc <main+0x92c>)
 80019ee:	4618      	mov	r0, r3
 80019f0:	f006 fb10 	bl	8008014 <siprintf>
 80019f4:	4602      	mov	r2, r0
 80019f6:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 80019fa:	4413      	add	r3, r2
 80019fc:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324

	  					  uart3_hal_putchar(sendView, strlen(sendView));
 8001a00:	1d3b      	adds	r3, r7, #4
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7fe fc1a 	bl	800023c <strlen>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	1d3b      	adds	r3, r7, #4
 8001a0e:	4611      	mov	r1, r2
 8001a10:	4618      	mov	r0, r3
 8001a12:	f001 fe8b 	bl	800372c <uart3_hal_putchar>
	  					  is_connected = ROTATE_MOTOR;
 8001a16:	4b2e      	ldr	r3, [pc, #184]	; (8001ad0 <main+0x930>)
 8001a18:	2203      	movs	r2, #3
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	e006      	b.n	8001a2c <main+0x88c>
	  				  }
	  				  else if(cmd_msg.cmd == Select){
 8001a1e:	4b2d      	ldr	r3, [pc, #180]	; (8001ad4 <main+0x934>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	2b03      	cmp	r3, #3
 8001a24:	d102      	bne.n	8001a2c <main+0x88c>
	  					  is_connected = REGISTER_CLOTHES;   // for matching or searching sector
 8001a26:	4b2a      	ldr	r3, [pc, #168]	; (8001ad0 <main+0x930>)
 8001a28:	2205      	movs	r2, #5
 8001a2a:	601a      	str	r2, [r3, #0]
	  				  }
	  			  }
	  			  else {
	  				  // invalid message received
	  			  }
	  			  uart3_hal_rx_buffer_init();   // initialize uart3 receiver for future communication
 8001a2c:	f001 fa3c 	bl	8002ea8 <uart3_hal_rx_buffer_init>
	  		  }
	  		  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, SET);
 8001a30:	2201      	movs	r2, #1
 8001a32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a36:	4828      	ldr	r0, [pc, #160]	; (8001ad8 <main+0x938>)
 8001a38:	f002 fd62 	bl	8004500 <HAL_GPIO_WritePin>
	  		  HAL_Delay(200);
 8001a3c:	20c8      	movs	r0, #200	; 0xc8
 8001a3e:	f002 f957 	bl	8003cf0 <HAL_Delay>
	  		  break;
 8001a42:	e021      	b.n	8001a88 <main+0x8e8>
	  	  case REGISTER_CLOTHES:
	  		  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, RESET);
 8001a44:	2200      	movs	r2, #0
 8001a46:	2140      	movs	r1, #64	; 0x40
 8001a48:	4823      	ldr	r0, [pc, #140]	; (8001ad8 <main+0x938>)
 8001a4a:	f002 fd59 	bl	8004500 <HAL_GPIO_WritePin>
	  		  exists_sector = find_sector(cmd_msg.msg);   // find empty sector only when sector is not matched (should be modified)
 8001a4e:	4b21      	ldr	r3, [pc, #132]	; (8001ad4 <main+0x934>)
 8001a50:	785b      	ldrb	r3, [r3, #1]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f000 fa68 	bl	8001f28 <find_sector>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	f887 3307 	strb.w	r3, [r7, #775]	; 0x307
	  		  if(exists_sector == 0){   // there is no sector related to msg(weather)
 8001a5e:	f897 3307 	ldrb.w	r3, [r7, #775]	; 0x307
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d103      	bne.n	8001a6e <main+0x8ce>
	  			  is_connected = BT_WAITING;   // when the weather is matched for the first time -> no need for motor rotation
 8001a66:	4b1a      	ldr	r3, [pc, #104]	; (8001ad0 <main+0x930>)
 8001a68:	2204      	movs	r2, #4
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	e002      	b.n	8001a74 <main+0x8d4>
	  		  }
	  		  else {   // there is a sector related to msg(weather)
	  			  is_connected = ROTATE_MOTOR;   // when the weather is already matched with sector -> should rotate motor for related sector
 8001a6e:	4b18      	ldr	r3, [pc, #96]	; (8001ad0 <main+0x930>)
 8001a70:	2203      	movs	r2, #3
 8001a72:	601a      	str	r2, [r3, #0]
	  		  }
	  		  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, SET);
 8001a74:	2201      	movs	r2, #1
 8001a76:	2140      	movs	r1, #64	; 0x40
 8001a78:	4817      	ldr	r0, [pc, #92]	; (8001ad8 <main+0x938>)
 8001a7a:	f002 fd41 	bl	8004500 <HAL_GPIO_WritePin>
	  		  HAL_Delay(100);
 8001a7e:	2064      	movs	r0, #100	; 0x64
 8001a80:	f002 f936 	bl	8003cf0 <HAL_Delay>
	  		  break;
 8001a84:	e000      	b.n	8001a88 <main+0x8e8>
	  	  default:
	  		  break;
 8001a86:	bf00      	nop
	  switch(is_connected)
 8001a88:	e458      	b.n	800133c <main+0x19c>
 8001a8a:	bf00      	nop
 8001a8c:	0800a6ec 	.word	0x0800a6ec
 8001a90:	0800a6f0 	.word	0x0800a6f0
 8001a94:	20000464 	.word	0x20000464
 8001a98:	0800a728 	.word	0x0800a728
 8001a9c:	20000455 	.word	0x20000455
 8001aa0:	0800a74c 	.word	0x0800a74c
 8001aa4:	0800a768 	.word	0x0800a768
 8001aa8:	20000473 	.word	0x20000473
 8001aac:	20000478 	.word	0x20000478
 8001ab0:	0800a778 	.word	0x0800a778
 8001ab4:	20000446 	.word	0x20000446
 8001ab8:	0800a780 	.word	0x0800a780
 8001abc:	0800a7a0 	.word	0x0800a7a0
 8001ac0:	2000045f 	.word	0x2000045f
 8001ac4:	0800a7b0 	.word	0x0800a7b0
 8001ac8:	40400000 	.word	0x40400000
 8001acc:	0800a7b8 	.word	0x0800a7b8
 8001ad0:	200002f8 	.word	0x200002f8
 8001ad4:	20000330 	.word	0x20000330
 8001ad8:	40011000 	.word	0x40011000

08001adc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b096      	sub	sp, #88	; 0x58
 8001ae0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ae2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ae6:	2228      	movs	r2, #40	; 0x28
 8001ae8:	2100      	movs	r1, #0
 8001aea:	4618      	mov	r0, r3
 8001aec:	f005 fcd6 	bl	800749c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001af0:	f107 031c 	add.w	r3, r7, #28
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	609a      	str	r2, [r3, #8]
 8001afc:	60da      	str	r2, [r3, #12]
 8001afe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b00:	1d3b      	adds	r3, r7, #4
 8001b02:	2200      	movs	r2, #0
 8001b04:	601a      	str	r2, [r3, #0]
 8001b06:	605a      	str	r2, [r3, #4]
 8001b08:	609a      	str	r2, [r3, #8]
 8001b0a:	60da      	str	r2, [r3, #12]
 8001b0c:	611a      	str	r2, [r3, #16]
 8001b0e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001b10:	2303      	movs	r3, #3
 8001b12:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b18:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b1e:	2310      	movs	r3, #16
 8001b20:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001b22:	2300      	movs	r3, #0
 8001b24:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b26:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f002 fd2e 	bl	800458c <HAL_RCC_OscConfig>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001b36:	f000 f827 	bl	8001b88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b3a:	230f      	movs	r3, #15
 8001b3c:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b42:	2300      	movs	r3, #0
 8001b44:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b46:	2300      	movs	r3, #0
 8001b48:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001b4e:	f107 031c 	add.w	r3, r7, #28
 8001b52:	2100      	movs	r1, #0
 8001b54:	4618      	mov	r0, r3
 8001b56:	f002 ff99 	bl	8004a8c <HAL_RCC_ClockConfig>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001b60:	f000 f812 	bl	8001b88 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001b64:	2301      	movs	r3, #1
 8001b66:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV128;
 8001b68:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b6c:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b6e:	1d3b      	adds	r3, r7, #4
 8001b70:	4618      	mov	r0, r3
 8001b72:	f003 f927 	bl	8004dc4 <HAL_RCCEx_PeriphCLKConfig>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001b7c:	f000 f804 	bl	8001b88 <Error_Handler>
  }
}
 8001b80:	bf00      	nop
 8001b82:	3758      	adds	r7, #88	; 0x58
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b8c:	b672      	cpsid	i
}
 8001b8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b90:	e7fe      	b.n	8001b90 <Error_Handler+0x8>
	...

08001b94 <char_to_float>:
#include "motor_rotation.h"
#include "parsing.h"

/* USER CODE BEGIN 0 */
float char_to_float(char *a)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b088      	sub	sp, #32
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
	float value = 0;
 8001b9c:	f04f 0300 	mov.w	r3, #0
 8001ba0:	61fb      	str	r3, [r7, #28]
	int count_value = 0;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	61bb      	str	r3, [r7, #24]
	int one = 0;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	617b      	str	r3, [r7, #20]
	int ten = 0;
 8001baa:	2300      	movs	r3, #0
 8001bac:	613b      	str	r3, [r7, #16]
	int hundred = 0;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60fb      	str	r3, [r7, #12]

	while(*(a++) != '\0'){ count_value++; }
 8001bb2:	e002      	b.n	8001bba <char_to_float+0x26>
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	61bb      	str	r3, [r7, #24]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	1c5a      	adds	r2, r3, #1
 8001bbe:	607a      	str	r2, [r7, #4]
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d1f6      	bne.n	8001bb4 <char_to_float+0x20>

	if(count_value == 1){
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d10f      	bne.n	8001bec <char_to_float+0x58>
		a--;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	607b      	str	r3, [r7, #4]
		a--;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	3b01      	subs	r3, #1
 8001bd6:	607b      	str	r3, [r7, #4]
	    one = *a - 0x30;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	3b30      	subs	r3, #48	; 0x30
 8001bde:	617b      	str	r3, [r7, #20]
	    value = one;
 8001be0:	6978      	ldr	r0, [r7, #20]
 8001be2:	f7ff f8d1 	bl	8000d88 <__aeabi_i2f>
 8001be6:	4603      	mov	r3, r0
 8001be8:	61fb      	str	r3, [r7, #28]
 8001bea:	e110      	b.n	8001e0e <char_to_float+0x27a>
	}
	else if(count_value == 2){
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d11d      	bne.n	8001c2e <char_to_float+0x9a>
		a--;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	3b01      	subs	r3, #1
 8001bf6:	607b      	str	r3, [r7, #4]
		a--;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	607b      	str	r3, [r7, #4]
		one = *(a--) - 0x30;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	1e5a      	subs	r2, r3, #1
 8001c02:	607a      	str	r2, [r7, #4]
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	3b30      	subs	r3, #48	; 0x30
 8001c08:	617b      	str	r3, [r7, #20]
		ten = *a - 0x30;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	3b30      	subs	r3, #48	; 0x30
 8001c10:	613b      	str	r3, [r7, #16]
		value = ten*10 + one;
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	4613      	mov	r3, r2
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	4413      	add	r3, r2
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	4413      	add	r3, r2
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff f8b0 	bl	8000d88 <__aeabi_i2f>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	61fb      	str	r3, [r7, #28]
 8001c2c:	e0ef      	b.n	8001e0e <char_to_float+0x27a>
	}
	else if(count_value == 3){
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	2b03      	cmp	r3, #3
 8001c32:	d14b      	bne.n	8001ccc <char_to_float+0x138>
    	a--;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	3b01      	subs	r3, #1
 8001c38:	607b      	str	r3, [r7, #4]
    	a--;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	3b01      	subs	r3, #1
 8001c3e:	607b      	str	r3, [r7, #4]
	  	one = *(a--) - 0x30;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	1e5a      	subs	r2, r3, #1
 8001c44:	607a      	str	r2, [r7, #4]
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	3b30      	subs	r3, #48	; 0x30
 8001c4a:	617b      	str	r3, [r7, #20]
	  	if((*a)=='.'){   // 소수일 경우 ex)2.4
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	2b2e      	cmp	r3, #46	; 0x2e
 8001c52:	d11f      	bne.n	8001c94 <char_to_float+0x100>
	  		a--;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	3b01      	subs	r3, #1
 8001c58:	607b      	str	r3, [r7, #4]
	  		ten = *a - 0x30;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	3b30      	subs	r3, #48	; 0x30
 8001c60:	613b      	str	r3, [r7, #16]
	  		value = (ten*10 + one)/10.0;
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	4613      	mov	r3, r2
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	4413      	add	r3, r2
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	4413      	add	r3, r2
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7fe fc3c 	bl	80004f0 <__aeabi_i2d>
 8001c78:	f04f 0200 	mov.w	r2, #0
 8001c7c:	4b66      	ldr	r3, [pc, #408]	; (8001e18 <char_to_float+0x284>)
 8001c7e:	f7fe fdcb 	bl	8000818 <__aeabi_ddiv>
 8001c82:	4602      	mov	r2, r0
 8001c84:	460b      	mov	r3, r1
 8001c86:	4610      	mov	r0, r2
 8001c88:	4619      	mov	r1, r3
 8001c8a:	f7fe ff73 	bl	8000b74 <__aeabi_d2f>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	61fb      	str	r3, [r7, #28]
 8001c92:	e0bc      	b.n	8001e0e <char_to_float+0x27a>
	  	}
	  	else{
	  		ten = *(a--) - 0x30;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	1e5a      	subs	r2, r3, #1
 8001c98:	607a      	str	r2, [r7, #4]
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	3b30      	subs	r3, #48	; 0x30
 8001c9e:	613b      	str	r3, [r7, #16]
	  		hundred = *a - 0x30;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	3b30      	subs	r3, #48	; 0x30
 8001ca6:	60fb      	str	r3, [r7, #12]
	  		value = hundred*100 + ten*10 + one;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2264      	movs	r2, #100	; 0x64
 8001cac:	fb02 f103 	mul.w	r1, r2, r3
 8001cb0:	693a      	ldr	r2, [r7, #16]
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	4413      	add	r3, r2
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	18ca      	adds	r2, r1, r3
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff f861 	bl	8000d88 <__aeabi_i2f>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	61fb      	str	r3, [r7, #28]
 8001cca:	e0a0      	b.n	8001e0e <char_to_float+0x27a>
	  	}
	}
	else if(count_value == 4){
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	2b04      	cmp	r3, #4
 8001cd0:	d159      	bne.n	8001d86 <char_to_float+0x1f2>
	   	a--;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	3b01      	subs	r3, #1
 8001cd6:	607b      	str	r3, [r7, #4]
	   	a--;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	607b      	str	r3, [r7, #4]
	  	one = *(a--) - 0x30;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	1e5a      	subs	r2, r3, #1
 8001ce2:	607a      	str	r2, [r7, #4]
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	3b30      	subs	r3, #48	; 0x30
 8001ce8:	617b      	str	r3, [r7, #20]
	  	if((*a)=='.'){
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	2b2e      	cmp	r3, #46	; 0x2e
 8001cf0:	f040 808d 	bne.w	8001e0e <char_to_float+0x27a>
	  		a--;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	607b      	str	r3, [r7, #4]
	  		ten = *(a--) - 0x30;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	1e5a      	subs	r2, r3, #1
 8001cfe:	607a      	str	r2, [r7, #4]
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	3b30      	subs	r3, #48	; 0x30
 8001d04:	613b      	str	r3, [r7, #16]
	  		if(*a == '-') {   // 음수일 경우 ex)-2.3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	2b2d      	cmp	r3, #45	; 0x2d
 8001d0c:	d11a      	bne.n	8001d44 <char_to_float+0x1b0>
	  			value = ((ten*10 + one)/10.0)*(-1);
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	4613      	mov	r3, r2
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	4413      	add	r3, r2
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	461a      	mov	r2, r3
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7fe fbe6 	bl	80004f0 <__aeabi_i2d>
 8001d24:	f04f 0200 	mov.w	r2, #0
 8001d28:	4b3b      	ldr	r3, [pc, #236]	; (8001e18 <char_to_float+0x284>)
 8001d2a:	f7fe fd75 	bl	8000818 <__aeabi_ddiv>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	460b      	mov	r3, r1
 8001d32:	4610      	mov	r0, r2
 8001d34:	4619      	mov	r1, r3
 8001d36:	f7fe ff1d 	bl	8000b74 <__aeabi_d2f>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001d40:	61fb      	str	r3, [r7, #28]
 8001d42:	e064      	b.n	8001e0e <char_to_float+0x27a>
	  		}
	  		else{   // 소수일 경우 ex)12.3
	  			hundred = *a - 0x30;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	3b30      	subs	r3, #48	; 0x30
 8001d4a:	60fb      	str	r3, [r7, #12]
	  			value = (hundred*100 + ten*10 + one)/10.0;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2264      	movs	r2, #100	; 0x64
 8001d50:	fb02 f103 	mul.w	r1, r2, r3
 8001d54:	693a      	ldr	r2, [r7, #16]
 8001d56:	4613      	mov	r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	4413      	add	r3, r2
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	18ca      	adds	r2, r1, r3
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	4413      	add	r3, r2
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7fe fbc3 	bl	80004f0 <__aeabi_i2d>
 8001d6a:	f04f 0200 	mov.w	r2, #0
 8001d6e:	4b2a      	ldr	r3, [pc, #168]	; (8001e18 <char_to_float+0x284>)
 8001d70:	f7fe fd52 	bl	8000818 <__aeabi_ddiv>
 8001d74:	4602      	mov	r2, r0
 8001d76:	460b      	mov	r3, r1
 8001d78:	4610      	mov	r0, r2
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	f7fe fefa 	bl	8000b74 <__aeabi_d2f>
 8001d80:	4603      	mov	r3, r0
 8001d82:	61fb      	str	r3, [r7, #28]
 8001d84:	e043      	b.n	8001e0e <char_to_float+0x27a>
	  		}
	  	}
	}
	else if(count_value == 5){
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	2b05      	cmp	r3, #5
 8001d8a:	d140      	bne.n	8001e0e <char_to_float+0x27a>
		a--;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	607b      	str	r3, [r7, #4]
		a--;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	3b01      	subs	r3, #1
 8001d96:	607b      	str	r3, [r7, #4]
		one = *(a--) - 0x30;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	1e5a      	subs	r2, r3, #1
 8001d9c:	607a      	str	r2, [r7, #4]
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	3b30      	subs	r3, #48	; 0x30
 8001da2:	617b      	str	r3, [r7, #20]
		if((*a)=='.'){   // 음수일 경우 ex)-14.7
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	2b2e      	cmp	r3, #46	; 0x2e
 8001daa:	d130      	bne.n	8001e0e <char_to_float+0x27a>
		  	a--;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	3b01      	subs	r3, #1
 8001db0:	607b      	str	r3, [r7, #4]
		  	ten = *(a--) - 0x30;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	1e5a      	subs	r2, r3, #1
 8001db6:	607a      	str	r2, [r7, #4]
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	3b30      	subs	r3, #48	; 0x30
 8001dbc:	613b      	str	r3, [r7, #16]
		  	hundred = *(a--) - 0x30;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	1e5a      	subs	r2, r3, #1
 8001dc2:	607a      	str	r2, [r7, #4]
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	3b30      	subs	r3, #48	; 0x30
 8001dc8:	60fb      	str	r3, [r7, #12]
		  	if(*a == '-') {
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	2b2d      	cmp	r3, #45	; 0x2d
 8001dd0:	d11d      	bne.n	8001e0e <char_to_float+0x27a>
		  		value = ((hundred*100 + ten*10 + one)/10.0)*(-1);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2264      	movs	r2, #100	; 0x64
 8001dd6:	fb02 f103 	mul.w	r1, r2, r3
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	4413      	add	r3, r2
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	18ca      	adds	r2, r1, r3
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	4413      	add	r3, r2
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7fe fb80 	bl	80004f0 <__aeabi_i2d>
 8001df0:	f04f 0200 	mov.w	r2, #0
 8001df4:	4b08      	ldr	r3, [pc, #32]	; (8001e18 <char_to_float+0x284>)
 8001df6:	f7fe fd0f 	bl	8000818 <__aeabi_ddiv>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	4610      	mov	r0, r2
 8001e00:	4619      	mov	r1, r3
 8001e02:	f7fe feb7 	bl	8000b74 <__aeabi_d2f>
 8001e06:	4603      	mov	r3, r0
 8001e08:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001e0c:	61fb      	str	r3, [r7, #28]
		  	}
		}
	}

	return value;
 8001e0e:	69fb      	ldr	r3, [r7, #28]
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3720      	adds	r7, #32
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	40240000 	.word	0x40240000

08001e1c <analyze_weather>:

int analyze_weather(float temperature, float wind_speed, float humidity, float rain_prob, float sky)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	607a      	str	r2, [r7, #4]
 8001e28:	603b      	str	r3, [r7, #0]
	if(temperature > 18.0){
 8001e2a:	493a      	ldr	r1, [pc, #232]	; (8001f14 <analyze_weather+0xf8>)
 8001e2c:	68f8      	ldr	r0, [r7, #12]
 8001e2e:	f7ff f86b 	bl	8000f08 <__aeabi_fcmpgt>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d02a      	beq.n	8001e8e <analyze_weather+0x72>
		if(humidity > 60.0)
 8001e38:	4937      	ldr	r1, [pc, #220]	; (8001f18 <analyze_weather+0xfc>)
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f7ff f864 	bl	8000f08 <__aeabi_fcmpgt>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <analyze_weather+0x2e>
			return HOT_HUMID;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e060      	b.n	8001f0c <analyze_weather+0xf0>
		else if(humidity < 40.0)
 8001e4a:	4934      	ldr	r1, [pc, #208]	; (8001f1c <analyze_weather+0x100>)
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f7ff f83d 	bl	8000ecc <__aeabi_fcmplt>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <analyze_weather+0x40>
			return HOT;
 8001e58:	2302      	movs	r3, #2
 8001e5a:	e057      	b.n	8001f0c <analyze_weather+0xf0>
		else if(humidity >= 40.0 && humidity <= 60.0) {
 8001e5c:	492f      	ldr	r1, [pc, #188]	; (8001f1c <analyze_weather+0x100>)
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f7ff f848 	bl	8000ef4 <__aeabi_fcmpge>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d04e      	beq.n	8001f08 <analyze_weather+0xec>
 8001e6a:	492b      	ldr	r1, [pc, #172]	; (8001f18 <analyze_weather+0xfc>)
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f7ff f837 	bl	8000ee0 <__aeabi_fcmple>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d047      	beq.n	8001f08 <analyze_weather+0xec>
			if(rain_prob > 50.0)
 8001e78:	4929      	ldr	r1, [pc, #164]	; (8001f20 <analyze_weather+0x104>)
 8001e7a:	6838      	ldr	r0, [r7, #0]
 8001e7c:	f7ff f844 	bl	8000f08 <__aeabi_fcmpgt>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <analyze_weather+0x6e>
				return HOT_HUMID;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e040      	b.n	8001f0c <analyze_weather+0xf0>
			else
				return HOT;
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	e03e      	b.n	8001f0c <analyze_weather+0xf0>
		}
	}
	else{
		if(wind_speed > 3.0)
 8001e8e:	4925      	ldr	r1, [pc, #148]	; (8001f24 <analyze_weather+0x108>)
 8001e90:	68b8      	ldr	r0, [r7, #8]
 8001e92:	f7ff f839 	bl	8000f08 <__aeabi_fcmpgt>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <analyze_weather+0x84>
			return CHILLY;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e035      	b.n	8001f0c <analyze_weather+0xf0>
		else if(wind_speed < 1.0)
 8001ea0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001ea4:	68b8      	ldr	r0, [r7, #8]
 8001ea6:	f7ff f811 	bl	8000ecc <__aeabi_fcmplt>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <analyze_weather+0x98>
			return SUNNY;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	e02b      	b.n	8001f0c <analyze_weather+0xf0>
		else if(wind_speed >= 1.0 && wind_speed <= 3.0) {
 8001eb4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001eb8:	68b8      	ldr	r0, [r7, #8]
 8001eba:	f7ff f81b 	bl	8000ef4 <__aeabi_fcmpge>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d021      	beq.n	8001f08 <analyze_weather+0xec>
 8001ec4:	4917      	ldr	r1, [pc, #92]	; (8001f24 <analyze_weather+0x108>)
 8001ec6:	68b8      	ldr	r0, [r7, #8]
 8001ec8:	f7ff f80a 	bl	8000ee0 <__aeabi_fcmple>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d01a      	beq.n	8001f08 <analyze_weather+0xec>
			if(sky == 3.0 || sky == 4.0)
 8001ed2:	4914      	ldr	r1, [pc, #80]	; (8001f24 <analyze_weather+0x108>)
 8001ed4:	69b8      	ldr	r0, [r7, #24]
 8001ed6:	f7fe ffef 	bl	8000eb8 <__aeabi_fcmpeq>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d107      	bne.n	8001ef0 <analyze_weather+0xd4>
 8001ee0:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001ee4:	69b8      	ldr	r0, [r7, #24]
 8001ee6:	f7fe ffe7 	bl	8000eb8 <__aeabi_fcmpeq>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <analyze_weather+0xd8>
				return CHILLY;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e00b      	b.n	8001f0c <analyze_weather+0xf0>
			else if(sky == 1.0)
 8001ef4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001ef8:	69b8      	ldr	r0, [r7, #24]
 8001efa:	f7fe ffdd 	bl	8000eb8 <__aeabi_fcmpeq>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <analyze_weather+0xec>
				return SUNNY;
 8001f04:	2300      	movs	r3, #0
 8001f06:	e001      	b.n	8001f0c <analyze_weather+0xf0>
		}
	}

	return NO_RELATED_DATA;
 8001f08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3710      	adds	r7, #16
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	41900000 	.word	0x41900000
 8001f18:	42700000 	.word	0x42700000
 8001f1c:	42200000 	.word	0x42200000
 8001f20:	42480000 	.word	0x42480000
 8001f24:	40400000 	.word	0x40400000

08001f28 <find_sector>:

char find_sector(char msg)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	4603      	mov	r3, r0
 8001f30:	71fb      	strb	r3, [r7, #7]
	int i;
	for(i=0; i<4; i++) {
 8001f32:	2300      	movs	r3, #0
 8001f34:	60fb      	str	r3, [r7, #12]
 8001f36:	e00c      	b.n	8001f52 <find_sector+0x2a>
		if(sector[i].matched_weather == msg)
 8001f38:	4a1f      	ldr	r2, [pc, #124]	; (8001fb8 <find_sector+0x90>)
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	4413      	add	r3, r2
 8001f40:	785b      	ldrb	r3, [r3, #1]
 8001f42:	79fa      	ldrb	r2, [r7, #7]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d101      	bne.n	8001f4c <find_sector+0x24>
			return 1;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e030      	b.n	8001fae <find_sector+0x86>
	for(i=0; i<4; i++) {
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	3301      	adds	r3, #1
 8001f50:	60fb      	str	r3, [r7, #12]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2b03      	cmp	r3, #3
 8001f56:	ddef      	ble.n	8001f38 <find_sector+0x10>
	}
	for(int i=0; i<4; i++) {
 8001f58:	2300      	movs	r3, #0
 8001f5a:	60bb      	str	r3, [r7, #8]
 8001f5c:	e024      	b.n	8001fa8 <find_sector+0x80>
		if(sector[i].is_matched == 0) {
 8001f5e:	4a16      	ldr	r2, [pc, #88]	; (8001fb8 <find_sector+0x90>)
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d11b      	bne.n	8001fa2 <find_sector+0x7a>
			switch(i)
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	2b03      	cmp	r3, #3
 8001f6e:	d013      	beq.n	8001f98 <find_sector+0x70>
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	2b03      	cmp	r3, #3
 8001f74:	dc13      	bgt.n	8001f9e <find_sector+0x76>
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d007      	beq.n	8001f8c <find_sector+0x64>
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	db0d      	blt.n	8001f9e <find_sector+0x76>
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	3b01      	subs	r3, #1
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d809      	bhi.n	8001f9e <find_sector+0x76>
 8001f8a:	e002      	b.n	8001f92 <find_sector+0x6a>
			{
				case Sector1:
//					TIM2 -> CCR1 = PWM_SECTOR1;
					PWM_SECTOR1();
 8001f8c:	f000 f816 	bl	8001fbc <PWM_SECTOR1>
					break;
 8001f90:	e005      	b.n	8001f9e <find_sector+0x76>
				case Sector2:
				case Sector3:
//					TIM2 -> CCR1 = PWM_SECTOR2;
					PWM_SECTOR2();
 8001f92:	f000 f828 	bl	8001fe6 <PWM_SECTOR2>
					break;
 8001f96:	e002      	b.n	8001f9e <find_sector+0x76>
				case Sector4:
//	  				TIM2 -> CCR1 = PWM_SECTOR4;
					PWM_SECTOR4();
 8001f98:	f000 f84d 	bl	8002036 <PWM_SECTOR4>
					break;
 8001f9c:	bf00      	nop
	  		}
			return 0;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	e005      	b.n	8001fae <find_sector+0x86>
	for(int i=0; i<4; i++) {
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	60bb      	str	r3, [r7, #8]
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	2b03      	cmp	r3, #3
 8001fac:	ddd7      	ble.n	8001f5e <find_sector+0x36>
	  	}
	}
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	20000334 	.word	0x20000334

08001fbc <PWM_SECTOR1>:

void PWM_SECTOR1(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
	while(TIM2->CCR1 != PWM_350){
 8001fc0:	e007      	b.n	8001fd2 <PWM_SECTOR1+0x16>
		TIM2->CCR1--;
 8001fc2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001fc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fc8:	3a01      	subs	r2, #1
 8001fca:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_Delay(1);
 8001fcc:	2001      	movs	r0, #1
 8001fce:	f001 fe8f 	bl	8003cf0 <HAL_Delay>
	while(TIM2->CCR1 != PWM_350){
 8001fd2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fd8:	f240 125d 	movw	r2, #349	; 0x15d
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d1f0      	bne.n	8001fc2 <PWM_SECTOR1+0x6>
	}
}
 8001fe0:	bf00      	nop
 8001fe2:	bf00      	nop
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <PWM_SECTOR2>:

void PWM_SECTOR2(void)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	af00      	add	r7, sp, #0
	while(TIM2->CCR1 != PWM_750){
 8001fea:	e01a      	b.n	8002022 <PWM_SECTOR2+0x3c>
		if(TIM2->CCR1 > PWM_750)
 8001fec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ff2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001ff6:	d305      	bcc.n	8002004 <PWM_SECTOR2+0x1e>
			TIM2->CCR1--;
 8001ff8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ffc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ffe:	3a01      	subs	r2, #1
 8002000:	635a      	str	r2, [r3, #52]	; 0x34
 8002002:	e00b      	b.n	800201c <PWM_SECTOR2+0x36>
		else if(TIM2->CCR1 < PWM_750)
 8002004:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800200a:	f240 321e 	movw	r2, #798	; 0x31e
 800200e:	4293      	cmp	r3, r2
 8002010:	d804      	bhi.n	800201c <PWM_SECTOR2+0x36>
			TIM2->CCR1++;
 8002012:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002016:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002018:	3201      	adds	r2, #1
 800201a:	635a      	str	r2, [r3, #52]	; 0x34

		HAL_Delay(1);
 800201c:	2001      	movs	r0, #1
 800201e:	f001 fe67 	bl	8003cf0 <HAL_Delay>
	while(TIM2->CCR1 != PWM_750){
 8002022:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002028:	f240 321f 	movw	r2, #799	; 0x31f
 800202c:	4293      	cmp	r3, r2
 800202e:	d1dd      	bne.n	8001fec <PWM_SECTOR2+0x6>
	}
}
 8002030:	bf00      	nop
 8002032:	bf00      	nop
 8002034:	bd80      	pop	{r7, pc}

08002036 <PWM_SECTOR4>:

void PWM_SECTOR4(void)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	af00      	add	r7, sp, #0
	while(TIM2->CCR1 != PWM_1200){
 800203a:	e007      	b.n	800204c <PWM_SECTOR4+0x16>
		TIM2->CCR1++;
 800203c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002040:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002042:	3201      	adds	r2, #1
 8002044:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_Delay(1);
 8002046:	2001      	movs	r0, #1
 8002048:	f001 fe52 	bl	8003cf0 <HAL_Delay>
	while(TIM2->CCR1 != PWM_1200){
 800204c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002052:	f240 42af 	movw	r2, #1199	; 0x4af
 8002056:	4293      	cmp	r3, r2
 8002058:	d1f0      	bne.n	800203c <PWM_SECTOR4+0x6>
	}
}
 800205a:	bf00      	nop
 800205c:	bf00      	nop
 800205e:	bd80      	pop	{r7, pc}

08002060 <Data_parse1>:
fcstinfo fcst;
store cmd_msg;
sectorMatch sector[4];

void Data_parse1(char* temp)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	f5ad 6dbe 	sub.w	sp, sp, #1520	; 0x5f0
 8002066:	af00      	add	r7, sp, #0
 8002068:	1d3b      	adds	r3, r7, #4
 800206a:	6018      	str	r0, [r3, #0]
	init_Data_parse(&fcst);
 800206c:	482f      	ldr	r0, [pc, #188]	; (800212c <Data_parse1+0xcc>)
 800206e:	f000 faab 	bl	80025c8 <init_Data_parse>
	int count = 0;
 8002072:	2300      	movs	r3, #0
 8002074:	f8c7 35ec 	str.w	r3, [r7, #1516]	; 0x5ec
	char buff;
	int bracket = 0;
 8002078:	2300      	movs	r3, #0
 800207a:	f8c7 35e8 	str.w	r3, [r7, #1512]	; 0x5e8
	char arr_data[1500] = { 0 };
 800207e:	f107 0308 	add.w	r3, r7, #8
 8002082:	2200      	movs	r2, #0
 8002084:	601a      	str	r2, [r3, #0]
 8002086:	3304      	adds	r3, #4
 8002088:	f44f 62bb 	mov.w	r2, #1496	; 0x5d8
 800208c:	2100      	movs	r1, #0
 800208e:	4618      	mov	r0, r3
 8002090:	f005 fa04 	bl	800749c <memset>

	while ((buff = *(temp++)) != '\0') {
 8002094:	e034      	b.n	8002100 <Data_parse1+0xa0>
		if (buff == '{') bracket++;
 8002096:	f897 35e7 	ldrb.w	r3, [r7, #1511]	; 0x5e7
 800209a:	2b7b      	cmp	r3, #123	; 0x7b
 800209c:	d105      	bne.n	80020aa <Data_parse1+0x4a>
 800209e:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	; 0x5e8
 80020a2:	3301      	adds	r3, #1
 80020a4:	f8c7 35e8 	str.w	r3, [r7, #1512]	; 0x5e8
 80020a8:	e01c      	b.n	80020e4 <Data_parse1+0x84>
		else if (buff == '[') bracket++;
 80020aa:	f897 35e7 	ldrb.w	r3, [r7, #1511]	; 0x5e7
 80020ae:	2b5b      	cmp	r3, #91	; 0x5b
 80020b0:	d105      	bne.n	80020be <Data_parse1+0x5e>
 80020b2:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	; 0x5e8
 80020b6:	3301      	adds	r3, #1
 80020b8:	f8c7 35e8 	str.w	r3, [r7, #1512]	; 0x5e8
 80020bc:	e012      	b.n	80020e4 <Data_parse1+0x84>
		else if (buff == '}') bracket--;
 80020be:	f897 35e7 	ldrb.w	r3, [r7, #1511]	; 0x5e7
 80020c2:	2b7d      	cmp	r3, #125	; 0x7d
 80020c4:	d105      	bne.n	80020d2 <Data_parse1+0x72>
 80020c6:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	; 0x5e8
 80020ca:	3b01      	subs	r3, #1
 80020cc:	f8c7 35e8 	str.w	r3, [r7, #1512]	; 0x5e8
 80020d0:	e008      	b.n	80020e4 <Data_parse1+0x84>
		else if (buff == ']') bracket--;
 80020d2:	f897 35e7 	ldrb.w	r3, [r7, #1511]	; 0x5e7
 80020d6:	2b5d      	cmp	r3, #93	; 0x5d
 80020d8:	d104      	bne.n	80020e4 <Data_parse1+0x84>
 80020da:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	; 0x5e8
 80020de:	3b01      	subs	r3, #1
 80020e0:	f8c7 35e8 	str.w	r3, [r7, #1512]	; 0x5e8

		if (bracket == 6)
 80020e4:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	; 0x5e8
 80020e8:	2b06      	cmp	r3, #6
 80020ea:	d109      	bne.n	8002100 <Data_parse1+0xa0>
			arr_data[count++] = buff;
 80020ec:	f8d7 35ec 	ldr.w	r3, [r7, #1516]	; 0x5ec
 80020f0:	1c5a      	adds	r2, r3, #1
 80020f2:	f8c7 25ec 	str.w	r2, [r7, #1516]	; 0x5ec
 80020f6:	f107 0208 	add.w	r2, r7, #8
 80020fa:	f897 15e7 	ldrb.w	r1, [r7, #1511]	; 0x5e7
 80020fe:	54d1      	strb	r1, [r2, r3]
	while ((buff = *(temp++)) != '\0') {
 8002100:	1d3b      	adds	r3, r7, #4
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	1d3a      	adds	r2, r7, #4
 8002106:	1c59      	adds	r1, r3, #1
 8002108:	6011      	str	r1, [r2, #0]
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	f887 35e7 	strb.w	r3, [r7, #1511]	; 0x5e7
 8002110:	f897 35e7 	ldrb.w	r3, [r7, #1511]	; 0x5e7
 8002114:	2b00      	cmp	r3, #0
 8002116:	d1be      	bne.n	8002096 <Data_parse1+0x36>
	}
	Data_parse2(arr_data);
 8002118:	f107 0308 	add.w	r3, r7, #8
 800211c:	4618      	mov	r0, r3
 800211e:	f000 f807 	bl	8002130 <Data_parse2>
}
 8002122:	bf00      	nop
 8002124:	f507 67be 	add.w	r7, r7, #1520	; 0x5f0
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	2000033c 	.word	0x2000033c

08002130 <Data_parse2>:

void Data_parse2(char* temp)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	f5ad 6dbf 	sub.w	sp, sp, #1528	; 0x5f8
 8002136:	af00      	add	r7, sp, #0
 8002138:	1d3b      	adds	r3, r7, #4
 800213a:	6018      	str	r0, [r3, #0]
	int i = 0;
 800213c:	2300      	movs	r3, #0
 800213e:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
	char buff;
	char arr_data[10][150] = { 0 };
 8002142:	f107 030c 	add.w	r3, r7, #12
 8002146:	4618      	mov	r0, r3
 8002148:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800214c:	461a      	mov	r2, r3
 800214e:	2100      	movs	r1, #0
 8002150:	f005 f9a4 	bl	800749c <memset>
	int row = -1;
 8002154:	f04f 33ff 	mov.w	r3, #4294967295
 8002158:	f8c7 35f0 	str.w	r3, [r7, #1520]	; 0x5f0
	int count = 0;
 800215c:	2300      	movs	r3, #0
 800215e:	f8c7 35ec 	str.w	r3, [r7, #1516]	; 0x5ec

	while ((buff = temp[i++]) != '\0') {
 8002162:	e01c      	b.n	800219e <Data_parse2+0x6e>
		if (buff == '{') {
 8002164:	f897 35eb 	ldrb.w	r3, [r7, #1515]	; 0x5eb
 8002168:	2b7b      	cmp	r3, #123	; 0x7b
 800216a:	d107      	bne.n	800217c <Data_parse2+0x4c>
			count = 0;
 800216c:	2300      	movs	r3, #0
 800216e:	f8c7 35ec 	str.w	r3, [r7, #1516]	; 0x5ec
			row++;
 8002172:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 8002176:	3301      	adds	r3, #1
 8002178:	f8c7 35f0 	str.w	r3, [r7, #1520]	; 0x5f0
		}
		arr_data[row][count++] = buff;
 800217c:	f8d7 35ec 	ldr.w	r3, [r7, #1516]	; 0x5ec
 8002180:	1c5a      	adds	r2, r3, #1
 8002182:	f8c7 25ec 	str.w	r2, [r7, #1516]	; 0x5ec
 8002186:	f107 010c 	add.w	r1, r7, #12
 800218a:	f8d7 25f0 	ldr.w	r2, [r7, #1520]	; 0x5f0
 800218e:	2096      	movs	r0, #150	; 0x96
 8002190:	fb00 f202 	mul.w	r2, r0, r2
 8002194:	440a      	add	r2, r1
 8002196:	4413      	add	r3, r2
 8002198:	f897 25eb 	ldrb.w	r2, [r7, #1515]	; 0x5eb
 800219c:	701a      	strb	r2, [r3, #0]
	while ((buff = temp[i++]) != '\0') {
 800219e:	f8d7 35f4 	ldr.w	r3, [r7, #1524]	; 0x5f4
 80021a2:	1c5a      	adds	r2, r3, #1
 80021a4:	f8c7 25f4 	str.w	r2, [r7, #1524]	; 0x5f4
 80021a8:	461a      	mov	r2, r3
 80021aa:	1d3b      	adds	r3, r7, #4
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4413      	add	r3, r2
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	f887 35eb 	strb.w	r3, [r7, #1515]	; 0x5eb
 80021b6:	f897 35eb 	ldrb.w	r3, [r7, #1515]	; 0x5eb
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1d2      	bne.n	8002164 <Data_parse2+0x34>
	}
	for (i = 0; i < 10; i++)
 80021be:	2300      	movs	r3, #0
 80021c0:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
 80021c4:	e00f      	b.n	80021e6 <Data_parse2+0xb6>
		Data_parse3(arr_data[i]);
 80021c6:	f107 020c 	add.w	r2, r7, #12
 80021ca:	f8d7 35f4 	ldr.w	r3, [r7, #1524]	; 0x5f4
 80021ce:	2196      	movs	r1, #150	; 0x96
 80021d0:	fb01 f303 	mul.w	r3, r1, r3
 80021d4:	4413      	add	r3, r2
 80021d6:	4618      	mov	r0, r3
 80021d8:	f000 f80f 	bl	80021fa <Data_parse3>
	for (i = 0; i < 10; i++)
 80021dc:	f8d7 35f4 	ldr.w	r3, [r7, #1524]	; 0x5f4
 80021e0:	3301      	adds	r3, #1
 80021e2:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
 80021e6:	f8d7 35f4 	ldr.w	r3, [r7, #1524]	; 0x5f4
 80021ea:	2b09      	cmp	r3, #9
 80021ec:	ddeb      	ble.n	80021c6 <Data_parse2+0x96>

//	for (i = 0; i < 14; i++) {
//		printf("category : %s  fcstDate : %s  fcstTime : %s  fcstValue : %s\n",
//			fcst.category[i], fcst.fcstDate[i], fcst.fcstTime[i], fcst.fcstValue[i]);
//	}      erased 21/06/21 07:50
}
 80021ee:	bf00      	nop
 80021f0:	bf00      	nop
 80021f2:	f507 67bf 	add.w	r7, r7, #1528	; 0x5f8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <Data_parse3>:

void Data_parse3(char* temp)
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b08c      	sub	sp, #48	; 0x30
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
	int i = 0;
 8002202:	2300      	movs	r3, #0
 8002204:	62fb      	str	r3, [r7, #44]	; 0x2c
	char buff;
	int comma = 0;
 8002206:	2300      	movs	r3, #0
 8002208:	62bb      	str	r3, [r7, #40]	; 0x28
	int save_start = 0;
 800220a:	2300      	movs	r3, #0
 800220c:	627b      	str	r3, [r7, #36]	; 0x24
	char row_data[11] = { 0 };
 800220e:	2300      	movs	r3, #0
 8002210:	60fb      	str	r3, [r7, #12]
 8002212:	f107 0310 	add.w	r3, r7, #16
 8002216:	2200      	movs	r2, #0
 8002218:	601a      	str	r2, [r3, #0]
 800221a:	f8c3 2003 	str.w	r2, [r3, #3]
	int count = 0;
 800221e:	2300      	movs	r3, #0
 8002220:	623b      	str	r3, [r7, #32]
	int item = 0;
 8002222:	2300      	movs	r3, #0
 8002224:	61fb      	str	r3, [r7, #28]
	int category = 0;
 8002226:	2300      	movs	r3, #0
 8002228:	61bb      	str	r3, [r7, #24]
	while ((buff = temp[i]) != '\0') {
 800222a:	e04e      	b.n	80022ca <Data_parse3+0xd0>
		if (comma < 2) {
 800222c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800222e:	2b01      	cmp	r3, #1
 8002230:	dc09      	bgt.n	8002246 <Data_parse3+0x4c>
			i++;
 8002232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002234:	3301      	adds	r3, #1
 8002236:	62fb      	str	r3, [r7, #44]	; 0x2c
			if (buff == ',') {
 8002238:	7dfb      	ldrb	r3, [r7, #23]
 800223a:	2b2c      	cmp	r3, #44	; 0x2c
 800223c:	d145      	bne.n	80022ca <Data_parse3+0xd0>
				comma++;
 800223e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002240:	3301      	adds	r3, #1
 8002242:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 8002244:	e041      	b.n	80022ca <Data_parse3+0xd0>
			}
		}
		else {
			if (buff == '"') {
 8002246:	7dfb      	ldrb	r3, [r7, #23]
 8002248:	2b22      	cmp	r3, #34	; 0x22
 800224a:	d12c      	bne.n	80022a6 <Data_parse3+0xac>
				if (save_start == 0)
 800224c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224e:	2b00      	cmp	r3, #0
 8002250:	d102      	bne.n	8002258 <Data_parse3+0x5e>
					save_start = 1;
 8002252:	2301      	movs	r3, #1
 8002254:	627b      	str	r3, [r7, #36]	; 0x24
 8002256:	e023      	b.n	80022a0 <Data_parse3+0xa6>
				else {
					save_start = 0;
 8002258:	2300      	movs	r3, #0
 800225a:	627b      	str	r3, [r7, #36]	; 0x24
					if (item != 0) {
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d00f      	beq.n	8002282 <Data_parse3+0x88>
						if (item == CATEGORY)
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d105      	bne.n	8002274 <Data_parse3+0x7a>
							category = check_category(row_data);
 8002268:	f107 030c 	add.w	r3, r7, #12
 800226c:	4618      	mov	r0, r3
 800226e:	f000 f8bd 	bl	80023ec <check_category>
 8002272:	61b8      	str	r0, [r7, #24]
						Data_parse4(row_data, category, item);
 8002274:	f107 030c 	add.w	r3, r7, #12
 8002278:	69fa      	ldr	r2, [r7, #28]
 800227a:	69b9      	ldr	r1, [r7, #24]
 800227c:	4618      	mov	r0, r3
 800227e:	f000 f831 	bl	80022e4 <Data_parse4>
					}
					item = check_item(row_data);
 8002282:	f107 030c 	add.w	r3, r7, #12
 8002286:	4618      	mov	r0, r3
 8002288:	f000 f952 	bl	8002530 <check_item>
 800228c:	61f8      	str	r0, [r7, #28]
					memset(row_data, 0, sizeof(row_data));
 800228e:	f107 030c 	add.w	r3, r7, #12
 8002292:	220b      	movs	r2, #11
 8002294:	2100      	movs	r1, #0
 8002296:	4618      	mov	r0, r3
 8002298:	f005 f900 	bl	800749c <memset>
					count = 0;
 800229c:	2300      	movs	r3, #0
 800229e:	623b      	str	r3, [r7, #32]
				}
				i++;
 80022a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022a2:	3301      	adds	r3, #1
 80022a4:	62fb      	str	r3, [r7, #44]	; 0x2c
			}
			if (save_start == 1)
 80022a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d10b      	bne.n	80022c4 <Data_parse3+0xca>
				row_data[count++] = temp[i];
 80022ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	441a      	add	r2, r3
 80022b2:	6a3b      	ldr	r3, [r7, #32]
 80022b4:	1c59      	adds	r1, r3, #1
 80022b6:	6239      	str	r1, [r7, #32]
 80022b8:	7812      	ldrb	r2, [r2, #0]
 80022ba:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80022be:	440b      	add	r3, r1
 80022c0:	f803 2c24 	strb.w	r2, [r3, #-36]

			i++;
 80022c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022c6:	3301      	adds	r3, #1
 80022c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	while ((buff = temp[i]) != '\0') {
 80022ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	4413      	add	r3, r2
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	75fb      	strb	r3, [r7, #23]
 80022d4:	7dfb      	ldrb	r3, [r7, #23]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d1a8      	bne.n	800222c <Data_parse3+0x32>
		}
	}
}
 80022da:	bf00      	nop
 80022dc:	bf00      	nop
 80022de:	3730      	adds	r7, #48	; 0x30
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <Data_parse4>:

void Data_parse4(char* temp, int cat, int item)
{
 80022e4:	b590      	push	{r4, r7, lr}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]
	if (item == CATEGORY && fcst.category[cat][0] == 0)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d113      	bne.n	800231e <Data_parse4+0x3a>
 80022f6:	4a3c      	ldr	r2, [pc, #240]	; (80023e8 <Data_parse4+0x104>)
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d10d      	bne.n	800231e <Data_parse4+0x3a>
		memcpy(fcst.category[cat], temp, strlen(temp));
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	4a38      	ldr	r2, [pc, #224]	; (80023e8 <Data_parse4+0x104>)
 8002308:	189c      	adds	r4, r3, r2
 800230a:	68f8      	ldr	r0, [r7, #12]
 800230c:	f7fd ff96 	bl	800023c <strlen>
 8002310:	4603      	mov	r3, r0
 8002312:	461a      	mov	r2, r3
 8002314:	68f9      	ldr	r1, [r7, #12]
 8002316:	4620      	mov	r0, r4
 8002318:	f005 f8b2 	bl	8007480 <memcpy>
 800231c:	e05f      	b.n	80023de <Data_parse4+0xfa>
	else if (item == FCSTDATE && fcst.fcstDate[cat][0] == 0)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2b02      	cmp	r3, #2
 8002322:	d11a      	bne.n	800235a <Data_parse4+0x76>
 8002324:	4930      	ldr	r1, [pc, #192]	; (80023e8 <Data_parse4+0x104>)
 8002326:	68ba      	ldr	r2, [r7, #8]
 8002328:	4613      	mov	r3, r2
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	4413      	add	r3, r2
 800232e:	440b      	add	r3, r1
 8002330:	3338      	adds	r3, #56	; 0x38
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d110      	bne.n	800235a <Data_parse4+0x76>
		memcpy(fcst.fcstDate[cat], temp, strlen(temp));
 8002338:	68ba      	ldr	r2, [r7, #8]
 800233a:	4613      	mov	r3, r2
 800233c:	00db      	lsls	r3, r3, #3
 800233e:	4413      	add	r3, r2
 8002340:	3338      	adds	r3, #56	; 0x38
 8002342:	4a29      	ldr	r2, [pc, #164]	; (80023e8 <Data_parse4+0x104>)
 8002344:	189c      	adds	r4, r3, r2
 8002346:	68f8      	ldr	r0, [r7, #12]
 8002348:	f7fd ff78 	bl	800023c <strlen>
 800234c:	4603      	mov	r3, r0
 800234e:	461a      	mov	r2, r3
 8002350:	68f9      	ldr	r1, [r7, #12]
 8002352:	4620      	mov	r0, r4
 8002354:	f005 f894 	bl	8007480 <memcpy>
 8002358:	e041      	b.n	80023de <Data_parse4+0xfa>
	else if (item == FCSTTIME && fcst.fcstTime[cat][0] == 0)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2b03      	cmp	r3, #3
 800235e:	d11d      	bne.n	800239c <Data_parse4+0xb8>
 8002360:	4921      	ldr	r1, [pc, #132]	; (80023e8 <Data_parse4+0x104>)
 8002362:	68ba      	ldr	r2, [r7, #8]
 8002364:	4613      	mov	r3, r2
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	4413      	add	r3, r2
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	440b      	add	r3, r1
 800236e:	33b6      	adds	r3, #182	; 0xb6
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d112      	bne.n	800239c <Data_parse4+0xb8>
		memcpy(fcst.fcstTime[cat], temp, strlen(temp));
 8002376:	68ba      	ldr	r2, [r7, #8]
 8002378:	4613      	mov	r3, r2
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	4413      	add	r3, r2
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	33b0      	adds	r3, #176	; 0xb0
 8002382:	4a19      	ldr	r2, [pc, #100]	; (80023e8 <Data_parse4+0x104>)
 8002384:	4413      	add	r3, r2
 8002386:	1d9c      	adds	r4, r3, #6
 8002388:	68f8      	ldr	r0, [r7, #12]
 800238a:	f7fd ff57 	bl	800023c <strlen>
 800238e:	4603      	mov	r3, r0
 8002390:	461a      	mov	r2, r3
 8002392:	68f9      	ldr	r1, [r7, #12]
 8002394:	4620      	mov	r0, r4
 8002396:	f005 f873 	bl	8007480 <memcpy>
 800239a:	e020      	b.n	80023de <Data_parse4+0xfa>
	else if (item == FCSTVALUE && fcst.fcstValue[cat][0] == 0)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2b04      	cmp	r3, #4
 80023a0:	d11d      	bne.n	80023de <Data_parse4+0xfa>
 80023a2:	4911      	ldr	r1, [pc, #68]	; (80023e8 <Data_parse4+0x104>)
 80023a4:	68ba      	ldr	r2, [r7, #8]
 80023a6:	4613      	mov	r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	4413      	add	r3, r2
 80023ac:	440b      	add	r3, r1
 80023ae:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d112      	bne.n	80023de <Data_parse4+0xfa>
		memcpy(fcst.fcstValue[cat], temp, strlen(temp));
 80023b8:	68ba      	ldr	r2, [r7, #8]
 80023ba:	4613      	mov	r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	4413      	add	r3, r2
 80023c0:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80023c4:	4a08      	ldr	r2, [pc, #32]	; (80023e8 <Data_parse4+0x104>)
 80023c6:	4413      	add	r3, r2
 80023c8:	1c9c      	adds	r4, r3, #2
 80023ca:	68f8      	ldr	r0, [r7, #12]
 80023cc:	f7fd ff36 	bl	800023c <strlen>
 80023d0:	4603      	mov	r3, r0
 80023d2:	461a      	mov	r2, r3
 80023d4:	68f9      	ldr	r1, [r7, #12]
 80023d6:	4620      	mov	r0, r4
 80023d8:	f005 f852 	bl	8007480 <memcpy>
}
 80023dc:	e7ff      	b.n	80023de <Data_parse4+0xfa>
 80023de:	bf00      	nop
 80023e0:	3714      	adds	r7, #20
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd90      	pop	{r4, r7, pc}
 80023e6:	bf00      	nop
 80023e8:	2000033c 	.word	0x2000033c

080023ec <check_category>:

int check_category(char* temp)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
	if (strcmp(temp, "POP") == 0) return POP;
 80023f4:	4940      	ldr	r1, [pc, #256]	; (80024f8 <check_category+0x10c>)
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f7fd ff16 	bl	8000228 <strcmp>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d101      	bne.n	8002406 <check_category+0x1a>
 8002402:	2300      	movs	r3, #0
 8002404:	e074      	b.n	80024f0 <check_category+0x104>
	else if (strcmp(temp, "PTY") == 0) return PTY;
 8002406:	493d      	ldr	r1, [pc, #244]	; (80024fc <check_category+0x110>)
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f7fd ff0d 	bl	8000228 <strcmp>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d101      	bne.n	8002418 <check_category+0x2c>
 8002414:	2301      	movs	r3, #1
 8002416:	e06b      	b.n	80024f0 <check_category+0x104>
	else if (strcmp(temp, "R06") == 0) return R06;
 8002418:	4939      	ldr	r1, [pc, #228]	; (8002500 <check_category+0x114>)
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f7fd ff04 	bl	8000228 <strcmp>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d101      	bne.n	800242a <check_category+0x3e>
 8002426:	2302      	movs	r3, #2
 8002428:	e062      	b.n	80024f0 <check_category+0x104>
	else if (strcmp(temp, "REH") == 0) return REH;
 800242a:	4936      	ldr	r1, [pc, #216]	; (8002504 <check_category+0x118>)
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f7fd fefb 	bl	8000228 <strcmp>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d101      	bne.n	800243c <check_category+0x50>
 8002438:	2303      	movs	r3, #3
 800243a:	e059      	b.n	80024f0 <check_category+0x104>
	else if (strcmp(temp, "S06") == 0) return S06;
 800243c:	4932      	ldr	r1, [pc, #200]	; (8002508 <check_category+0x11c>)
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f7fd fef2 	bl	8000228 <strcmp>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <check_category+0x62>
 800244a:	2304      	movs	r3, #4
 800244c:	e050      	b.n	80024f0 <check_category+0x104>
	else if (strcmp(temp, "SKY") == 0) return SKY;
 800244e:	492f      	ldr	r1, [pc, #188]	; (800250c <check_category+0x120>)
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f7fd fee9 	bl	8000228 <strcmp>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d101      	bne.n	8002460 <check_category+0x74>
 800245c:	2305      	movs	r3, #5
 800245e:	e047      	b.n	80024f0 <check_category+0x104>
	else if (strcmp(temp, "T3H") == 0) return T3H;
 8002460:	492b      	ldr	r1, [pc, #172]	; (8002510 <check_category+0x124>)
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f7fd fee0 	bl	8000228 <strcmp>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <check_category+0x86>
 800246e:	2306      	movs	r3, #6
 8002470:	e03e      	b.n	80024f0 <check_category+0x104>
	else if (strcmp(temp, "TMN") == 0) return TMN;
 8002472:	4928      	ldr	r1, [pc, #160]	; (8002514 <check_category+0x128>)
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f7fd fed7 	bl	8000228 <strcmp>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d101      	bne.n	8002484 <check_category+0x98>
 8002480:	2307      	movs	r3, #7
 8002482:	e035      	b.n	80024f0 <check_category+0x104>
	else if (strcmp(temp, "TMX") == 0) return TMX;
 8002484:	4924      	ldr	r1, [pc, #144]	; (8002518 <check_category+0x12c>)
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f7fd fece 	bl	8000228 <strcmp>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <check_category+0xaa>
 8002492:	2308      	movs	r3, #8
 8002494:	e02c      	b.n	80024f0 <check_category+0x104>
	else if (strcmp(temp, "UUU") == 0) return UUU;
 8002496:	4921      	ldr	r1, [pc, #132]	; (800251c <check_category+0x130>)
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f7fd fec5 	bl	8000228 <strcmp>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d101      	bne.n	80024a8 <check_category+0xbc>
 80024a4:	2309      	movs	r3, #9
 80024a6:	e023      	b.n	80024f0 <check_category+0x104>
	else if (strcmp(temp, "VVV") == 0) return VVV;
 80024a8:	491d      	ldr	r1, [pc, #116]	; (8002520 <check_category+0x134>)
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f7fd febc 	bl	8000228 <strcmp>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <check_category+0xce>
 80024b6:	230a      	movs	r3, #10
 80024b8:	e01a      	b.n	80024f0 <check_category+0x104>
	else if (strcmp(temp, "WAV") == 0) return WAV;
 80024ba:	491a      	ldr	r1, [pc, #104]	; (8002524 <check_category+0x138>)
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f7fd feb3 	bl	8000228 <strcmp>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d101      	bne.n	80024cc <check_category+0xe0>
 80024c8:	230b      	movs	r3, #11
 80024ca:	e011      	b.n	80024f0 <check_category+0x104>
	else if (strcmp(temp, "VEC") == 0) return VEC;
 80024cc:	4916      	ldr	r1, [pc, #88]	; (8002528 <check_category+0x13c>)
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f7fd feaa 	bl	8000228 <strcmp>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d101      	bne.n	80024de <check_category+0xf2>
 80024da:	230c      	movs	r3, #12
 80024dc:	e008      	b.n	80024f0 <check_category+0x104>
	else if (strcmp(temp, "WSD") == 0) return WSD;
 80024de:	4913      	ldr	r1, [pc, #76]	; (800252c <check_category+0x140>)
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f7fd fea1 	bl	8000228 <strcmp>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d101      	bne.n	80024f0 <check_category+0x104>
 80024ec:	230d      	movs	r3, #13
 80024ee:	e7ff      	b.n	80024f0 <check_category+0x104>
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3708      	adds	r7, #8
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	0800a7c0 	.word	0x0800a7c0
 80024fc:	0800a7c4 	.word	0x0800a7c4
 8002500:	0800a7c8 	.word	0x0800a7c8
 8002504:	0800a7cc 	.word	0x0800a7cc
 8002508:	0800a7d0 	.word	0x0800a7d0
 800250c:	0800a7d4 	.word	0x0800a7d4
 8002510:	0800a7d8 	.word	0x0800a7d8
 8002514:	0800a7dc 	.word	0x0800a7dc
 8002518:	0800a7e0 	.word	0x0800a7e0
 800251c:	0800a7e4 	.word	0x0800a7e4
 8002520:	0800a7e8 	.word	0x0800a7e8
 8002524:	0800a7ec 	.word	0x0800a7ec
 8002528:	0800a7f0 	.word	0x0800a7f0
 800252c:	0800a7f4 	.word	0x0800a7f4

08002530 <check_item>:

int check_item(char* temp)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
	if (strcmp(temp, "category") == 0) return CATEGORY;
 8002538:	491d      	ldr	r1, [pc, #116]	; (80025b0 <check_item+0x80>)
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f7fd fe74 	bl	8000228 <strcmp>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <check_item+0x1a>
 8002546:	2301      	movs	r3, #1
 8002548:	e02d      	b.n	80025a6 <check_item+0x76>
	else if (strcmp(temp, "fcstDate") == 0) return FCSTDATE;
 800254a:	491a      	ldr	r1, [pc, #104]	; (80025b4 <check_item+0x84>)
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f7fd fe6b 	bl	8000228 <strcmp>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d101      	bne.n	800255c <check_item+0x2c>
 8002558:	2302      	movs	r3, #2
 800255a:	e024      	b.n	80025a6 <check_item+0x76>
	else if (strcmp(temp, "fcstTime") == 0) return FCSTTIME;
 800255c:	4916      	ldr	r1, [pc, #88]	; (80025b8 <check_item+0x88>)
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f7fd fe62 	bl	8000228 <strcmp>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <check_item+0x3e>
 800256a:	2303      	movs	r3, #3
 800256c:	e01b      	b.n	80025a6 <check_item+0x76>
	else if (strcmp(temp, "fcstValue") == 0) return FCSTVALUE;
 800256e:	4913      	ldr	r1, [pc, #76]	; (80025bc <check_item+0x8c>)
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f7fd fe59 	bl	8000228 <strcmp>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d101      	bne.n	8002580 <check_item+0x50>
 800257c:	2304      	movs	r3, #4
 800257e:	e012      	b.n	80025a6 <check_item+0x76>
	else if (strcmp(temp, "nx") == 0) return NX;
 8002580:	490f      	ldr	r1, [pc, #60]	; (80025c0 <check_item+0x90>)
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f7fd fe50 	bl	8000228 <strcmp>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d101      	bne.n	8002592 <check_item+0x62>
 800258e:	2305      	movs	r3, #5
 8002590:	e009      	b.n	80025a6 <check_item+0x76>
	else if (strcmp(temp, "ny") == 0) return NY;
 8002592:	490c      	ldr	r1, [pc, #48]	; (80025c4 <check_item+0x94>)
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f7fd fe47 	bl	8000228 <strcmp>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d101      	bne.n	80025a4 <check_item+0x74>
 80025a0:	2306      	movs	r3, #6
 80025a2:	e000      	b.n	80025a6 <check_item+0x76>
	else return 0;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	0800a7f8 	.word	0x0800a7f8
 80025b4:	0800a804 	.word	0x0800a804
 80025b8:	0800a810 	.word	0x0800a810
 80025bc:	0800a81c 	.word	0x0800a81c
 80025c0:	0800a828 	.word	0x0800a828
 80025c4:	0800a82c 	.word	0x0800a82c

080025c8 <init_Data_parse>:

void init_Data_parse(fcstinfo* fcst)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
	memset((*fcst).category, 0, sizeof((*fcst).category));
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2238      	movs	r2, #56	; 0x38
 80025d4:	2100      	movs	r1, #0
 80025d6:	4618      	mov	r0, r3
 80025d8:	f004 ff60 	bl	800749c <memset>
	memset((*fcst).fcstDate, 0, sizeof((*fcst).fcstDate));
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	3338      	adds	r3, #56	; 0x38
 80025e0:	227e      	movs	r2, #126	; 0x7e
 80025e2:	2100      	movs	r1, #0
 80025e4:	4618      	mov	r0, r3
 80025e6:	f004 ff59 	bl	800749c <memset>
	memset((*fcst).fcstTime, 0, sizeof((*fcst).fcstTime));
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	33b6      	adds	r3, #182	; 0xb6
 80025ee:	2254      	movs	r2, #84	; 0x54
 80025f0:	2100      	movs	r1, #0
 80025f2:	4618      	mov	r0, r3
 80025f4:	f004 ff52 	bl	800749c <memset>
	memset((*fcst).fcstValue, 0, sizeof((*fcst).fcstValue));
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 80025fe:	2246      	movs	r2, #70	; 0x46
 8002600:	2100      	movs	r1, #0
 8002602:	4618      	mov	r0, r3
 8002604:	f004 ff4a 	bl	800749c <memset>
}
 8002608:	bf00      	nop
 800260a:	3708      	adds	r7, #8
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <get_userMessage>:
	}
	count_index -= 3;
	return count_index;
}
/////////////////////////////// bluetooth message parsing code ///////////////////////////////
int get_userMessage(char* RXD){
 8002610:	b580      	push	{r7, lr}
 8002612:	b088      	sub	sp, #32
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
	int i=0;
 8002618:	2300      	movs	r3, #0
 800261a:	61fb      	str	r3, [r7, #28]
	int buff_index=0;
 800261c:	2300      	movs	r3, #0
 800261e:	61bb      	str	r3, [r7, #24]
	char received_msg[10];   // temporary storage for message(msg)
	char search = FindComma_1;   // variable for switch-case condition
 8002620:	2300      	movs	r3, #0
 8002622:	75fb      	strb	r3, [r7, #23]
	char check_cmd = check_command(RXD);   // temporary storage for command(cmd)
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f000 f865 	bl	80026f4 <check_command>
 800262a:	4603      	mov	r3, r0
 800262c:	75bb      	strb	r3, [r7, #22]

	while(check_cmd != is_Invalid) {   // if it's a valid command
 800262e:	e047      	b.n	80026c0 <get_userMessage+0xb0>
		switch(search)
 8002630:	7dfb      	ldrb	r3, [r7, #23]
 8002632:	2b02      	cmp	r3, #2
 8002634:	d025      	beq.n	8002682 <get_userMessage+0x72>
 8002636:	2b02      	cmp	r3, #2
 8002638:	dc30      	bgt.n	800269c <get_userMessage+0x8c>
 800263a:	2b00      	cmp	r3, #0
 800263c:	d002      	beq.n	8002644 <get_userMessage+0x34>
 800263e:	2b01      	cmp	r3, #1
 8002640:	d007      	beq.n	8002652 <get_userMessage+0x42>
 8002642:	e02b      	b.n	800269c <get_userMessage+0x8c>
		{
			case FindComma_1:
				if(*(RXD) == ',')
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	2b2c      	cmp	r3, #44	; 0x2c
 800264a:	d126      	bne.n	800269a <get_userMessage+0x8a>
					search = FindComma_2;
 800264c:	2301      	movs	r3, #1
 800264e:	75fb      	strb	r3, [r7, #23]
				break;
 8002650:	e023      	b.n	800269a <get_userMessage+0x8a>
			case FindComma_2:
				if(*(RXD) != ',')
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	2b2c      	cmp	r3, #44	; 0x2c
 8002658:	d00a      	beq.n	8002670 <get_userMessage+0x60>
					received_msg[i++] = *(RXD);   // store message between two comma
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	1c5a      	adds	r2, r3, #1
 800265e:	61fa      	str	r2, [r7, #28]
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	7812      	ldrb	r2, [r2, #0]
 8002664:	f107 0120 	add.w	r1, r7, #32
 8002668:	440b      	add	r3, r1
 800266a:	f803 2c14 	strb.w	r2, [r3, #-20]
				else{
					received_msg[i] = '\0';
					search = Find_at;
				}
				break;
 800266e:	e015      	b.n	800269c <get_userMessage+0x8c>
					received_msg[i] = '\0';
 8002670:	f107 020c 	add.w	r2, r7, #12
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	4413      	add	r3, r2
 8002678:	2200      	movs	r2, #0
 800267a:	701a      	strb	r2, [r3, #0]
					search = Find_at;
 800267c:	2302      	movs	r3, #2
 800267e:	75fb      	strb	r3, [r7, #23]
				break;
 8002680:	e00c      	b.n	800269c <get_userMessage+0x8c>
			case Find_at:
				if(*RXD == '@')   // if '@' appears right after the second comma
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	2b40      	cmp	r3, #64	; 0x40
 8002688:	d102      	bne.n	8002690 <get_userMessage+0x80>
					search = Finished;
 800268a:	2303      	movs	r3, #3
 800268c:	75fb      	strb	r3, [r7, #23]
				else {
					printf("Invalid command\r\n");
					return is_Invalid;
				}
				break;
 800268e:	e005      	b.n	800269c <get_userMessage+0x8c>
					printf("Invalid command\r\n");
 8002690:	4816      	ldr	r0, [pc, #88]	; (80026ec <get_userMessage+0xdc>)
 8002692:	f005 fbf1 	bl	8007e78 <puts>
					return is_Invalid;
 8002696:	230a      	movs	r3, #10
 8002698:	e024      	b.n	80026e4 <get_userMessage+0xd4>
				break;
 800269a:	bf00      	nop
		}
		if(search == Finished)
 800269c:	7dfb      	ldrb	r3, [r7, #23]
 800269e:	2b03      	cmp	r3, #3
 80026a0:	d012      	beq.n	80026c8 <get_userMessage+0xb8>
			break;

		RXD++;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	3301      	adds	r3, #1
 80026a6:	607b      	str	r3, [r7, #4]
		buff_index++;
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	3301      	adds	r3, #1
 80026ac:	61bb      	str	r3, [r7, #24]

		if(buff_index >= 2048){
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026b4:	db04      	blt.n	80026c0 <get_userMessage+0xb0>
			printf("Buffer is full\r\n");
 80026b6:	480e      	ldr	r0, [pc, #56]	; (80026f0 <get_userMessage+0xe0>)
 80026b8:	f005 fbde 	bl	8007e78 <puts>
			return is_Invalid;
 80026bc:	230a      	movs	r3, #10
 80026be:	e011      	b.n	80026e4 <get_userMessage+0xd4>
	while(check_cmd != is_Invalid) {   // if it's a valid command
 80026c0:	7dbb      	ldrb	r3, [r7, #22]
 80026c2:	2b0a      	cmp	r3, #10
 80026c4:	d1b4      	bne.n	8002630 <get_userMessage+0x20>
 80026c6:	e000      	b.n	80026ca <get_userMessage+0xba>
			break;
 80026c8:	bf00      	nop
		}
	}
	if(check_cmd == is_Invalid)
 80026ca:	7dbb      	ldrb	r3, [r7, #22]
 80026cc:	2b0a      	cmp	r3, #10
 80026ce:	d101      	bne.n	80026d4 <get_userMessage+0xc4>
		return is_Invalid;
 80026d0:	230a      	movs	r3, #10
 80026d2:	e007      	b.n	80026e4 <get_userMessage+0xd4>

	check_msg(check_cmd, received_msg);
 80026d4:	f107 020c 	add.w	r2, r7, #12
 80026d8:	7dbb      	ldrb	r3, [r7, #22]
 80026da:	4611      	mov	r1, r2
 80026dc:	4618      	mov	r0, r3
 80026de:	f000 f833 	bl	8002748 <check_msg>
	return Valid;
 80026e2:	2300      	movs	r3, #0
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3720      	adds	r7, #32
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	0800a830 	.word	0x0800a830
 80026f0:	0800a844 	.word	0x0800a844

080026f4 <check_command>:

char check_command(char *RXD)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
	if(strstr((char*)RXD, "Ctrl")) return Ctrl;   // Ctrl == 1
 80026fc:	490f      	ldr	r1, [pc, #60]	; (800273c <check_command+0x48>)
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f005 fca8 	bl	8008054 <strstr>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <check_command+0x1a>
 800270a:	2301      	movs	r3, #1
 800270c:	e012      	b.n	8002734 <check_command+0x40>
	else if(strstr((char*)RXD, "View")) return View;   // View == 2
 800270e:	490c      	ldr	r1, [pc, #48]	; (8002740 <check_command+0x4c>)
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f005 fc9f 	bl	8008054 <strstr>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <check_command+0x2c>
 800271c:	2302      	movs	r3, #2
 800271e:	e009      	b.n	8002734 <check_command+0x40>
	else if(strstr((char*)RXD, "Select")) return Select;   // Select == 3
 8002720:	4908      	ldr	r1, [pc, #32]	; (8002744 <check_command+0x50>)
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f005 fc96 	bl	8008054 <strstr>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <check_command+0x3e>
 800272e:	2303      	movs	r3, #3
 8002730:	e000      	b.n	8002734 <check_command+0x40>
	else return is_Invalid;   // invalid command
 8002732:	230a      	movs	r3, #10
}
 8002734:	4618      	mov	r0, r3
 8002736:	3708      	adds	r7, #8
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	0800a854 	.word	0x0800a854
 8002740:	0800a85c 	.word	0x0800a85c
 8002744:	0800a864 	.word	0x0800a864

08002748 <check_msg>:

void check_msg(char check_cmd, char* received_msg)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af00      	add	r7, sp, #0
 800274e:	4603      	mov	r3, r0
 8002750:	6039      	str	r1, [r7, #0]
 8002752:	71fb      	strb	r3, [r7, #7]
	int value = is_Invalid;
 8002754:	230a      	movs	r3, #10
 8002756:	617b      	str	r3, [r7, #20]
	int ten = 0;
 8002758:	2300      	movs	r3, #0
 800275a:	613b      	str	r3, [r7, #16]
	int one = 0;
 800275c:	2300      	movs	r3, #0
 800275e:	60fb      	str	r3, [r7, #12]
	char* temp = received_msg;
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	60bb      	str	r3, [r7, #8]
	if(check_cmd == Ctrl) {
 8002764:	79fb      	ldrb	r3, [r7, #7]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d113      	bne.n	8002792 <check_msg+0x4a>
		ten = ((*(temp++))-0x30);
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	1c5a      	adds	r2, r3, #1
 800276e:	60ba      	str	r2, [r7, #8]
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	3b30      	subs	r3, #48	; 0x30
 8002774:	613b      	str	r3, [r7, #16]
		one = ((*temp)-0x30);
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	3b30      	subs	r3, #48	; 0x30
 800277c:	60fb      	str	r3, [r7, #12]
		value = ten*10 + one;   // 0 -> sector1, 1 -> sector2, 2 -> sector3, 3 -> sector4
 800277e:	693a      	ldr	r2, [r7, #16]
 8002780:	4613      	mov	r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	4413      	add	r3, r2
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	461a      	mov	r2, r3
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	4413      	add	r3, r2
 800278e:	617b      	str	r3, [r7, #20]
 8002790:	e01d      	b.n	80027ce <check_msg+0x86>
	}
	else if(check_cmd == View) {
 8002792:	79fb      	ldrb	r3, [r7, #7]
 8002794:	2b02      	cmp	r3, #2
 8002796:	d104      	bne.n	80027a2 <check_msg+0x5a>
		if(strstr((char*)received_msg, "weather")){
 8002798:	4912      	ldr	r1, [pc, #72]	; (80027e4 <check_msg+0x9c>)
 800279a:	6838      	ldr	r0, [r7, #0]
 800279c:	f005 fc5a 	bl	8008054 <strstr>
 80027a0:	e015      	b.n	80027ce <check_msg+0x86>
			//print weather data (should be modified)
		}
	}
	else if(check_cmd == Select) {
 80027a2:	79fb      	ldrb	r3, [r7, #7]
 80027a4:	2b03      	cmp	r3, #3
 80027a6:	d112      	bne.n	80027ce <check_msg+0x86>
		ten = ((*(temp++))-0x30);
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	1c5a      	adds	r2, r3, #1
 80027ac:	60ba      	str	r2, [r7, #8]
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	3b30      	subs	r3, #48	; 0x30
 80027b2:	613b      	str	r3, [r7, #16]
		one = ((*temp)-0x30);
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	3b30      	subs	r3, #48	; 0x30
 80027ba:	60fb      	str	r3, [r7, #12]
		value = ten*10 + one;   // 0 -> SPRING/FALL, 1 -> SUMMER, 2 -> EARLY SPRING/LATE AUTUMN, 3 -> WINTER
 80027bc:	693a      	ldr	r2, [r7, #16]
 80027be:	4613      	mov	r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	4413      	add	r3, r2
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	461a      	mov	r2, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	4413      	add	r3, r2
 80027cc:	617b      	str	r3, [r7, #20]
	}

	cmd_msg.cmd = check_cmd;
 80027ce:	4a06      	ldr	r2, [pc, #24]	; (80027e8 <check_msg+0xa0>)
 80027d0:	79fb      	ldrb	r3, [r7, #7]
 80027d2:	7013      	strb	r3, [r2, #0]
	cmd_msg.msg = (char)value;
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	b2da      	uxtb	r2, r3
 80027d8:	4b03      	ldr	r3, [pc, #12]	; (80027e8 <check_msg+0xa0>)
 80027da:	705a      	strb	r2, [r3, #1]
}
 80027dc:	bf00      	nop
 80027de:	3718      	adds	r7, #24
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	0800a86c 	.word	0x0800a86c
 80027e8:	20000330 	.word	0x20000330

080027ec <init_cmd_msg>:

void init_cmd_msg(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
	cmd_msg.cmd = is_Invalid;
 80027f0:	4b04      	ldr	r3, [pc, #16]	; (8002804 <init_cmd_msg+0x18>)
 80027f2:	220a      	movs	r2, #10
 80027f4:	701a      	strb	r2, [r3, #0]
	cmd_msg.msg = is_Invalid;
 80027f6:	4b03      	ldr	r3, [pc, #12]	; (8002804 <init_cmd_msg+0x18>)
 80027f8:	220a      	movs	r2, #10
 80027fa:	705a      	strb	r2, [r3, #1]
}
 80027fc:	bf00      	nop
 80027fe:	46bd      	mov	sp, r7
 8002800:	bc80      	pop	{r7}
 8002802:	4770      	bx	lr
 8002804:	20000330 	.word	0x20000330

08002808 <init_sector_matching>:

void init_sector_matching(void)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
	for(int i=0; i<4; i++){
 800280e:	2300      	movs	r3, #0
 8002810:	607b      	str	r3, [r7, #4]
 8002812:	e00d      	b.n	8002830 <init_sector_matching+0x28>
		sector[i].is_matched = 0;
 8002814:	4a0b      	ldr	r2, [pc, #44]	; (8002844 <init_sector_matching+0x3c>)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2100      	movs	r1, #0
 800281a:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
		sector[i].matched_weather = is_Invalid;
 800281e:	4a09      	ldr	r2, [pc, #36]	; (8002844 <init_sector_matching+0x3c>)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	005b      	lsls	r3, r3, #1
 8002824:	4413      	add	r3, r2
 8002826:	220a      	movs	r2, #10
 8002828:	705a      	strb	r2, [r3, #1]
	for(int i=0; i<4; i++){
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	3301      	adds	r3, #1
 800282e:	607b      	str	r3, [r7, #4]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2b03      	cmp	r3, #3
 8002834:	ddee      	ble.n	8002814 <init_sector_matching+0xc>
	}
}
 8002836:	bf00      	nop
 8002838:	bf00      	nop
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	bc80      	pop	{r7}
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	20000334 	.word	0x20000334

08002848 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800284c:	4b29      	ldr	r3, [pc, #164]	; (80028f4 <MX_RTC_Init+0xac>)
 800284e:	4a2a      	ldr	r2, [pc, #168]	; (80028f8 <MX_RTC_Init+0xb0>)
 8002850:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8002852:	4b28      	ldr	r3, [pc, #160]	; (80028f4 <MX_RTC_Init+0xac>)
 8002854:	f04f 32ff 	mov.w	r2, #4294967295
 8002858:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 800285a:	4b26      	ldr	r3, [pc, #152]	; (80028f4 <MX_RTC_Init+0xac>)
 800285c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002860:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002862:	4824      	ldr	r0, [pc, #144]	; (80028f4 <MX_RTC_Init+0xac>)
 8002864:	f002 fc4c 	bl	8005100 <HAL_RTC_Init>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <MX_RTC_Init+0x2a>
  {
    Error_Handler();
 800286e:	f7ff f98b 	bl	8001b88 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 5;
 8002872:	4b22      	ldr	r3, [pc, #136]	; (80028fc <MX_RTC_Init+0xb4>)
 8002874:	2205      	movs	r2, #5
 8002876:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8002878:	4b20      	ldr	r3, [pc, #128]	; (80028fc <MX_RTC_Init+0xb4>)
 800287a:	2200      	movs	r2, #0
 800287c:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 800287e:	4b1f      	ldr	r3, [pc, #124]	; (80028fc <MX_RTC_Init+0xb4>)
 8002880:	2200      	movs	r2, #0
 8002882:	709a      	strb	r2, [r3, #2]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002884:	2201      	movs	r2, #1
 8002886:	491d      	ldr	r1, [pc, #116]	; (80028fc <MX_RTC_Init+0xb4>)
 8002888:	481a      	ldr	r0, [pc, #104]	; (80028f4 <MX_RTC_Init+0xac>)
 800288a:	f002 fccf 	bl	800522c <HAL_RTC_SetTime>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d001      	beq.n	8002898 <MX_RTC_Init+0x50>
  {
    Error_Handler();
 8002894:	f7ff f978 	bl	8001b88 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_SUNDAY;
 8002898:	4b19      	ldr	r3, [pc, #100]	; (8002900 <MX_RTC_Init+0xb8>)
 800289a:	2200      	movs	r2, #0
 800289c:	701a      	strb	r2, [r3, #0]
  DateToUpdate.Month = RTC_MONTH_JULY;
 800289e:	4b18      	ldr	r3, [pc, #96]	; (8002900 <MX_RTC_Init+0xb8>)
 80028a0:	2207      	movs	r2, #7
 80028a2:	705a      	strb	r2, [r3, #1]
  DateToUpdate.Date = 11;
 80028a4:	4b16      	ldr	r3, [pc, #88]	; (8002900 <MX_RTC_Init+0xb8>)
 80028a6:	220b      	movs	r2, #11
 80028a8:	709a      	strb	r2, [r3, #2]
  DateToUpdate.Year = 21;
 80028aa:	4b15      	ldr	r3, [pc, #84]	; (8002900 <MX_RTC_Init+0xb8>)
 80028ac:	2215      	movs	r2, #21
 80028ae:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 80028b0:	2201      	movs	r2, #1
 80028b2:	4913      	ldr	r1, [pc, #76]	; (8002900 <MX_RTC_Init+0xb8>)
 80028b4:	480f      	ldr	r0, [pc, #60]	; (80028f4 <MX_RTC_Init+0xac>)
 80028b6:	f002 fe29 	bl	800550c <HAL_RTC_SetDate>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80028c0:	f7ff f962 	bl	8001b88 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 8;
 80028c4:	4b0f      	ldr	r3, [pc, #60]	; (8002904 <MX_RTC_Init+0xbc>)
 80028c6:	2208      	movs	r2, #8
 80028c8:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80028ca:	4b0e      	ldr	r3, [pc, #56]	; (8002904 <MX_RTC_Init+0xbc>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 80028d0:	4b0c      	ldr	r3, [pc, #48]	; (8002904 <MX_RTC_Init+0xbc>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	709a      	strb	r2, [r3, #2]
  sAlarm.Alarm = RTC_ALARM_A;
 80028d6:	4b0b      	ldr	r3, [pc, #44]	; (8002904 <MX_RTC_Init+0xbc>)
 80028d8:	2200      	movs	r2, #0
 80028da:	605a      	str	r2, [r3, #4]
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80028dc:	2201      	movs	r2, #1
 80028de:	4909      	ldr	r1, [pc, #36]	; (8002904 <MX_RTC_Init+0xbc>)
 80028e0:	4804      	ldr	r0, [pc, #16]	; (80028f4 <MX_RTC_Init+0xac>)
 80028e2:	f002 fec9 	bl	8005678 <HAL_RTC_SetAlarm_IT>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 80028ec:	f7ff f94c 	bl	8001b88 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80028f0:	bf00      	nop
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	2000048c 	.word	0x2000048c
 80028f8:	40002800 	.word	0x40002800
 80028fc:	200002fc 	.word	0x200002fc
 8002900:	20000300 	.word	0x20000300
 8002904:	20000304 	.word	0x20000304

08002908 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a13      	ldr	r2, [pc, #76]	; (8002964 <HAL_RTC_MspInit+0x5c>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d120      	bne.n	800295c <HAL_RTC_MspInit+0x54>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800291a:	f001 fe2b 	bl	8004574 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800291e:	4b12      	ldr	r3, [pc, #72]	; (8002968 <HAL_RTC_MspInit+0x60>)
 8002920:	69db      	ldr	r3, [r3, #28]
 8002922:	4a11      	ldr	r2, [pc, #68]	; (8002968 <HAL_RTC_MspInit+0x60>)
 8002924:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002928:	61d3      	str	r3, [r2, #28]
 800292a:	4b0f      	ldr	r3, [pc, #60]	; (8002968 <HAL_RTC_MspInit+0x60>)
 800292c:	69db      	ldr	r3, [r3, #28]
 800292e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002932:	60fb      	str	r3, [r7, #12]
 8002934:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002936:	4b0d      	ldr	r3, [pc, #52]	; (800296c <HAL_RTC_MspInit+0x64>)
 8002938:	2201      	movs	r2, #1
 800293a:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 800293c:	2200      	movs	r2, #0
 800293e:	2100      	movs	r1, #0
 8002940:	2003      	movs	r0, #3
 8002942:	f001 fad0 	bl	8003ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8002946:	2003      	movs	r0, #3
 8002948:	f001 fae9 	bl	8003f1e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800294c:	2200      	movs	r2, #0
 800294e:	2100      	movs	r1, #0
 8002950:	2029      	movs	r0, #41	; 0x29
 8002952:	f001 fac8 	bl	8003ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002956:	2029      	movs	r0, #41	; 0x29
 8002958:	f001 fae1 	bl	8003f1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800295c:	bf00      	nop
 800295e:	3710      	adds	r7, #16
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	40002800 	.word	0x40002800
 8002968:	40021000 	.word	0x40021000
 800296c:	4242043c 	.word	0x4242043c

08002970 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002976:	4b19      	ldr	r3, [pc, #100]	; (80029dc <HAL_MspInit+0x6c>)
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	4a18      	ldr	r2, [pc, #96]	; (80029dc <HAL_MspInit+0x6c>)
 800297c:	f043 0301 	orr.w	r3, r3, #1
 8002980:	6193      	str	r3, [r2, #24]
 8002982:	4b16      	ldr	r3, [pc, #88]	; (80029dc <HAL_MspInit+0x6c>)
 8002984:	699b      	ldr	r3, [r3, #24]
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	60bb      	str	r3, [r7, #8]
 800298c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800298e:	4b13      	ldr	r3, [pc, #76]	; (80029dc <HAL_MspInit+0x6c>)
 8002990:	69db      	ldr	r3, [r3, #28]
 8002992:	4a12      	ldr	r2, [pc, #72]	; (80029dc <HAL_MspInit+0x6c>)
 8002994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002998:	61d3      	str	r3, [r2, #28]
 800299a:	4b10      	ldr	r3, [pc, #64]	; (80029dc <HAL_MspInit+0x6c>)
 800299c:	69db      	ldr	r3, [r3, #28]
 800299e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029a2:	607b      	str	r3, [r7, #4]
 80029a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80029a6:	2200      	movs	r2, #0
 80029a8:	2100      	movs	r1, #0
 80029aa:	2005      	movs	r0, #5
 80029ac:	f001 fa9b 	bl	8003ee6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80029b0:	2005      	movs	r0, #5
 80029b2:	f001 fab4 	bl	8003f1e <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80029b6:	4b0a      	ldr	r3, [pc, #40]	; (80029e0 <HAL_MspInit+0x70>)
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	60fb      	str	r3, [r7, #12]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80029c2:	60fb      	str	r3, [r7, #12]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80029ca:	60fb      	str	r3, [r7, #12]
 80029cc:	4a04      	ldr	r2, [pc, #16]	; (80029e0 <HAL_MspInit+0x70>)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029d2:	bf00      	nop
 80029d4:	3710      	adds	r7, #16
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	40021000 	.word	0x40021000
 80029e0:	40010000 	.word	0x40010000

080029e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80029e8:	e7fe      	b.n	80029e8 <NMI_Handler+0x4>

080029ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029ea:	b480      	push	{r7}
 80029ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029ee:	e7fe      	b.n	80029ee <HardFault_Handler+0x4>

080029f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029f4:	e7fe      	b.n	80029f4 <MemManage_Handler+0x4>

080029f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029f6:	b480      	push	{r7}
 80029f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029fa:	e7fe      	b.n	80029fa <BusFault_Handler+0x4>

080029fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a00:	e7fe      	b.n	8002a00 <UsageFault_Handler+0x4>

08002a02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a02:	b480      	push	{r7}
 8002a04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a06:	bf00      	nop
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bc80      	pop	{r7}
 8002a0c:	4770      	bx	lr

08002a0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a0e:	b480      	push	{r7}
 8002a10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a12:	bf00      	nop
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bc80      	pop	{r7}
 8002a18:	4770      	bx	lr

08002a1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a1a:	b480      	push	{r7}
 8002a1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a1e:	bf00      	nop
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bc80      	pop	{r7}
 8002a24:	4770      	bx	lr

08002a26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a26:	b580      	push	{r7, lr}
 8002a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a2a:	f001 f945 	bl	8003cb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a2e:	bf00      	nop
 8002a30:	bd80      	pop	{r7, pc}
	...

08002a34 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 8002a38:	4802      	ldr	r0, [pc, #8]	; (8002a44 <RTC_IRQHandler+0x10>)
 8002a3a:	f003 f9a9 	bl	8005d90 <HAL_RTCEx_RTCIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8002a3e:	bf00      	nop
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	2000048c 	.word	0x2000048c

08002a48 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002a4c:	bf00      	nop
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bc80      	pop	{r7}
 8002a52:	4770      	bx	lr

08002a54 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002a58:	2002      	movs	r0, #2
 8002a5a:	f001 fd69 	bl	8004530 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002a5e:	bf00      	nop
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002a62:	b580      	push	{r7, lr}
 8002a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002a66:	2040      	movs	r0, #64	; 0x40
 8002a68:	f001 fd62 	bl	8004530 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002a6c:	2080      	movs	r0, #128	; 0x80
 8002a6e:	f001 fd5f 	bl	8004530 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002a72:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002a76:	f001 fd5b 	bl	8004530 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8002a7a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002a7e:	f001 fd57 	bl	8004530 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002a82:	bf00      	nop
 8002a84:	bd80      	pop	{r7, pc}
	...

08002a88 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002a8c:	4802      	ldr	r0, [pc, #8]	; (8002a98 <TIM2_IRQHandler+0x10>)
 8002a8e:	f003 fb79 	bl	8006184 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002a92:	bf00      	nop
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	200004a0 	.word	0x200004a0

08002a9c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002aa0:	4802      	ldr	r0, [pc, #8]	; (8002aac <USART1_IRQHandler+0x10>)
 8002aa2:	f004 f8ed 	bl	8006c80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002aa6:	bf00      	nop
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	20003948 	.word	0x20003948

08002ab0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002ab4:	4802      	ldr	r0, [pc, #8]	; (8002ac0 <USART2_IRQHandler+0x10>)
 8002ab6:	f004 f8e3 	bl	8006c80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002aba:	bf00      	nop
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	20004194 	.word	0x20004194

08002ac4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002ac8:	4802      	ldr	r0, [pc, #8]	; (8002ad4 <USART3_IRQHandler+0x10>)
 8002aca:	f004 f8d9 	bl	8006c80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002ace:	bf00      	nop
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	200014f0 	.word	0x200014f0

08002ad8 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002adc:	4802      	ldr	r0, [pc, #8]	; (8002ae8 <RTC_Alarm_IRQHandler+0x10>)
 8002ade:	f002 fe83 	bl	80057e8 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8002ae2:	bf00      	nop
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	2000048c 	.word	0x2000048c

08002aec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
	return 1;
 8002af0:	2301      	movs	r3, #1
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bc80      	pop	{r7}
 8002af8:	4770      	bx	lr

08002afa <_kill>:

int _kill(int pid, int sig)
{
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b082      	sub	sp, #8
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
 8002b02:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002b04:	f004 fc92 	bl	800742c <__errno>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2216      	movs	r2, #22
 8002b0c:	601a      	str	r2, [r3, #0]
	return -1;
 8002b0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <_exit>:

void _exit (int status)
{
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b082      	sub	sp, #8
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002b22:	f04f 31ff 	mov.w	r1, #4294967295
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f7ff ffe7 	bl	8002afa <_kill>
	while (1) {}		/* Make sure we hang here */
 8002b2c:	e7fe      	b.n	8002b2c <_exit+0x12>

08002b2e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	b086      	sub	sp, #24
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	60f8      	str	r0, [r7, #12]
 8002b36:	60b9      	str	r1, [r7, #8]
 8002b38:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	617b      	str	r3, [r7, #20]
 8002b3e:	e00a      	b.n	8002b56 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002b40:	f3af 8000 	nop.w
 8002b44:	4601      	mov	r1, r0
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	1c5a      	adds	r2, r3, #1
 8002b4a:	60ba      	str	r2, [r7, #8]
 8002b4c:	b2ca      	uxtb	r2, r1
 8002b4e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	3301      	adds	r3, #1
 8002b54:	617b      	str	r3, [r7, #20]
 8002b56:	697a      	ldr	r2, [r7, #20]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	dbf0      	blt.n	8002b40 <_read+0x12>
	}

return len;
 8002b5e:	687b      	ldr	r3, [r7, #4]
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3718      	adds	r7, #24
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
	return -1;
 8002b70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bc80      	pop	{r7}
 8002b7c:	4770      	bx	lr

08002b7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b7e:	b480      	push	{r7}
 8002b80:	b083      	sub	sp, #12
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
 8002b86:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b8e:	605a      	str	r2, [r3, #4]
	return 0;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bc80      	pop	{r7}
 8002b9a:	4770      	bx	lr

08002b9c <_isatty>:

int _isatty(int file)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
	return 1;
 8002ba4:	2301      	movs	r3, #1
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bc80      	pop	{r7}
 8002bae:	4770      	bx	lr

08002bb0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b085      	sub	sp, #20
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	60b9      	str	r1, [r7, #8]
 8002bba:	607a      	str	r2, [r7, #4]
	return 0;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3714      	adds	r7, #20
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bc80      	pop	{r7}
 8002bc6:	4770      	bx	lr

08002bc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b086      	sub	sp, #24
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bd0:	4a14      	ldr	r2, [pc, #80]	; (8002c24 <_sbrk+0x5c>)
 8002bd2:	4b15      	ldr	r3, [pc, #84]	; (8002c28 <_sbrk+0x60>)
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bdc:	4b13      	ldr	r3, [pc, #76]	; (8002c2c <_sbrk+0x64>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d102      	bne.n	8002bea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002be4:	4b11      	ldr	r3, [pc, #68]	; (8002c2c <_sbrk+0x64>)
 8002be6:	4a12      	ldr	r2, [pc, #72]	; (8002c30 <_sbrk+0x68>)
 8002be8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bea:	4b10      	ldr	r3, [pc, #64]	; (8002c2c <_sbrk+0x64>)
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	693a      	ldr	r2, [r7, #16]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d207      	bcs.n	8002c08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002bf8:	f004 fc18 	bl	800742c <__errno>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	220c      	movs	r2, #12
 8002c00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c02:	f04f 33ff 	mov.w	r3, #4294967295
 8002c06:	e009      	b.n	8002c1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c08:	4b08      	ldr	r3, [pc, #32]	; (8002c2c <_sbrk+0x64>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c0e:	4b07      	ldr	r3, [pc, #28]	; (8002c2c <_sbrk+0x64>)
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4413      	add	r3, r2
 8002c16:	4a05      	ldr	r2, [pc, #20]	; (8002c2c <_sbrk+0x64>)
 8002c18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3718      	adds	r7, #24
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	2000c000 	.word	0x2000c000
 8002c28:	00000400 	.word	0x00000400
 8002c2c:	2000030c 	.word	0x2000030c
 8002c30:	200041f0 	.word	0x200041f0

08002c34 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c38:	bf00      	nop
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bc80      	pop	{r7}
 8002c3e:	4770      	bx	lr

08002c40 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b08a      	sub	sp, #40	; 0x28
 8002c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c46:	f107 0320 	add.w	r3, r7, #32
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	601a      	str	r2, [r3, #0]
 8002c4e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c50:	1d3b      	adds	r3, r7, #4
 8002c52:	2200      	movs	r2, #0
 8002c54:	601a      	str	r2, [r3, #0]
 8002c56:	605a      	str	r2, [r3, #4]
 8002c58:	609a      	str	r2, [r3, #8]
 8002c5a:	60da      	str	r2, [r3, #12]
 8002c5c:	611a      	str	r2, [r3, #16]
 8002c5e:	615a      	str	r2, [r3, #20]
 8002c60:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002c62:	4b26      	ldr	r3, [pc, #152]	; (8002cfc <MX_TIM2_Init+0xbc>)
 8002c64:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002c68:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16-1;
 8002c6a:	4b24      	ldr	r3, [pc, #144]	; (8002cfc <MX_TIM2_Init+0xbc>)
 8002c6c:	220f      	movs	r2, #15
 8002c6e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c70:	4b22      	ldr	r3, [pc, #136]	; (8002cfc <MX_TIM2_Init+0xbc>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8002c76:	4b21      	ldr	r3, [pc, #132]	; (8002cfc <MX_TIM2_Init+0xbc>)
 8002c78:	f242 720f 	movw	r2, #9999	; 0x270f
 8002c7c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c7e:	4b1f      	ldr	r3, [pc, #124]	; (8002cfc <MX_TIM2_Init+0xbc>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c84:	4b1d      	ldr	r3, [pc, #116]	; (8002cfc <MX_TIM2_Init+0xbc>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002c8a:	481c      	ldr	r0, [pc, #112]	; (8002cfc <MX_TIM2_Init+0xbc>)
 8002c8c:	f003 f92a 	bl	8005ee4 <HAL_TIM_PWM_Init>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8002c96:	f7fe ff77 	bl	8001b88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002ca2:	f107 0320 	add.w	r3, r7, #32
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	4814      	ldr	r0, [pc, #80]	; (8002cfc <MX_TIM2_Init+0xbc>)
 8002caa:	f003 fea9 	bl	8006a00 <HAL_TIMEx_MasterConfigSynchronization>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d001      	beq.n	8002cb8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002cb4:	f7fe ff68 	bl	8001b88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002cb8:	2360      	movs	r3, #96	; 0x60
 8002cba:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 750-1;
 8002cbc:	f240 23ed 	movw	r3, #749	; 0x2ed
 8002cc0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002cca:	1d3b      	adds	r3, r7, #4
 8002ccc:	2200      	movs	r2, #0
 8002cce:	4619      	mov	r1, r3
 8002cd0:	480a      	ldr	r0, [pc, #40]	; (8002cfc <MX_TIM2_Init+0xbc>)
 8002cd2:	f003 fb5f 	bl	8006394 <HAL_TIM_PWM_ConfigChannel>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d001      	beq.n	8002ce0 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8002cdc:	f7fe ff54 	bl	8001b88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8002ce0:	4806      	ldr	r0, [pc, #24]	; (8002cfc <MX_TIM2_Init+0xbc>)
 8002ce2:	f003 f89f 	bl	8005e24 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 8002ce6:	2100      	movs	r1, #0
 8002ce8:	4804      	ldr	r0, [pc, #16]	; (8002cfc <MX_TIM2_Init+0xbc>)
 8002cea:	f003 f94b 	bl	8005f84 <HAL_TIM_PWM_Start_IT>
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002cee:	4803      	ldr	r0, [pc, #12]	; (8002cfc <MX_TIM2_Init+0xbc>)
 8002cf0:	f000 f82a 	bl	8002d48 <HAL_TIM_MspPostInit>

}
 8002cf4:	bf00      	nop
 8002cf6:	3728      	adds	r7, #40	; 0x28
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	200004a0 	.word	0x200004a0

08002d00 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d10:	d113      	bne.n	8002d3a <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d12:	4b0c      	ldr	r3, [pc, #48]	; (8002d44 <HAL_TIM_PWM_MspInit+0x44>)
 8002d14:	69db      	ldr	r3, [r3, #28]
 8002d16:	4a0b      	ldr	r2, [pc, #44]	; (8002d44 <HAL_TIM_PWM_MspInit+0x44>)
 8002d18:	f043 0301 	orr.w	r3, r3, #1
 8002d1c:	61d3      	str	r3, [r2, #28]
 8002d1e:	4b09      	ldr	r3, [pc, #36]	; (8002d44 <HAL_TIM_PWM_MspInit+0x44>)
 8002d20:	69db      	ldr	r3, [r3, #28]
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	60fb      	str	r3, [r7, #12]
 8002d28:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	201c      	movs	r0, #28
 8002d30:	f001 f8d9 	bl	8003ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002d34:	201c      	movs	r0, #28
 8002d36:	f001 f8f2 	bl	8003f1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002d3a:	bf00      	nop
 8002d3c:	3710      	adds	r7, #16
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	40021000 	.word	0x40021000

08002d48 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b088      	sub	sp, #32
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d50:	f107 0310 	add.w	r3, r7, #16
 8002d54:	2200      	movs	r2, #0
 8002d56:	601a      	str	r2, [r3, #0]
 8002d58:	605a      	str	r2, [r3, #4]
 8002d5a:	609a      	str	r2, [r3, #8]
 8002d5c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d66:	d117      	bne.n	8002d98 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d68:	4b0d      	ldr	r3, [pc, #52]	; (8002da0 <HAL_TIM_MspPostInit+0x58>)
 8002d6a:	699b      	ldr	r3, [r3, #24]
 8002d6c:	4a0c      	ldr	r2, [pc, #48]	; (8002da0 <HAL_TIM_MspPostInit+0x58>)
 8002d6e:	f043 0304 	orr.w	r3, r3, #4
 8002d72:	6193      	str	r3, [r2, #24]
 8002d74:	4b0a      	ldr	r3, [pc, #40]	; (8002da0 <HAL_TIM_MspPostInit+0x58>)
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	f003 0304 	and.w	r3, r3, #4
 8002d7c:	60fb      	str	r3, [r7, #12]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002d80:	2301      	movs	r3, #1
 8002d82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d84:	2302      	movs	r3, #2
 8002d86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d88:	2302      	movs	r3, #2
 8002d8a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d8c:	f107 0310 	add.w	r3, r7, #16
 8002d90:	4619      	mov	r1, r3
 8002d92:	4804      	ldr	r0, [pc, #16]	; (8002da4 <HAL_TIM_MspPostInit+0x5c>)
 8002d94:	f001 fa20 	bl	80041d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002d98:	bf00      	nop
 8002d9a:	3720      	adds	r7, #32
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	40021000 	.word	0x40021000
 8002da4:	40010800 	.word	0x40010800

08002da8 <uart1_hal_tx_buffer_init>:
int RX2_OUT_BUF_num = 0;
int RX3_IN_BUF_num = 0;
int RX3_OUT_BUF_num = 0;

void uart1_hal_tx_buffer_init(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	af00      	add	r7, sp, #0
	memset(uart1_hal_tx.buffer, 0, sizeof(uart1_hal_tx.buffer));
 8002dac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002db0:	2100      	movs	r1, #0
 8002db2:	4806      	ldr	r0, [pc, #24]	; (8002dcc <uart1_hal_tx_buffer_init+0x24>)
 8002db4:	f004 fb72 	bl	800749c <memset>
	uart1_hal_tx.input_p = 0;
 8002db8:	4b04      	ldr	r3, [pc, #16]	; (8002dcc <uart1_hal_tx_buffer_init+0x24>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
	uart1_hal_tx.output_p = 0;
 8002dc0:	4b02      	ldr	r3, [pc, #8]	; (8002dcc <uart1_hal_tx_buffer_init+0x24>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
}
 8002dc8:	bf00      	nop
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	2000398c 	.word	0x2000398c

08002dd0 <uart1_hal_rx_buffer_init>:
void uart1_hal_rx_buffer_init(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0
	memset(uart1_hal_rx.buffer, 0, sizeof(uart1_hal_rx.buffer));
 8002dd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002dd8:	2100      	movs	r1, #0
 8002dda:	480b      	ldr	r0, [pc, #44]	; (8002e08 <uart1_hal_rx_buffer_init+0x38>)
 8002ddc:	f004 fb5e 	bl	800749c <memset>
	uart1_hal_rx.input_p = 0;
 8002de0:	4b09      	ldr	r3, [pc, #36]	; (8002e08 <uart1_hal_rx_buffer_init+0x38>)
 8002de2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002de6:	3302      	adds	r3, #2
 8002de8:	2200      	movs	r2, #0
 8002dea:	801a      	strh	r2, [r3, #0]
	uart1_hal_rx.output_p = 0;
 8002dec:	4b06      	ldr	r3, [pc, #24]	; (8002e08 <uart1_hal_rx_buffer_init+0x38>)
 8002dee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002df2:	3304      	adds	r3, #4
 8002df4:	2200      	movs	r2, #0
 8002df6:	801a      	strh	r2, [r3, #0]
	RX1_IN_BUF_num = 0;
 8002df8:	4b04      	ldr	r3, [pc, #16]	; (8002e0c <uart1_hal_rx_buffer_init+0x3c>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	601a      	str	r2, [r3, #0]
	RX1_OUT_BUF_num = 0;
 8002dfe:	4b04      	ldr	r3, [pc, #16]	; (8002e10 <uart1_hal_rx_buffer_init+0x40>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	601a      	str	r2, [r3, #0]
}
 8002e04:	bf00      	nop
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	20002940 	.word	0x20002940
 8002e0c:	20000310 	.word	0x20000310
 8002e10:	20000314 	.word	0x20000314

08002e14 <uart2_hal_tx_buffer_init>:
void uart2_hal_tx_buffer_init(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0
	memset(uart2_hal_tx.buffer, 0, sizeof(uart2_hal_tx.buffer));
 8002e18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e1c:	2100      	movs	r1, #0
 8002e1e:	4806      	ldr	r0, [pc, #24]	; (8002e38 <uart2_hal_tx_buffer_init+0x24>)
 8002e20:	f004 fb3c 	bl	800749c <memset>
	uart2_hal_tx.input_p = 0;
 8002e24:	4b04      	ldr	r3, [pc, #16]	; (8002e38 <uart2_hal_tx_buffer_init+0x24>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
	uart2_hal_tx.output_p = 0;
 8002e2c:	4b02      	ldr	r3, [pc, #8]	; (8002e38 <uart2_hal_tx_buffer_init+0x24>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
}
 8002e34:	bf00      	nop
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	2000253c 	.word	0x2000253c

08002e3c <uart2_hal_rx_buffer_init>:
void uart2_hal_rx_buffer_init(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
	memset(uart2_hal_rx.buffer, 0, sizeof(uart2_hal_rx.buffer));
 8002e40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e44:	2100      	movs	r1, #0
 8002e46:	480b      	ldr	r0, [pc, #44]	; (8002e74 <uart2_hal_rx_buffer_init+0x38>)
 8002e48:	f004 fb28 	bl	800749c <memset>
	uart2_hal_rx.input_p = 0;
 8002e4c:	4b09      	ldr	r3, [pc, #36]	; (8002e74 <uart2_hal_rx_buffer_init+0x38>)
 8002e4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e52:	3302      	adds	r3, #2
 8002e54:	2200      	movs	r2, #0
 8002e56:	801a      	strh	r2, [r3, #0]
	uart2_hal_rx.output_p = 0;
 8002e58:	4b06      	ldr	r3, [pc, #24]	; (8002e74 <uart2_hal_rx_buffer_init+0x38>)
 8002e5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e5e:	3304      	adds	r3, #4
 8002e60:	2200      	movs	r2, #0
 8002e62:	801a      	strh	r2, [r3, #0]
	RX2_IN_BUF_num = 0;
 8002e64:	4b04      	ldr	r3, [pc, #16]	; (8002e78 <uart2_hal_rx_buffer_init+0x3c>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	601a      	str	r2, [r3, #0]
	RX2_OUT_BUF_num = 0;
 8002e6a:	4b04      	ldr	r3, [pc, #16]	; (8002e7c <uart2_hal_rx_buffer_init+0x40>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	601a      	str	r2, [r3, #0]
}
 8002e70:	bf00      	nop
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	20001534 	.word	0x20001534
 8002e78:	20000318 	.word	0x20000318
 8002e7c:	2000031c 	.word	0x2000031c

08002e80 <uart3_hal_tx_buffer_init>:
void uart3_hal_tx_buffer_init(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
	memset(uart3_hal_tx.buffer, 0, sizeof(uart3_hal_tx.buffer));
 8002e84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e88:	2100      	movs	r1, #0
 8002e8a:	4806      	ldr	r0, [pc, #24]	; (8002ea4 <uart3_hal_tx_buffer_init+0x24>)
 8002e8c:	f004 fb06 	bl	800749c <memset>
	uart3_hal_tx.input_p = 0;
 8002e90:	4b04      	ldr	r3, [pc, #16]	; (8002ea4 <uart3_hal_tx_buffer_init+0x24>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
	uart3_hal_tx.output_p = 0;
 8002e98:	4b02      	ldr	r3, [pc, #8]	; (8002ea4 <uart3_hal_tx_buffer_init+0x24>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
}
 8002ea0:	bf00      	nop
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	20003d90 	.word	0x20003d90

08002ea8 <uart3_hal_rx_buffer_init>:
void uart3_hal_rx_buffer_init(void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	af00      	add	r7, sp, #0
	memset(uart3_hal_rx.buffer, 0, sizeof(uart3_hal_rx.buffer));
 8002eac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	480e      	ldr	r0, [pc, #56]	; (8002eec <uart3_hal_rx_buffer_init+0x44>)
 8002eb4:	f004 faf2 	bl	800749c <memset>
	memset(uart3_hal_rx.rx_data, 0, sizeof(uart3_hal_rx.rx_data));
 8002eb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ebc:	2100      	movs	r1, #0
 8002ebe:	480c      	ldr	r0, [pc, #48]	; (8002ef0 <uart3_hal_rx_buffer_init+0x48>)
 8002ec0:	f004 faec 	bl	800749c <memset>
	uart3_hal_rx.input_p = 0;
 8002ec4:	4b09      	ldr	r3, [pc, #36]	; (8002eec <uart3_hal_rx_buffer_init+0x44>)
 8002ec6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002eca:	3302      	adds	r3, #2
 8002ecc:	2200      	movs	r2, #0
 8002ece:	801a      	strh	r2, [r3, #0]
	uart3_hal_rx.output_p = 0;
 8002ed0:	4b06      	ldr	r3, [pc, #24]	; (8002eec <uart3_hal_rx_buffer_init+0x44>)
 8002ed2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ed6:	3304      	adds	r3, #4
 8002ed8:	2200      	movs	r2, #0
 8002eda:	801a      	strh	r2, [r3, #0]
	RX3_IN_BUF_num = 0;
 8002edc:	4b05      	ldr	r3, [pc, #20]	; (8002ef4 <uart3_hal_rx_buffer_init+0x4c>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	601a      	str	r2, [r3, #0]
	RX3_OUT_BUF_num = 0;
 8002ee2:	4b05      	ldr	r3, [pc, #20]	; (8002ef8 <uart3_hal_rx_buffer_init+0x50>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	601a      	str	r2, [r3, #0]
}
 8002ee8:	bf00      	nop
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	200004e8 	.word	0x200004e8
 8002ef0:	20000ce8 	.word	0x20000ce8
 8002ef4:	20000320 	.word	0x20000320
 8002ef8:	20000324 	.word	0x20000324

08002efc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002f00:	4b13      	ldr	r3, [pc, #76]	; (8002f50 <MX_USART1_UART_Init+0x54>)
 8002f02:	4a14      	ldr	r2, [pc, #80]	; (8002f54 <MX_USART1_UART_Init+0x58>)
 8002f04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002f06:	4b12      	ldr	r3, [pc, #72]	; (8002f50 <MX_USART1_UART_Init+0x54>)
 8002f08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f0c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002f0e:	4b10      	ldr	r3, [pc, #64]	; (8002f50 <MX_USART1_UART_Init+0x54>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002f14:	4b0e      	ldr	r3, [pc, #56]	; (8002f50 <MX_USART1_UART_Init+0x54>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002f1a:	4b0d      	ldr	r3, [pc, #52]	; (8002f50 <MX_USART1_UART_Init+0x54>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002f20:	4b0b      	ldr	r3, [pc, #44]	; (8002f50 <MX_USART1_UART_Init+0x54>)
 8002f22:	220c      	movs	r2, #12
 8002f24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f26:	4b0a      	ldr	r3, [pc, #40]	; (8002f50 <MX_USART1_UART_Init+0x54>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f2c:	4b08      	ldr	r3, [pc, #32]	; (8002f50 <MX_USART1_UART_Init+0x54>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002f32:	4807      	ldr	r0, [pc, #28]	; (8002f50 <MX_USART1_UART_Init+0x54>)
 8002f34:	f003 fde2 	bl	8006afc <HAL_UART_Init>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002f3e:	f7fe fe23 	bl	8001b88 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  uart1_hal_rx_buffer_init();
 8002f42:	f7ff ff45 	bl	8002dd0 <uart1_hal_rx_buffer_init>
  uart1_hal_tx_buffer_init();
 8002f46:	f7ff ff2f 	bl	8002da8 <uart1_hal_tx_buffer_init>
  /* USER CODE END USART1_Init 2 */

}
 8002f4a:	bf00      	nop
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	20003948 	.word	0x20003948
 8002f54:	40013800 	.word	0x40013800

08002f58 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002f5c:	4b13      	ldr	r3, [pc, #76]	; (8002fac <MX_USART2_UART_Init+0x54>)
 8002f5e:	4a14      	ldr	r2, [pc, #80]	; (8002fb0 <MX_USART2_UART_Init+0x58>)
 8002f60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002f62:	4b12      	ldr	r3, [pc, #72]	; (8002fac <MX_USART2_UART_Init+0x54>)
 8002f64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f6a:	4b10      	ldr	r3, [pc, #64]	; (8002fac <MX_USART2_UART_Init+0x54>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f70:	4b0e      	ldr	r3, [pc, #56]	; (8002fac <MX_USART2_UART_Init+0x54>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f76:	4b0d      	ldr	r3, [pc, #52]	; (8002fac <MX_USART2_UART_Init+0x54>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f7c:	4b0b      	ldr	r3, [pc, #44]	; (8002fac <MX_USART2_UART_Init+0x54>)
 8002f7e:	220c      	movs	r2, #12
 8002f80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f82:	4b0a      	ldr	r3, [pc, #40]	; (8002fac <MX_USART2_UART_Init+0x54>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f88:	4b08      	ldr	r3, [pc, #32]	; (8002fac <MX_USART2_UART_Init+0x54>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f8e:	4807      	ldr	r0, [pc, #28]	; (8002fac <MX_USART2_UART_Init+0x54>)
 8002f90:	f003 fdb4 	bl	8006afc <HAL_UART_Init>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d001      	beq.n	8002f9e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002f9a:	f7fe fdf5 	bl	8001b88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  uart2_hal_rx_buffer_init();
 8002f9e:	f7ff ff4d 	bl	8002e3c <uart2_hal_rx_buffer_init>
  uart2_hal_tx_buffer_init();
 8002fa2:	f7ff ff37 	bl	8002e14 <uart2_hal_tx_buffer_init>
  /* USER CODE END USART2_Init 2 */

}
 8002fa6:	bf00      	nop
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	20004194 	.word	0x20004194
 8002fb0:	40004400 	.word	0x40004400

08002fb4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002fb8:	4b13      	ldr	r3, [pc, #76]	; (8003008 <MX_USART3_UART_Init+0x54>)
 8002fba:	4a14      	ldr	r2, [pc, #80]	; (800300c <MX_USART3_UART_Init+0x58>)
 8002fbc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002fbe:	4b12      	ldr	r3, [pc, #72]	; (8003008 <MX_USART3_UART_Init+0x54>)
 8002fc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002fc4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002fc6:	4b10      	ldr	r3, [pc, #64]	; (8003008 <MX_USART3_UART_Init+0x54>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002fcc:	4b0e      	ldr	r3, [pc, #56]	; (8003008 <MX_USART3_UART_Init+0x54>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002fd2:	4b0d      	ldr	r3, [pc, #52]	; (8003008 <MX_USART3_UART_Init+0x54>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002fd8:	4b0b      	ldr	r3, [pc, #44]	; (8003008 <MX_USART3_UART_Init+0x54>)
 8002fda:	220c      	movs	r2, #12
 8002fdc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fde:	4b0a      	ldr	r3, [pc, #40]	; (8003008 <MX_USART3_UART_Init+0x54>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fe4:	4b08      	ldr	r3, [pc, #32]	; (8003008 <MX_USART3_UART_Init+0x54>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002fea:	4807      	ldr	r0, [pc, #28]	; (8003008 <MX_USART3_UART_Init+0x54>)
 8002fec:	f003 fd86 	bl	8006afc <HAL_UART_Init>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002ff6:	f7fe fdc7 	bl	8001b88 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  uart3_hal_rx_buffer_init();
 8002ffa:	f7ff ff55 	bl	8002ea8 <uart3_hal_rx_buffer_init>
  uart3_hal_tx_buffer_init();
 8002ffe:	f7ff ff3f 	bl	8002e80 <uart3_hal_tx_buffer_init>
  /* USER CODE END USART3_Init 2 */

}
 8003002:	bf00      	nop
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	200014f0 	.word	0x200014f0
 800300c:	40004800 	.word	0x40004800

08003010 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b08c      	sub	sp, #48	; 0x30
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003018:	f107 0320 	add.w	r3, r7, #32
 800301c:	2200      	movs	r2, #0
 800301e:	601a      	str	r2, [r3, #0]
 8003020:	605a      	str	r2, [r3, #4]
 8003022:	609a      	str	r2, [r3, #8]
 8003024:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a5f      	ldr	r2, [pc, #380]	; (80031a8 <HAL_UART_MspInit+0x198>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d13a      	bne.n	80030a6 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003030:	4b5e      	ldr	r3, [pc, #376]	; (80031ac <HAL_UART_MspInit+0x19c>)
 8003032:	699b      	ldr	r3, [r3, #24]
 8003034:	4a5d      	ldr	r2, [pc, #372]	; (80031ac <HAL_UART_MspInit+0x19c>)
 8003036:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800303a:	6193      	str	r3, [r2, #24]
 800303c:	4b5b      	ldr	r3, [pc, #364]	; (80031ac <HAL_UART_MspInit+0x19c>)
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003044:	61fb      	str	r3, [r7, #28]
 8003046:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003048:	4b58      	ldr	r3, [pc, #352]	; (80031ac <HAL_UART_MspInit+0x19c>)
 800304a:	699b      	ldr	r3, [r3, #24]
 800304c:	4a57      	ldr	r2, [pc, #348]	; (80031ac <HAL_UART_MspInit+0x19c>)
 800304e:	f043 0304 	orr.w	r3, r3, #4
 8003052:	6193      	str	r3, [r2, #24]
 8003054:	4b55      	ldr	r3, [pc, #340]	; (80031ac <HAL_UART_MspInit+0x19c>)
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	f003 0304 	and.w	r3, r3, #4
 800305c:	61bb      	str	r3, [r7, #24]
 800305e:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003060:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003064:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003066:	2302      	movs	r3, #2
 8003068:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800306a:	2303      	movs	r3, #3
 800306c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800306e:	f107 0320 	add.w	r3, r7, #32
 8003072:	4619      	mov	r1, r3
 8003074:	484e      	ldr	r0, [pc, #312]	; (80031b0 <HAL_UART_MspInit+0x1a0>)
 8003076:	f001 f8af 	bl	80041d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800307a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800307e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003080:	2300      	movs	r3, #0
 8003082:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003084:	2300      	movs	r3, #0
 8003086:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003088:	f107 0320 	add.w	r3, r7, #32
 800308c:	4619      	mov	r1, r3
 800308e:	4848      	ldr	r0, [pc, #288]	; (80031b0 <HAL_UART_MspInit+0x1a0>)
 8003090:	f001 f8a2 	bl	80041d8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003094:	2200      	movs	r2, #0
 8003096:	2100      	movs	r1, #0
 8003098:	2025      	movs	r0, #37	; 0x25
 800309a:	f000 ff24 	bl	8003ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800309e:	2025      	movs	r0, #37	; 0x25
 80030a0:	f000 ff3d 	bl	8003f1e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80030a4:	e07c      	b.n	80031a0 <HAL_UART_MspInit+0x190>
  else if(uartHandle->Instance==USART2)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a42      	ldr	r2, [pc, #264]	; (80031b4 <HAL_UART_MspInit+0x1a4>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d138      	bne.n	8003122 <HAL_UART_MspInit+0x112>
    __HAL_RCC_USART2_CLK_ENABLE();
 80030b0:	4b3e      	ldr	r3, [pc, #248]	; (80031ac <HAL_UART_MspInit+0x19c>)
 80030b2:	69db      	ldr	r3, [r3, #28]
 80030b4:	4a3d      	ldr	r2, [pc, #244]	; (80031ac <HAL_UART_MspInit+0x19c>)
 80030b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030ba:	61d3      	str	r3, [r2, #28]
 80030bc:	4b3b      	ldr	r3, [pc, #236]	; (80031ac <HAL_UART_MspInit+0x19c>)
 80030be:	69db      	ldr	r3, [r3, #28]
 80030c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030c4:	617b      	str	r3, [r7, #20]
 80030c6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030c8:	4b38      	ldr	r3, [pc, #224]	; (80031ac <HAL_UART_MspInit+0x19c>)
 80030ca:	699b      	ldr	r3, [r3, #24]
 80030cc:	4a37      	ldr	r2, [pc, #220]	; (80031ac <HAL_UART_MspInit+0x19c>)
 80030ce:	f043 0304 	orr.w	r3, r3, #4
 80030d2:	6193      	str	r3, [r2, #24]
 80030d4:	4b35      	ldr	r3, [pc, #212]	; (80031ac <HAL_UART_MspInit+0x19c>)
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	f003 0304 	and.w	r3, r3, #4
 80030dc:	613b      	str	r3, [r7, #16]
 80030de:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80030e0:	2304      	movs	r3, #4
 80030e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030e4:	2302      	movs	r3, #2
 80030e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80030e8:	2303      	movs	r3, #3
 80030ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030ec:	f107 0320 	add.w	r3, r7, #32
 80030f0:	4619      	mov	r1, r3
 80030f2:	482f      	ldr	r0, [pc, #188]	; (80031b0 <HAL_UART_MspInit+0x1a0>)
 80030f4:	f001 f870 	bl	80041d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80030f8:	2308      	movs	r3, #8
 80030fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030fc:	2300      	movs	r3, #0
 80030fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003100:	2300      	movs	r3, #0
 8003102:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003104:	f107 0320 	add.w	r3, r7, #32
 8003108:	4619      	mov	r1, r3
 800310a:	4829      	ldr	r0, [pc, #164]	; (80031b0 <HAL_UART_MspInit+0x1a0>)
 800310c:	f001 f864 	bl	80041d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003110:	2200      	movs	r2, #0
 8003112:	2100      	movs	r1, #0
 8003114:	2026      	movs	r0, #38	; 0x26
 8003116:	f000 fee6 	bl	8003ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800311a:	2026      	movs	r0, #38	; 0x26
 800311c:	f000 feff 	bl	8003f1e <HAL_NVIC_EnableIRQ>
}
 8003120:	e03e      	b.n	80031a0 <HAL_UART_MspInit+0x190>
  else if(uartHandle->Instance==USART3)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a24      	ldr	r2, [pc, #144]	; (80031b8 <HAL_UART_MspInit+0x1a8>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d139      	bne.n	80031a0 <HAL_UART_MspInit+0x190>
    __HAL_RCC_USART3_CLK_ENABLE();
 800312c:	4b1f      	ldr	r3, [pc, #124]	; (80031ac <HAL_UART_MspInit+0x19c>)
 800312e:	69db      	ldr	r3, [r3, #28]
 8003130:	4a1e      	ldr	r2, [pc, #120]	; (80031ac <HAL_UART_MspInit+0x19c>)
 8003132:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003136:	61d3      	str	r3, [r2, #28]
 8003138:	4b1c      	ldr	r3, [pc, #112]	; (80031ac <HAL_UART_MspInit+0x19c>)
 800313a:	69db      	ldr	r3, [r3, #28]
 800313c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003140:	60fb      	str	r3, [r7, #12]
 8003142:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003144:	4b19      	ldr	r3, [pc, #100]	; (80031ac <HAL_UART_MspInit+0x19c>)
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	4a18      	ldr	r2, [pc, #96]	; (80031ac <HAL_UART_MspInit+0x19c>)
 800314a:	f043 0308 	orr.w	r3, r3, #8
 800314e:	6193      	str	r3, [r2, #24]
 8003150:	4b16      	ldr	r3, [pc, #88]	; (80031ac <HAL_UART_MspInit+0x19c>)
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	f003 0308 	and.w	r3, r3, #8
 8003158:	60bb      	str	r3, [r7, #8]
 800315a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800315c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003160:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003162:	2302      	movs	r3, #2
 8003164:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003166:	2303      	movs	r3, #3
 8003168:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800316a:	f107 0320 	add.w	r3, r7, #32
 800316e:	4619      	mov	r1, r3
 8003170:	4812      	ldr	r0, [pc, #72]	; (80031bc <HAL_UART_MspInit+0x1ac>)
 8003172:	f001 f831 	bl	80041d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003176:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800317a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800317c:	2300      	movs	r3, #0
 800317e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003180:	2300      	movs	r3, #0
 8003182:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003184:	f107 0320 	add.w	r3, r7, #32
 8003188:	4619      	mov	r1, r3
 800318a:	480c      	ldr	r0, [pc, #48]	; (80031bc <HAL_UART_MspInit+0x1ac>)
 800318c:	f001 f824 	bl	80041d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003190:	2200      	movs	r2, #0
 8003192:	2100      	movs	r1, #0
 8003194:	2027      	movs	r0, #39	; 0x27
 8003196:	f000 fea6 	bl	8003ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800319a:	2027      	movs	r0, #39	; 0x27
 800319c:	f000 febf 	bl	8003f1e <HAL_NVIC_EnableIRQ>
}
 80031a0:	bf00      	nop
 80031a2:	3730      	adds	r7, #48	; 0x30
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	40013800 	.word	0x40013800
 80031ac:	40021000 	.word	0x40021000
 80031b0:	40010800 	.word	0x40010800
 80031b4:	40004400 	.word	0x40004400
 80031b8:	40004800 	.word	0x40004800
 80031bc:	40010c00 	.word	0x40010c00

080031c0 <_write>:
  }
}

/* USER CODE BEGIN 1 */
int _write(int file, unsigned char *p, int len)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	607a      	str	r2, [r7, #4]
   uart1_hal_putchar(p, len);
 80031cc:	6879      	ldr	r1, [r7, #4]
 80031ce:	68b8      	ldr	r0, [r7, #8]
 80031d0:	f000 f9b8 	bl	8003544 <uart1_hal_putchar>
   setvbuf(stdout, NULL, _IONBF, 0);
 80031d4:	4b07      	ldr	r3, [pc, #28]	; (80031f4 <_write+0x34>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	6898      	ldr	r0, [r3, #8]
 80031da:	2300      	movs	r3, #0
 80031dc:	2202      	movs	r2, #2
 80031de:	2100      	movs	r1, #0
 80031e0:	f004 fe52 	bl	8007e88 <setvbuf>
   HAL_Delay(10);
 80031e4:	200a      	movs	r0, #10
 80031e6:	f000 fd83 	bl	8003cf0 <HAL_Delay>
   return len;
 80031ea:	687b      	ldr	r3, [r7, #4]
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3710      	adds	r7, #16
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	2000010c 	.word	0x2000010c

080031f8 <uart2_hal_getchar>:
	}
	return 1;
}

uint8_t uart2_hal_getchar(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
	if(uart2_hal_rx.input_p == uart2_hal_rx.output_p){
 80031fc:	4b20      	ldr	r3, [pc, #128]	; (8003280 <uart2_hal_getchar+0x88>)
 80031fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003202:	3302      	adds	r3, #2
 8003204:	881b      	ldrh	r3, [r3, #0]
 8003206:	b29a      	uxth	r2, r3
 8003208:	4b1d      	ldr	r3, [pc, #116]	; (8003280 <uart2_hal_getchar+0x88>)
 800320a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800320e:	3304      	adds	r3, #4
 8003210:	881b      	ldrh	r3, [r3, #0]
 8003212:	b29b      	uxth	r3, r3
 8003214:	429a      	cmp	r2, r3
 8003216:	d101      	bne.n	800321c <uart2_hal_getchar+0x24>
		return 0;
 8003218:	2300      	movs	r3, #0
 800321a:	e02f      	b.n	800327c <uart2_hal_getchar+0x84>
	}
	uart2_hal_rx.rxd = uart2_hal_rx.buffer[RX2_OUT_BUF_num][uart2_hal_rx.output_p++];
 800321c:	4b19      	ldr	r3, [pc, #100]	; (8003284 <uart2_hal_getchar+0x8c>)
 800321e:	6819      	ldr	r1, [r3, #0]
 8003220:	4b17      	ldr	r3, [pc, #92]	; (8003280 <uart2_hal_getchar+0x88>)
 8003222:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003226:	3304      	adds	r3, #4
 8003228:	881b      	ldrh	r3, [r3, #0]
 800322a:	b29a      	uxth	r2, r3
 800322c:	1c53      	adds	r3, r2, #1
 800322e:	b298      	uxth	r0, r3
 8003230:	4b13      	ldr	r3, [pc, #76]	; (8003280 <uart2_hal_getchar+0x88>)
 8003232:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003236:	3304      	adds	r3, #4
 8003238:	8018      	strh	r0, [r3, #0]
 800323a:	4610      	mov	r0, r2
 800323c:	4a10      	ldr	r2, [pc, #64]	; (8003280 <uart2_hal_getchar+0x88>)
 800323e:	028b      	lsls	r3, r1, #10
 8003240:	4413      	add	r3, r2
 8003242:	4403      	add	r3, r0
 8003244:	781a      	ldrb	r2, [r3, #0]
 8003246:	4b0e      	ldr	r3, [pc, #56]	; (8003280 <uart2_hal_getchar+0x88>)
 8003248:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800324c:	3301      	adds	r3, #1
 800324e:	701a      	strb	r2, [r3, #0]
	if(uart2_hal_rx.output_p >= UART_RX_BUFFER_SIZE){
 8003250:	4b0b      	ldr	r3, [pc, #44]	; (8003280 <uart2_hal_getchar+0x88>)
 8003252:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003256:	3304      	adds	r3, #4
 8003258:	881b      	ldrh	r3, [r3, #0]
 800325a:	b29b      	uxth	r3, r3
 800325c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003260:	d30b      	bcc.n	800327a <uart2_hal_getchar+0x82>
		replace_Buff_uart2(1, RX2_OUT_BUF_num);
 8003262:	4b08      	ldr	r3, [pc, #32]	; (8003284 <uart2_hal_getchar+0x8c>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4619      	mov	r1, r3
 8003268:	2001      	movs	r0, #1
 800326a:	f000 f8eb 	bl	8003444 <replace_Buff_uart2>
		uart2_hal_rx.output_p = 0;
 800326e:	4b04      	ldr	r3, [pc, #16]	; (8003280 <uart2_hal_getchar+0x88>)
 8003270:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003274:	3304      	adds	r3, #4
 8003276:	2200      	movs	r2, #0
 8003278:	801a      	strh	r2, [r3, #0]
	}
	return 1;
 800327a:	2301      	movs	r3, #1
}
 800327c:	4618      	mov	r0, r3
 800327e:	bd80      	pop	{r7, pc}
 8003280:	20001534 	.word	0x20001534
 8003284:	2000031c 	.word	0x2000031c

08003288 <uart2_hal_rx_monitor>:

int uart2_hal_rx_monitor(void)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	af00      	add	r7, sp, #0
	while(uart2_hal_getchar() != 0){
 800328c:	e015      	b.n	80032ba <uart2_hal_rx_monitor+0x32>
	    if(strstr((char*)uart2_hal_rx.buffer, "}}}")) {
 800328e:	490f      	ldr	r1, [pc, #60]	; (80032cc <uart2_hal_rx_monitor+0x44>)
 8003290:	480f      	ldr	r0, [pc, #60]	; (80032d0 <uart2_hal_rx_monitor+0x48>)
 8003292:	f004 fedf 	bl	8008054 <strstr>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d00e      	beq.n	80032ba <uart2_hal_rx_monitor+0x32>
	    	HAL_Delay(100);
 800329c:	2064      	movs	r0, #100	; 0x64
 800329e:	f000 fd27 	bl	8003cf0 <HAL_Delay>
			memcpy(uart2_hal_rx.rx_data, uart2_hal_rx.buffer, sizeof(uart2_hal_rx.buffer));
 80032a2:	4b0b      	ldr	r3, [pc, #44]	; (80032d0 <uart2_hal_rx_monitor+0x48>)
 80032a4:	4a0a      	ldr	r2, [pc, #40]	; (80032d0 <uart2_hal_rx_monitor+0x48>)
 80032a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032aa:	4611      	mov	r1, r2
 80032ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80032b0:	4618      	mov	r0, r3
 80032b2:	f004 f8e5 	bl	8007480 <memcpy>
//	    	printf("%s\n", uart2_hal_rx.rx_data[0]);     erased 21/06/21 14:21
//		    printf(">> RECEIVED OK\r\n\n");     erased 21/06/21 14:21
		    return 2;
 80032b6:	2302      	movs	r3, #2
 80032b8:	e005      	b.n	80032c6 <uart2_hal_rx_monitor+0x3e>
	while(uart2_hal_getchar() != 0){
 80032ba:	f7ff ff9d 	bl	80031f8 <uart2_hal_getchar>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d1e4      	bne.n	800328e <uart2_hal_rx_monitor+0x6>
	    }
	}
	return 1;
 80032c4:	2301      	movs	r3, #1
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	0800a890 	.word	0x0800a890
 80032d0:	20001534 	.word	0x20001534

080032d4 <uart3_hal_getchar>:

uint8_t uart3_hal_getchar(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	af00      	add	r7, sp, #0
	if(uart3_hal_rx.input_p == uart3_hal_rx.output_p){
 80032d8:	4b20      	ldr	r3, [pc, #128]	; (800335c <uart3_hal_getchar+0x88>)
 80032da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032de:	3302      	adds	r3, #2
 80032e0:	881b      	ldrh	r3, [r3, #0]
 80032e2:	b29a      	uxth	r2, r3
 80032e4:	4b1d      	ldr	r3, [pc, #116]	; (800335c <uart3_hal_getchar+0x88>)
 80032e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032ea:	3304      	adds	r3, #4
 80032ec:	881b      	ldrh	r3, [r3, #0]
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d101      	bne.n	80032f8 <uart3_hal_getchar+0x24>
		return 0;
 80032f4:	2300      	movs	r3, #0
 80032f6:	e02f      	b.n	8003358 <uart3_hal_getchar+0x84>
	}
	uart3_hal_rx.rxd = uart3_hal_rx.buffer[RX3_OUT_BUF_num][uart3_hal_rx.output_p++];
 80032f8:	4b19      	ldr	r3, [pc, #100]	; (8003360 <uart3_hal_getchar+0x8c>)
 80032fa:	6819      	ldr	r1, [r3, #0]
 80032fc:	4b17      	ldr	r3, [pc, #92]	; (800335c <uart3_hal_getchar+0x88>)
 80032fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003302:	3304      	adds	r3, #4
 8003304:	881b      	ldrh	r3, [r3, #0]
 8003306:	b29a      	uxth	r2, r3
 8003308:	1c53      	adds	r3, r2, #1
 800330a:	b298      	uxth	r0, r3
 800330c:	4b13      	ldr	r3, [pc, #76]	; (800335c <uart3_hal_getchar+0x88>)
 800330e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003312:	3304      	adds	r3, #4
 8003314:	8018      	strh	r0, [r3, #0]
 8003316:	4610      	mov	r0, r2
 8003318:	4a10      	ldr	r2, [pc, #64]	; (800335c <uart3_hal_getchar+0x88>)
 800331a:	028b      	lsls	r3, r1, #10
 800331c:	4413      	add	r3, r2
 800331e:	4403      	add	r3, r0
 8003320:	781a      	ldrb	r2, [r3, #0]
 8003322:	4b0e      	ldr	r3, [pc, #56]	; (800335c <uart3_hal_getchar+0x88>)
 8003324:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003328:	3301      	adds	r3, #1
 800332a:	701a      	strb	r2, [r3, #0]
	if(uart3_hal_rx.output_p >= UART_RX_BUFFER_SIZE){
 800332c:	4b0b      	ldr	r3, [pc, #44]	; (800335c <uart3_hal_getchar+0x88>)
 800332e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003332:	3304      	adds	r3, #4
 8003334:	881b      	ldrh	r3, [r3, #0]
 8003336:	b29b      	uxth	r3, r3
 8003338:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800333c:	d30b      	bcc.n	8003356 <uart3_hal_getchar+0x82>
		replace_Buff_uart3(1, RX3_OUT_BUF_num);
 800333e:	4b08      	ldr	r3, [pc, #32]	; (8003360 <uart3_hal_getchar+0x8c>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4619      	mov	r1, r3
 8003344:	2001      	movs	r0, #1
 8003346:	f000 f8bd 	bl	80034c4 <replace_Buff_uart3>
		uart3_hal_rx.output_p = 0;
 800334a:	4b04      	ldr	r3, [pc, #16]	; (800335c <uart3_hal_getchar+0x88>)
 800334c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003350:	3304      	adds	r3, #4
 8003352:	2200      	movs	r2, #0
 8003354:	801a      	strh	r2, [r3, #0]
	}
	return 1;
 8003356:	2301      	movs	r3, #1
}
 8003358:	4618      	mov	r0, r3
 800335a:	bd80      	pop	{r7, pc}
 800335c:	200004e8 	.word	0x200004e8
 8003360:	20000324 	.word	0x20000324

08003364 <uart3_hal_rx_monitor>:

int uart3_hal_rx_monitor(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
	int i;
	while(uart3_hal_getchar() != 0){
 800336a:	e01d      	b.n	80033a8 <uart3_hal_rx_monitor+0x44>
	    if(uart3_hal_rx.rxd == '@') {
 800336c:	4b13      	ldr	r3, [pc, #76]	; (80033bc <uart3_hal_rx_monitor+0x58>)
 800336e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003372:	3301      	adds	r3, #1
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	2b40      	cmp	r3, #64	; 0x40
 8003378:	d116      	bne.n	80033a8 <uart3_hal_rx_monitor+0x44>
	    	for(i=0; i<RX2_OUT_BUF_num+1;i++){
 800337a:	2300      	movs	r3, #0
 800337c:	607b      	str	r3, [r7, #4]
 800337e:	e00c      	b.n	800339a <uart3_hal_rx_monitor+0x36>
				memcpy(uart3_hal_rx.rx_data, uart3_hal_rx.buffer, sizeof(uart3_hal_rx.buffer));
 8003380:	4b0e      	ldr	r3, [pc, #56]	; (80033bc <uart3_hal_rx_monitor+0x58>)
 8003382:	4a0e      	ldr	r2, [pc, #56]	; (80033bc <uart3_hal_rx_monitor+0x58>)
 8003384:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003388:	4611      	mov	r1, r2
 800338a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800338e:	4618      	mov	r0, r3
 8003390:	f004 f876 	bl	8007480 <memcpy>
	    	for(i=0; i<RX2_OUT_BUF_num+1;i++){
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	3301      	adds	r3, #1
 8003398:	607b      	str	r3, [r7, #4]
 800339a:	4b09      	ldr	r3, [pc, #36]	; (80033c0 <uart3_hal_rx_monitor+0x5c>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	dded      	ble.n	8003380 <uart3_hal_rx_monitor+0x1c>
			}
//	    	printf("Received Data From Bluetooth : %s\r\n", uart3_hal_rx.rx_data[0]);   erased 21/06/21 07:50
		    return 1;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e005      	b.n	80033b4 <uart3_hal_rx_monitor+0x50>
	while(uart3_hal_getchar() != 0){
 80033a8:	f7ff ff94 	bl	80032d4 <uart3_hal_getchar>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d1dc      	bne.n	800336c <uart3_hal_rx_monitor+0x8>
	    }
	}
	return 0;
 80033b2:	2300      	movs	r3, #0
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3708      	adds	r7, #8
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	200004e8 	.word	0x200004e8
 80033c0:	2000031c 	.word	0x2000031c

080033c4 <replace_Buff_uart1>:
//	}
//	return 3;
//}

void replace_Buff_uart1(int putcase, int num)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
	if(putcase == 0){
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d113      	bne.n	80033fc <replace_Buff_uart1+0x38>
		switch(num)
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d003      	beq.n	80033e2 <replace_Buff_uart1+0x1e>
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d006      	beq.n	80033ee <replace_Buff_uart1+0x2a>
			case 1:
				printf("\r\nUart1_IN_OVERFLOW\r\n");
				RX1_IN_BUF_num = 0;
				break;
			default:
				break;
 80033e0:	e024      	b.n	800342c <replace_Buff_uart1+0x68>
				RX1_IN_BUF_num++;
 80033e2:	4b14      	ldr	r3, [pc, #80]	; (8003434 <replace_Buff_uart1+0x70>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	3301      	adds	r3, #1
 80033e8:	4a12      	ldr	r2, [pc, #72]	; (8003434 <replace_Buff_uart1+0x70>)
 80033ea:	6013      	str	r3, [r2, #0]
				break;
 80033ec:	e01e      	b.n	800342c <replace_Buff_uart1+0x68>
				printf("\r\nUart1_IN_OVERFLOW\r\n");
 80033ee:	4812      	ldr	r0, [pc, #72]	; (8003438 <replace_Buff_uart1+0x74>)
 80033f0:	f004 fd42 	bl	8007e78 <puts>
				RX1_IN_BUF_num = 0;
 80033f4:	4b0f      	ldr	r3, [pc, #60]	; (8003434 <replace_Buff_uart1+0x70>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	601a      	str	r2, [r3, #0]
				break;
 80033fa:	e017      	b.n	800342c <replace_Buff_uart1+0x68>
		}
	}
	else if(putcase == 1){
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d113      	bne.n	800342a <replace_Buff_uart1+0x66>
		switch(num)
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d003      	beq.n	8003410 <replace_Buff_uart1+0x4c>
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	2b01      	cmp	r3, #1
 800340c:	d006      	beq.n	800341c <replace_Buff_uart1+0x58>
			case 1:
				printf("\r\nUart1_OUT_OVERFLOW\r\n");
				RX1_OUT_BUF_num = 0;
				break;
			default:
				break;
 800340e:	e00d      	b.n	800342c <replace_Buff_uart1+0x68>
				RX1_OUT_BUF_num++;
 8003410:	4b0a      	ldr	r3, [pc, #40]	; (800343c <replace_Buff_uart1+0x78>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	3301      	adds	r3, #1
 8003416:	4a09      	ldr	r2, [pc, #36]	; (800343c <replace_Buff_uart1+0x78>)
 8003418:	6013      	str	r3, [r2, #0]
				break;
 800341a:	e007      	b.n	800342c <replace_Buff_uart1+0x68>
				printf("\r\nUart1_OUT_OVERFLOW\r\n");
 800341c:	4808      	ldr	r0, [pc, #32]	; (8003440 <replace_Buff_uart1+0x7c>)
 800341e:	f004 fd2b 	bl	8007e78 <puts>
				RX1_OUT_BUF_num = 0;
 8003422:	4b06      	ldr	r3, [pc, #24]	; (800343c <replace_Buff_uart1+0x78>)
 8003424:	2200      	movs	r2, #0
 8003426:	601a      	str	r2, [r3, #0]
				break;
 8003428:	e000      	b.n	800342c <replace_Buff_uart1+0x68>
		}
	}
 800342a:	bf00      	nop
	return;
 800342c:	bf00      	nop
}
 800342e:	3708      	adds	r7, #8
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	20000310 	.word	0x20000310
 8003438:	0800a894 	.word	0x0800a894
 800343c:	20000314 	.word	0x20000314
 8003440:	0800a8ac 	.word	0x0800a8ac

08003444 <replace_Buff_uart2>:

void replace_Buff_uart2(int putcase, int num)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
	if(putcase == 0){
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d113      	bne.n	800347c <replace_Buff_uart2+0x38>
		switch(num)
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d003      	beq.n	8003462 <replace_Buff_uart2+0x1e>
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	2b01      	cmp	r3, #1
 800345e:	d006      	beq.n	800346e <replace_Buff_uart2+0x2a>
			case 1:
				printf("\r\nUart2_IN_OVERFLOW\r\n");
				RX2_IN_BUF_num = 0;
				break;
			default:
				break;
 8003460:	e024      	b.n	80034ac <replace_Buff_uart2+0x68>
				RX2_IN_BUF_num++;
 8003462:	4b14      	ldr	r3, [pc, #80]	; (80034b4 <replace_Buff_uart2+0x70>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	3301      	adds	r3, #1
 8003468:	4a12      	ldr	r2, [pc, #72]	; (80034b4 <replace_Buff_uart2+0x70>)
 800346a:	6013      	str	r3, [r2, #0]
				break;
 800346c:	e01e      	b.n	80034ac <replace_Buff_uart2+0x68>
				printf("\r\nUart2_IN_OVERFLOW\r\n");
 800346e:	4812      	ldr	r0, [pc, #72]	; (80034b8 <replace_Buff_uart2+0x74>)
 8003470:	f004 fd02 	bl	8007e78 <puts>
				RX2_IN_BUF_num = 0;
 8003474:	4b0f      	ldr	r3, [pc, #60]	; (80034b4 <replace_Buff_uart2+0x70>)
 8003476:	2200      	movs	r2, #0
 8003478:	601a      	str	r2, [r3, #0]
				break;
 800347a:	e017      	b.n	80034ac <replace_Buff_uart2+0x68>
		}
	}
	else if(putcase == 1){
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2b01      	cmp	r3, #1
 8003480:	d113      	bne.n	80034aa <replace_Buff_uart2+0x66>
		switch(num)
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d003      	beq.n	8003490 <replace_Buff_uart2+0x4c>
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	2b01      	cmp	r3, #1
 800348c:	d006      	beq.n	800349c <replace_Buff_uart2+0x58>
			case 1:
				printf("\r\nUart2_OUT_OVERFLOW\r\n");
				RX2_OUT_BUF_num = 0;
				break;
			default:
				break;
 800348e:	e00d      	b.n	80034ac <replace_Buff_uart2+0x68>
				RX2_OUT_BUF_num++;
 8003490:	4b0a      	ldr	r3, [pc, #40]	; (80034bc <replace_Buff_uart2+0x78>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	3301      	adds	r3, #1
 8003496:	4a09      	ldr	r2, [pc, #36]	; (80034bc <replace_Buff_uart2+0x78>)
 8003498:	6013      	str	r3, [r2, #0]
				break;
 800349a:	e007      	b.n	80034ac <replace_Buff_uart2+0x68>
				printf("\r\nUart2_OUT_OVERFLOW\r\n");
 800349c:	4808      	ldr	r0, [pc, #32]	; (80034c0 <replace_Buff_uart2+0x7c>)
 800349e:	f004 fceb 	bl	8007e78 <puts>
				RX2_OUT_BUF_num = 0;
 80034a2:	4b06      	ldr	r3, [pc, #24]	; (80034bc <replace_Buff_uart2+0x78>)
 80034a4:	2200      	movs	r2, #0
 80034a6:	601a      	str	r2, [r3, #0]
				break;
 80034a8:	e000      	b.n	80034ac <replace_Buff_uart2+0x68>
		}
	}
 80034aa:	bf00      	nop
	return;
 80034ac:	bf00      	nop
}
 80034ae:	3708      	adds	r7, #8
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	20000318 	.word	0x20000318
 80034b8:	0800a8c4 	.word	0x0800a8c4
 80034bc:	2000031c 	.word	0x2000031c
 80034c0:	0800a8dc 	.word	0x0800a8dc

080034c4 <replace_Buff_uart3>:

void replace_Buff_uart3(int putcase, int num)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6039      	str	r1, [r7, #0]
	if(putcase == 0){
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d113      	bne.n	80034fc <replace_Buff_uart3+0x38>
		switch(num)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d003      	beq.n	80034e2 <replace_Buff_uart3+0x1e>
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d006      	beq.n	80034ee <replace_Buff_uart3+0x2a>
			case 1:
				printf("\r\nUart3_IN_OVERFLOW\r\n");
				RX3_IN_BUF_num = 0;
				break;
			default:
				break;
 80034e0:	e024      	b.n	800352c <replace_Buff_uart3+0x68>
				RX3_IN_BUF_num++;
 80034e2:	4b14      	ldr	r3, [pc, #80]	; (8003534 <replace_Buff_uart3+0x70>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	3301      	adds	r3, #1
 80034e8:	4a12      	ldr	r2, [pc, #72]	; (8003534 <replace_Buff_uart3+0x70>)
 80034ea:	6013      	str	r3, [r2, #0]
				break;
 80034ec:	e01e      	b.n	800352c <replace_Buff_uart3+0x68>
				printf("\r\nUart3_IN_OVERFLOW\r\n");
 80034ee:	4812      	ldr	r0, [pc, #72]	; (8003538 <replace_Buff_uart3+0x74>)
 80034f0:	f004 fcc2 	bl	8007e78 <puts>
				RX3_IN_BUF_num = 0;
 80034f4:	4b0f      	ldr	r3, [pc, #60]	; (8003534 <replace_Buff_uart3+0x70>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	601a      	str	r2, [r3, #0]
				break;
 80034fa:	e017      	b.n	800352c <replace_Buff_uart3+0x68>
		}
	}
	else if(putcase == 1){
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d113      	bne.n	800352a <replace_Buff_uart3+0x66>
		switch(num)
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d003      	beq.n	8003510 <replace_Buff_uart3+0x4c>
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	2b01      	cmp	r3, #1
 800350c:	d006      	beq.n	800351c <replace_Buff_uart3+0x58>
			case 1:
				printf("\r\nUart3_OUT_OVERFLOW\r\n");
				RX3_OUT_BUF_num = 0;
				break;
			default:
				break;
 800350e:	e00d      	b.n	800352c <replace_Buff_uart3+0x68>
				RX3_OUT_BUF_num++;
 8003510:	4b0a      	ldr	r3, [pc, #40]	; (800353c <replace_Buff_uart3+0x78>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	3301      	adds	r3, #1
 8003516:	4a09      	ldr	r2, [pc, #36]	; (800353c <replace_Buff_uart3+0x78>)
 8003518:	6013      	str	r3, [r2, #0]
				break;
 800351a:	e007      	b.n	800352c <replace_Buff_uart3+0x68>
				printf("\r\nUart3_OUT_OVERFLOW\r\n");
 800351c:	4808      	ldr	r0, [pc, #32]	; (8003540 <replace_Buff_uart3+0x7c>)
 800351e:	f004 fcab 	bl	8007e78 <puts>
				RX3_OUT_BUF_num = 0;
 8003522:	4b06      	ldr	r3, [pc, #24]	; (800353c <replace_Buff_uart3+0x78>)
 8003524:	2200      	movs	r2, #0
 8003526:	601a      	str	r2, [r3, #0]
				break;
 8003528:	e000      	b.n	800352c <replace_Buff_uart3+0x68>
		}
	}
 800352a:	bf00      	nop
	return;
 800352c:	bf00      	nop
}
 800352e:	3708      	adds	r7, #8
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	20000320 	.word	0x20000320
 8003538:	0800a8f4 	.word	0x0800a8f4
 800353c:	20000324 	.word	0x20000324
 8003540:	0800a90c 	.word	0x0800a90c

08003544 <uart1_hal_putchar>:

void uart1_hal_putchar(uint8_t *data, int len)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
	uint16_t size = len;
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	81fb      	strh	r3, [r7, #14]
	uint32_t reg = READ_REG(huart1.Instance->CR1);
 8003552:	4b37      	ldr	r3, [pc, #220]	; (8003630 <uart1_hal_putchar+0xec>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	60bb      	str	r3, [r7, #8]

	__HAL_UART_DISABLE_IT(&huart1, UART_IT_TXE);
 800355a:	4b35      	ldr	r3, [pc, #212]	; (8003630 <uart1_hal_putchar+0xec>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68da      	ldr	r2, [r3, #12]
 8003560:	4b33      	ldr	r3, [pc, #204]	; (8003630 <uart1_hal_putchar+0xec>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003568:	60da      	str	r2, [r3, #12]
	__HAL_UART_DISABLE_IT(&huart1, UART_IT_TC);
 800356a:	4b31      	ldr	r3, [pc, #196]	; (8003630 <uart1_hal_putchar+0xec>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68da      	ldr	r2, [r3, #12]
 8003570:	4b2f      	ldr	r3, [pc, #188]	; (8003630 <uart1_hal_putchar+0xec>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003578:	60da      	str	r2, [r3, #12]
	if((uart1_hal_tx.input_p + len) >= UART_TX_BUFFER_SIZE){
 800357a:	4b2e      	ldr	r3, [pc, #184]	; (8003634 <uart1_hal_putchar+0xf0>)
 800357c:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8003580:	b29b      	uxth	r3, r3
 8003582:	461a      	mov	r2, r3
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	4413      	add	r3, r2
 8003588:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800358c:	db25      	blt.n	80035da <uart1_hal_putchar+0x96>
		size = UART_TX_BUFFER_SIZE - uart1_hal_tx.input_p;
 800358e:	4b29      	ldr	r3, [pc, #164]	; (8003634 <uart1_hal_putchar+0xf0>)
 8003590:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8003594:	b29b      	uxth	r3, r3
 8003596:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 800359a:	81fb      	strh	r3, [r7, #14]
		memcpy(&uart1_hal_tx.buffer[uart1_hal_tx.input_p], data, size);
 800359c:	4b25      	ldr	r3, [pc, #148]	; (8003634 <uart1_hal_putchar+0xf0>)
 800359e:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	461a      	mov	r2, r3
 80035a6:	4b23      	ldr	r3, [pc, #140]	; (8003634 <uart1_hal_putchar+0xf0>)
 80035a8:	4413      	add	r3, r2
 80035aa:	89fa      	ldrh	r2, [r7, #14]
 80035ac:	6879      	ldr	r1, [r7, #4]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f003 ff66 	bl	8007480 <memcpy>
		memcpy(&uart1_hal_tx.buffer[0], &data[size], len - size);
 80035b4:	89fb      	ldrh	r3, [r7, #14]
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	18d1      	adds	r1, r2, r3
 80035ba:	89fb      	ldrh	r3, [r7, #14]
 80035bc:	683a      	ldr	r2, [r7, #0]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	461a      	mov	r2, r3
 80035c2:	481c      	ldr	r0, [pc, #112]	; (8003634 <uart1_hal_putchar+0xf0>)
 80035c4:	f003 ff5c 	bl	8007480 <memcpy>
		uart1_hal_tx.input_p = len - size;
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	b29a      	uxth	r2, r3
 80035cc:	89fb      	ldrh	r3, [r7, #14]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	b29a      	uxth	r2, r3
 80035d2:	4b18      	ldr	r3, [pc, #96]	; (8003634 <uart1_hal_putchar+0xf0>)
 80035d4:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
 80035d8:	e015      	b.n	8003606 <uart1_hal_putchar+0xc2>
	}
	else{
		memcpy(&uart1_hal_tx.buffer[uart1_hal_tx.input_p], data, size);
 80035da:	4b16      	ldr	r3, [pc, #88]	; (8003634 <uart1_hal_putchar+0xf0>)
 80035dc:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	461a      	mov	r2, r3
 80035e4:	4b13      	ldr	r3, [pc, #76]	; (8003634 <uart1_hal_putchar+0xf0>)
 80035e6:	4413      	add	r3, r2
 80035e8:	89fa      	ldrh	r2, [r7, #14]
 80035ea:	6879      	ldr	r1, [r7, #4]
 80035ec:	4618      	mov	r0, r3
 80035ee:	f003 ff47 	bl	8007480 <memcpy>
		uart1_hal_tx.input_p += size;
 80035f2:	4b10      	ldr	r3, [pc, #64]	; (8003634 <uart1_hal_putchar+0xf0>)
 80035f4:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 80035f8:	b29a      	uxth	r2, r3
 80035fa:	89fb      	ldrh	r3, [r7, #14]
 80035fc:	4413      	add	r3, r2
 80035fe:	b29a      	uxth	r2, r3
 8003600:	4b0c      	ldr	r3, [pc, #48]	; (8003634 <uart1_hal_putchar+0xf0>)
 8003602:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
	}
	WRITE_REG(huart1.Instance->CR1, reg);
 8003606:	4b0a      	ldr	r3, [pc, #40]	; (8003630 <uart1_hal_putchar+0xec>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68ba      	ldr	r2, [r7, #8]
 800360c:	60da      	str	r2, [r3, #12]
	HAL_UART_Transmit_IT(&huart1, &uart1_hal_tx.buffer[uart1_hal_tx.output_p], size);
 800360e:	4b09      	ldr	r3, [pc, #36]	; (8003634 <uart1_hal_putchar+0xf0>)
 8003610:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8003614:	b29b      	uxth	r3, r3
 8003616:	461a      	mov	r2, r3
 8003618:	4b06      	ldr	r3, [pc, #24]	; (8003634 <uart1_hal_putchar+0xf0>)
 800361a:	4413      	add	r3, r2
 800361c:	89fa      	ldrh	r2, [r7, #14]
 800361e:	4619      	mov	r1, r3
 8003620:	4803      	ldr	r0, [pc, #12]	; (8003630 <uart1_hal_putchar+0xec>)
 8003622:	f003 fab8 	bl	8006b96 <HAL_UART_Transmit_IT>
}
 8003626:	bf00      	nop
 8003628:	3710      	adds	r7, #16
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	20003948 	.word	0x20003948
 8003634:	2000398c 	.word	0x2000398c

08003638 <uart2_hal_putchar>:

void uart2_hal_putchar(uint8_t *data, int len)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
	uint16_t size = len;
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	81fb      	strh	r3, [r7, #14]
	uint32_t reg = READ_REG(huart2.Instance->CR1);
 8003646:	4b37      	ldr	r3, [pc, #220]	; (8003724 <uart2_hal_putchar+0xec>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	60bb      	str	r3, [r7, #8]

	__HAL_UART_DISABLE_IT(&huart2, UART_IT_TXE);
 800364e:	4b35      	ldr	r3, [pc, #212]	; (8003724 <uart2_hal_putchar+0xec>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68da      	ldr	r2, [r3, #12]
 8003654:	4b33      	ldr	r3, [pc, #204]	; (8003724 <uart2_hal_putchar+0xec>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800365c:	60da      	str	r2, [r3, #12]
	__HAL_UART_DISABLE_IT(&huart2, UART_IT_TC);
 800365e:	4b31      	ldr	r3, [pc, #196]	; (8003724 <uart2_hal_putchar+0xec>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	68da      	ldr	r2, [r3, #12]
 8003664:	4b2f      	ldr	r3, [pc, #188]	; (8003724 <uart2_hal_putchar+0xec>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800366c:	60da      	str	r2, [r3, #12]
	if((uart2_hal_tx.input_p + len) >= UART_TX_BUFFER_SIZE){
 800366e:	4b2e      	ldr	r3, [pc, #184]	; (8003728 <uart2_hal_putchar+0xf0>)
 8003670:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8003674:	b29b      	uxth	r3, r3
 8003676:	461a      	mov	r2, r3
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	4413      	add	r3, r2
 800367c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003680:	db25      	blt.n	80036ce <uart2_hal_putchar+0x96>
		size = UART_TX_BUFFER_SIZE - uart2_hal_tx.input_p;
 8003682:	4b29      	ldr	r3, [pc, #164]	; (8003728 <uart2_hal_putchar+0xf0>)
 8003684:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8003688:	b29b      	uxth	r3, r3
 800368a:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 800368e:	81fb      	strh	r3, [r7, #14]
		memcpy(&uart2_hal_tx.buffer[uart2_hal_tx.input_p], data, size);
 8003690:	4b25      	ldr	r3, [pc, #148]	; (8003728 <uart2_hal_putchar+0xf0>)
 8003692:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8003696:	b29b      	uxth	r3, r3
 8003698:	461a      	mov	r2, r3
 800369a:	4b23      	ldr	r3, [pc, #140]	; (8003728 <uart2_hal_putchar+0xf0>)
 800369c:	4413      	add	r3, r2
 800369e:	89fa      	ldrh	r2, [r7, #14]
 80036a0:	6879      	ldr	r1, [r7, #4]
 80036a2:	4618      	mov	r0, r3
 80036a4:	f003 feec 	bl	8007480 <memcpy>
		memcpy(&uart2_hal_tx.buffer[0], &data[size], len - size);
 80036a8:	89fb      	ldrh	r3, [r7, #14]
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	18d1      	adds	r1, r2, r3
 80036ae:	89fb      	ldrh	r3, [r7, #14]
 80036b0:	683a      	ldr	r2, [r7, #0]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	461a      	mov	r2, r3
 80036b6:	481c      	ldr	r0, [pc, #112]	; (8003728 <uart2_hal_putchar+0xf0>)
 80036b8:	f003 fee2 	bl	8007480 <memcpy>
		uart2_hal_tx.input_p = len - size;
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	b29a      	uxth	r2, r3
 80036c0:	89fb      	ldrh	r3, [r7, #14]
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	b29a      	uxth	r2, r3
 80036c6:	4b18      	ldr	r3, [pc, #96]	; (8003728 <uart2_hal_putchar+0xf0>)
 80036c8:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
 80036cc:	e015      	b.n	80036fa <uart2_hal_putchar+0xc2>
	}
	else{
		memcpy(&uart2_hal_tx.buffer[uart2_hal_tx.input_p], data, size);
 80036ce:	4b16      	ldr	r3, [pc, #88]	; (8003728 <uart2_hal_putchar+0xf0>)
 80036d0:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	461a      	mov	r2, r3
 80036d8:	4b13      	ldr	r3, [pc, #76]	; (8003728 <uart2_hal_putchar+0xf0>)
 80036da:	4413      	add	r3, r2
 80036dc:	89fa      	ldrh	r2, [r7, #14]
 80036de:	6879      	ldr	r1, [r7, #4]
 80036e0:	4618      	mov	r0, r3
 80036e2:	f003 fecd 	bl	8007480 <memcpy>
		uart2_hal_tx.input_p += size;
 80036e6:	4b10      	ldr	r3, [pc, #64]	; (8003728 <uart2_hal_putchar+0xf0>)
 80036e8:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 80036ec:	b29a      	uxth	r2, r3
 80036ee:	89fb      	ldrh	r3, [r7, #14]
 80036f0:	4413      	add	r3, r2
 80036f2:	b29a      	uxth	r2, r3
 80036f4:	4b0c      	ldr	r3, [pc, #48]	; (8003728 <uart2_hal_putchar+0xf0>)
 80036f6:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
	}
	WRITE_REG(huart2.Instance->CR1, reg);
 80036fa:	4b0a      	ldr	r3, [pc, #40]	; (8003724 <uart2_hal_putchar+0xec>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	68ba      	ldr	r2, [r7, #8]
 8003700:	60da      	str	r2, [r3, #12]
	HAL_UART_Transmit_IT(&huart2, &uart2_hal_tx.buffer[uart2_hal_tx.output_p], size);
 8003702:	4b09      	ldr	r3, [pc, #36]	; (8003728 <uart2_hal_putchar+0xf0>)
 8003704:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8003708:	b29b      	uxth	r3, r3
 800370a:	461a      	mov	r2, r3
 800370c:	4b06      	ldr	r3, [pc, #24]	; (8003728 <uart2_hal_putchar+0xf0>)
 800370e:	4413      	add	r3, r2
 8003710:	89fa      	ldrh	r2, [r7, #14]
 8003712:	4619      	mov	r1, r3
 8003714:	4803      	ldr	r0, [pc, #12]	; (8003724 <uart2_hal_putchar+0xec>)
 8003716:	f003 fa3e 	bl	8006b96 <HAL_UART_Transmit_IT>
}
 800371a:	bf00      	nop
 800371c:	3710      	adds	r7, #16
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	20004194 	.word	0x20004194
 8003728:	2000253c 	.word	0x2000253c

0800372c <uart3_hal_putchar>:

void uart3_hal_putchar(uint8_t *data, int len)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
	uint16_t size = len;
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	81fb      	strh	r3, [r7, #14]
	uint32_t reg = READ_REG(huart3.Instance->CR1);
 800373a:	4b37      	ldr	r3, [pc, #220]	; (8003818 <uart3_hal_putchar+0xec>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	60bb      	str	r3, [r7, #8]

	__HAL_UART_DISABLE_IT(&huart3, UART_IT_TXE);
 8003742:	4b35      	ldr	r3, [pc, #212]	; (8003818 <uart3_hal_putchar+0xec>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	68da      	ldr	r2, [r3, #12]
 8003748:	4b33      	ldr	r3, [pc, #204]	; (8003818 <uart3_hal_putchar+0xec>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003750:	60da      	str	r2, [r3, #12]
	__HAL_UART_DISABLE_IT(&huart3, UART_IT_TC);
 8003752:	4b31      	ldr	r3, [pc, #196]	; (8003818 <uart3_hal_putchar+0xec>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68da      	ldr	r2, [r3, #12]
 8003758:	4b2f      	ldr	r3, [pc, #188]	; (8003818 <uart3_hal_putchar+0xec>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003760:	60da      	str	r2, [r3, #12]
	if((uart3_hal_tx.input_p + len) >= UART_TX_BUFFER_SIZE){
 8003762:	4b2e      	ldr	r3, [pc, #184]	; (800381c <uart3_hal_putchar+0xf0>)
 8003764:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8003768:	b29b      	uxth	r3, r3
 800376a:	461a      	mov	r2, r3
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	4413      	add	r3, r2
 8003770:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003774:	db25      	blt.n	80037c2 <uart3_hal_putchar+0x96>
		size = UART_TX_BUFFER_SIZE - uart3_hal_tx.input_p;
 8003776:	4b29      	ldr	r3, [pc, #164]	; (800381c <uart3_hal_putchar+0xf0>)
 8003778:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 800377c:	b29b      	uxth	r3, r3
 800377e:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8003782:	81fb      	strh	r3, [r7, #14]
		memcpy(&uart3_hal_tx.buffer[uart3_hal_tx.input_p], data, size);
 8003784:	4b25      	ldr	r3, [pc, #148]	; (800381c <uart3_hal_putchar+0xf0>)
 8003786:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 800378a:	b29b      	uxth	r3, r3
 800378c:	461a      	mov	r2, r3
 800378e:	4b23      	ldr	r3, [pc, #140]	; (800381c <uart3_hal_putchar+0xf0>)
 8003790:	4413      	add	r3, r2
 8003792:	89fa      	ldrh	r2, [r7, #14]
 8003794:	6879      	ldr	r1, [r7, #4]
 8003796:	4618      	mov	r0, r3
 8003798:	f003 fe72 	bl	8007480 <memcpy>
		memcpy(&uart3_hal_tx.buffer[0], &data[size], len - size);
 800379c:	89fb      	ldrh	r3, [r7, #14]
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	18d1      	adds	r1, r2, r3
 80037a2:	89fb      	ldrh	r3, [r7, #14]
 80037a4:	683a      	ldr	r2, [r7, #0]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	461a      	mov	r2, r3
 80037aa:	481c      	ldr	r0, [pc, #112]	; (800381c <uart3_hal_putchar+0xf0>)
 80037ac:	f003 fe68 	bl	8007480 <memcpy>
		uart3_hal_tx.input_p = len - size;
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	b29a      	uxth	r2, r3
 80037b4:	89fb      	ldrh	r3, [r7, #14]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	b29a      	uxth	r2, r3
 80037ba:	4b18      	ldr	r3, [pc, #96]	; (800381c <uart3_hal_putchar+0xf0>)
 80037bc:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
 80037c0:	e015      	b.n	80037ee <uart3_hal_putchar+0xc2>
	}
	else{
		memcpy(&uart3_hal_tx.buffer[uart3_hal_tx.input_p], data, size);
 80037c2:	4b16      	ldr	r3, [pc, #88]	; (800381c <uart3_hal_putchar+0xf0>)
 80037c4:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	461a      	mov	r2, r3
 80037cc:	4b13      	ldr	r3, [pc, #76]	; (800381c <uart3_hal_putchar+0xf0>)
 80037ce:	4413      	add	r3, r2
 80037d0:	89fa      	ldrh	r2, [r7, #14]
 80037d2:	6879      	ldr	r1, [r7, #4]
 80037d4:	4618      	mov	r0, r3
 80037d6:	f003 fe53 	bl	8007480 <memcpy>
		uart3_hal_tx.input_p += size;
 80037da:	4b10      	ldr	r3, [pc, #64]	; (800381c <uart3_hal_putchar+0xf0>)
 80037dc:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 80037e0:	b29a      	uxth	r2, r3
 80037e2:	89fb      	ldrh	r3, [r7, #14]
 80037e4:	4413      	add	r3, r2
 80037e6:	b29a      	uxth	r2, r3
 80037e8:	4b0c      	ldr	r3, [pc, #48]	; (800381c <uart3_hal_putchar+0xf0>)
 80037ea:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
	}
	WRITE_REG(huart3.Instance->CR1, reg);
 80037ee:	4b0a      	ldr	r3, [pc, #40]	; (8003818 <uart3_hal_putchar+0xec>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68ba      	ldr	r2, [r7, #8]
 80037f4:	60da      	str	r2, [r3, #12]
	HAL_UART_Transmit_IT(&huart3, &uart3_hal_tx.buffer[uart3_hal_tx.output_p], size);
 80037f6:	4b09      	ldr	r3, [pc, #36]	; (800381c <uart3_hal_putchar+0xf0>)
 80037f8:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	461a      	mov	r2, r3
 8003800:	4b06      	ldr	r3, [pc, #24]	; (800381c <uart3_hal_putchar+0xf0>)
 8003802:	4413      	add	r3, r2
 8003804:	89fa      	ldrh	r2, [r7, #14]
 8003806:	4619      	mov	r1, r3
 8003808:	4803      	ldr	r0, [pc, #12]	; (8003818 <uart3_hal_putchar+0xec>)
 800380a:	f003 f9c4 	bl	8006b96 <HAL_UART_Transmit_IT>
}
 800380e:	bf00      	nop
 8003810:	3710      	adds	r7, #16
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	200014f0 	.word	0x200014f0
 800381c:	20003d90 	.word	0x20003d90

08003820 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
	uint16_t size;

	if(huart->Instance == USART1){
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a7d      	ldr	r2, [pc, #500]	; (8003a24 <HAL_UART_TxCpltCallback+0x204>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d14d      	bne.n	80038ce <HAL_UART_TxCpltCallback+0xae>
		uart1_hal_tx.output_p += huart->TxXferSize;
 8003832:	4b7d      	ldr	r3, [pc, #500]	; (8003a28 <HAL_UART_TxCpltCallback+0x208>)
 8003834:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8003838:	b29a      	uxth	r2, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800383e:	4413      	add	r3, r2
 8003840:	b29a      	uxth	r2, r3
 8003842:	4b79      	ldr	r3, [pc, #484]	; (8003a28 <HAL_UART_TxCpltCallback+0x208>)
 8003844:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
		if(uart1_hal_tx.output_p >= UART_TX_BUFFER_SIZE){
 8003848:	4b77      	ldr	r3, [pc, #476]	; (8003a28 <HAL_UART_TxCpltCallback+0x208>)
 800384a:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 800384e:	b29b      	uxth	r3, r3
 8003850:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003854:	d309      	bcc.n	800386a <HAL_UART_TxCpltCallback+0x4a>
			uart1_hal_tx.output_p -= UART_TX_BUFFER_SIZE;
 8003856:	4b74      	ldr	r3, [pc, #464]	; (8003a28 <HAL_UART_TxCpltCallback+0x208>)
 8003858:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 800385c:	b29b      	uxth	r3, r3
 800385e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8003862:	b29a      	uxth	r2, r3
 8003864:	4b70      	ldr	r3, [pc, #448]	; (8003a28 <HAL_UART_TxCpltCallback+0x208>)
 8003866:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
		}
		if(uart1_hal_tx.input_p != uart1_hal_tx.output_p){
 800386a:	4b6f      	ldr	r3, [pc, #444]	; (8003a28 <HAL_UART_TxCpltCallback+0x208>)
 800386c:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8003870:	b29a      	uxth	r2, r3
 8003872:	4b6d      	ldr	r3, [pc, #436]	; (8003a28 <HAL_UART_TxCpltCallback+0x208>)
 8003874:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8003878:	b29b      	uxth	r3, r3
 800387a:	429a      	cmp	r2, r3
 800387c:	d027      	beq.n	80038ce <HAL_UART_TxCpltCallback+0xae>
			if(uart1_hal_tx.input_p > uart1_hal_tx.output_p){
 800387e:	4b6a      	ldr	r3, [pc, #424]	; (8003a28 <HAL_UART_TxCpltCallback+0x208>)
 8003880:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8003884:	b29a      	uxth	r2, r3
 8003886:	4b68      	ldr	r3, [pc, #416]	; (8003a28 <HAL_UART_TxCpltCallback+0x208>)
 8003888:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 800388c:	b29b      	uxth	r3, r3
 800388e:	429a      	cmp	r2, r3
 8003890:	d90a      	bls.n	80038a8 <HAL_UART_TxCpltCallback+0x88>
				size = uart1_hal_tx.input_p - uart1_hal_tx.output_p;
 8003892:	4b65      	ldr	r3, [pc, #404]	; (8003a28 <HAL_UART_TxCpltCallback+0x208>)
 8003894:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8003898:	b29a      	uxth	r2, r3
 800389a:	4b63      	ldr	r3, [pc, #396]	; (8003a28 <HAL_UART_TxCpltCallback+0x208>)
 800389c:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	81fb      	strh	r3, [r7, #14]
 80038a6:	e006      	b.n	80038b6 <HAL_UART_TxCpltCallback+0x96>
			}
			else{
				size = UART_TX_BUFFER_SIZE - uart1_hal_tx.output_p;
 80038a8:	4b5f      	ldr	r3, [pc, #380]	; (8003a28 <HAL_UART_TxCpltCallback+0x208>)
 80038aa:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80038b4:	81fb      	strh	r3, [r7, #14]
			}
			HAL_UART_Transmit_IT(huart, &uart1_hal_tx.buffer[uart1_hal_tx.output_p], size);
 80038b6:	4b5c      	ldr	r3, [pc, #368]	; (8003a28 <HAL_UART_TxCpltCallback+0x208>)
 80038b8:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 80038bc:	b29b      	uxth	r3, r3
 80038be:	461a      	mov	r2, r3
 80038c0:	4b59      	ldr	r3, [pc, #356]	; (8003a28 <HAL_UART_TxCpltCallback+0x208>)
 80038c2:	4413      	add	r3, r2
 80038c4:	89fa      	ldrh	r2, [r7, #14]
 80038c6:	4619      	mov	r1, r3
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f003 f964 	bl	8006b96 <HAL_UART_Transmit_IT>
		}
	}
	if(huart->Instance == USART2){
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a56      	ldr	r2, [pc, #344]	; (8003a2c <HAL_UART_TxCpltCallback+0x20c>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d14d      	bne.n	8003974 <HAL_UART_TxCpltCallback+0x154>
		uart2_hal_tx.output_p += huart->TxXferSize;
 80038d8:	4b55      	ldr	r3, [pc, #340]	; (8003a30 <HAL_UART_TxCpltCallback+0x210>)
 80038da:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 80038de:	b29a      	uxth	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80038e4:	4413      	add	r3, r2
 80038e6:	b29a      	uxth	r2, r3
 80038e8:	4b51      	ldr	r3, [pc, #324]	; (8003a30 <HAL_UART_TxCpltCallback+0x210>)
 80038ea:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
		if(uart2_hal_tx.output_p >= UART_TX_BUFFER_SIZE){
 80038ee:	4b50      	ldr	r3, [pc, #320]	; (8003a30 <HAL_UART_TxCpltCallback+0x210>)
 80038f0:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038fa:	d309      	bcc.n	8003910 <HAL_UART_TxCpltCallback+0xf0>
			uart2_hal_tx.output_p -= UART_TX_BUFFER_SIZE;
 80038fc:	4b4c      	ldr	r3, [pc, #304]	; (8003a30 <HAL_UART_TxCpltCallback+0x210>)
 80038fe:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8003902:	b29b      	uxth	r3, r3
 8003904:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8003908:	b29a      	uxth	r2, r3
 800390a:	4b49      	ldr	r3, [pc, #292]	; (8003a30 <HAL_UART_TxCpltCallback+0x210>)
 800390c:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
		}
		if(uart2_hal_tx.input_p != uart2_hal_tx.output_p){
 8003910:	4b47      	ldr	r3, [pc, #284]	; (8003a30 <HAL_UART_TxCpltCallback+0x210>)
 8003912:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8003916:	b29a      	uxth	r2, r3
 8003918:	4b45      	ldr	r3, [pc, #276]	; (8003a30 <HAL_UART_TxCpltCallback+0x210>)
 800391a:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 800391e:	b29b      	uxth	r3, r3
 8003920:	429a      	cmp	r2, r3
 8003922:	d027      	beq.n	8003974 <HAL_UART_TxCpltCallback+0x154>
			if(uart2_hal_tx.input_p > uart2_hal_tx.output_p){
 8003924:	4b42      	ldr	r3, [pc, #264]	; (8003a30 <HAL_UART_TxCpltCallback+0x210>)
 8003926:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 800392a:	b29a      	uxth	r2, r3
 800392c:	4b40      	ldr	r3, [pc, #256]	; (8003a30 <HAL_UART_TxCpltCallback+0x210>)
 800392e:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8003932:	b29b      	uxth	r3, r3
 8003934:	429a      	cmp	r2, r3
 8003936:	d90a      	bls.n	800394e <HAL_UART_TxCpltCallback+0x12e>
				size = uart2_hal_tx.input_p - uart2_hal_tx.output_p;
 8003938:	4b3d      	ldr	r3, [pc, #244]	; (8003a30 <HAL_UART_TxCpltCallback+0x210>)
 800393a:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 800393e:	b29a      	uxth	r2, r3
 8003940:	4b3b      	ldr	r3, [pc, #236]	; (8003a30 <HAL_UART_TxCpltCallback+0x210>)
 8003942:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8003946:	b29b      	uxth	r3, r3
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	81fb      	strh	r3, [r7, #14]
 800394c:	e006      	b.n	800395c <HAL_UART_TxCpltCallback+0x13c>
			}
			else{
				size = UART_TX_BUFFER_SIZE - uart2_hal_tx.output_p;
 800394e:	4b38      	ldr	r3, [pc, #224]	; (8003a30 <HAL_UART_TxCpltCallback+0x210>)
 8003950:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8003954:	b29b      	uxth	r3, r3
 8003956:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 800395a:	81fb      	strh	r3, [r7, #14]
			}
			HAL_UART_Transmit_IT(huart, &uart2_hal_tx.buffer[uart2_hal_tx.output_p], size);
 800395c:	4b34      	ldr	r3, [pc, #208]	; (8003a30 <HAL_UART_TxCpltCallback+0x210>)
 800395e:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8003962:	b29b      	uxth	r3, r3
 8003964:	461a      	mov	r2, r3
 8003966:	4b32      	ldr	r3, [pc, #200]	; (8003a30 <HAL_UART_TxCpltCallback+0x210>)
 8003968:	4413      	add	r3, r2
 800396a:	89fa      	ldrh	r2, [r7, #14]
 800396c:	4619      	mov	r1, r3
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f003 f911 	bl	8006b96 <HAL_UART_Transmit_IT>
		}
	}
	if(huart->Instance == USART3){
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a2e      	ldr	r2, [pc, #184]	; (8003a34 <HAL_UART_TxCpltCallback+0x214>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d14d      	bne.n	8003a1a <HAL_UART_TxCpltCallback+0x1fa>
		uart3_hal_tx.output_p += huart->TxXferSize;
 800397e:	4b2e      	ldr	r3, [pc, #184]	; (8003a38 <HAL_UART_TxCpltCallback+0x218>)
 8003980:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8003984:	b29a      	uxth	r2, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800398a:	4413      	add	r3, r2
 800398c:	b29a      	uxth	r2, r3
 800398e:	4b2a      	ldr	r3, [pc, #168]	; (8003a38 <HAL_UART_TxCpltCallback+0x218>)
 8003990:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
		if(uart3_hal_tx.output_p >= UART_TX_BUFFER_SIZE){
 8003994:	4b28      	ldr	r3, [pc, #160]	; (8003a38 <HAL_UART_TxCpltCallback+0x218>)
 8003996:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 800399a:	b29b      	uxth	r3, r3
 800399c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039a0:	d309      	bcc.n	80039b6 <HAL_UART_TxCpltCallback+0x196>
			uart3_hal_tx.output_p -= UART_TX_BUFFER_SIZE;
 80039a2:	4b25      	ldr	r3, [pc, #148]	; (8003a38 <HAL_UART_TxCpltCallback+0x218>)
 80039a4:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80039ae:	b29a      	uxth	r2, r3
 80039b0:	4b21      	ldr	r3, [pc, #132]	; (8003a38 <HAL_UART_TxCpltCallback+0x218>)
 80039b2:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
		}
		if(uart3_hal_tx.input_p != uart3_hal_tx.output_p){
 80039b6:	4b20      	ldr	r3, [pc, #128]	; (8003a38 <HAL_UART_TxCpltCallback+0x218>)
 80039b8:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 80039bc:	b29a      	uxth	r2, r3
 80039be:	4b1e      	ldr	r3, [pc, #120]	; (8003a38 <HAL_UART_TxCpltCallback+0x218>)
 80039c0:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d027      	beq.n	8003a1a <HAL_UART_TxCpltCallback+0x1fa>
			if(uart3_hal_tx.input_p > uart3_hal_tx.output_p){
 80039ca:	4b1b      	ldr	r3, [pc, #108]	; (8003a38 <HAL_UART_TxCpltCallback+0x218>)
 80039cc:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 80039d0:	b29a      	uxth	r2, r3
 80039d2:	4b19      	ldr	r3, [pc, #100]	; (8003a38 <HAL_UART_TxCpltCallback+0x218>)
 80039d4:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 80039d8:	b29b      	uxth	r3, r3
 80039da:	429a      	cmp	r2, r3
 80039dc:	d90a      	bls.n	80039f4 <HAL_UART_TxCpltCallback+0x1d4>
				size = uart3_hal_tx.input_p - uart3_hal_tx.output_p;
 80039de:	4b16      	ldr	r3, [pc, #88]	; (8003a38 <HAL_UART_TxCpltCallback+0x218>)
 80039e0:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 80039e4:	b29a      	uxth	r2, r3
 80039e6:	4b14      	ldr	r3, [pc, #80]	; (8003a38 <HAL_UART_TxCpltCallback+0x218>)
 80039e8:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	81fb      	strh	r3, [r7, #14]
 80039f2:	e006      	b.n	8003a02 <HAL_UART_TxCpltCallback+0x1e2>
			}
			else{
				size = UART_TX_BUFFER_SIZE - uart3_hal_tx.output_p;
 80039f4:	4b10      	ldr	r3, [pc, #64]	; (8003a38 <HAL_UART_TxCpltCallback+0x218>)
 80039f6:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8003a00:	81fb      	strh	r3, [r7, #14]
			}
			HAL_UART_Transmit_IT(huart, &uart3_hal_tx.buffer[uart3_hal_tx.output_p], size);
 8003a02:	4b0d      	ldr	r3, [pc, #52]	; (8003a38 <HAL_UART_TxCpltCallback+0x218>)
 8003a04:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	4b0a      	ldr	r3, [pc, #40]	; (8003a38 <HAL_UART_TxCpltCallback+0x218>)
 8003a0e:	4413      	add	r3, r2
 8003a10:	89fa      	ldrh	r2, [r7, #14]
 8003a12:	4619      	mov	r1, r3
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f003 f8be 	bl	8006b96 <HAL_UART_Transmit_IT>
		}
	}
}
 8003a1a:	bf00      	nop
 8003a1c:	3710      	adds	r7, #16
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	40013800 	.word	0x40013800
 8003a28:	2000398c 	.word	0x2000398c
 8003a2c:	40004400 	.word	0x40004400
 8003a30:	2000253c 	.word	0x2000253c
 8003a34:	40004800 	.word	0x40004800
 8003a38:	20003d90 	.word	0x20003d90

08003a3c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a3c:	b590      	push	{r4, r7, lr}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a56      	ldr	r2, [pc, #344]	; (8003ba4 <HAL_UART_RxCpltCallback+0x168>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d133      	bne.n	8003ab6 <HAL_UART_RxCpltCallback+0x7a>
		uart1_hal_rx.buffer[RX1_IN_BUF_num][uart1_hal_rx.input_p++] = uart1_hal_rx.temp;
 8003a4e:	4b56      	ldr	r3, [pc, #344]	; (8003ba8 <HAL_UART_RxCpltCallback+0x16c>)
 8003a50:	6819      	ldr	r1, [r3, #0]
 8003a52:	4b56      	ldr	r3, [pc, #344]	; (8003bac <HAL_UART_RxCpltCallback+0x170>)
 8003a54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a58:	3302      	adds	r3, #2
 8003a5a:	881b      	ldrh	r3, [r3, #0]
 8003a5c:	b29a      	uxth	r2, r3
 8003a5e:	1c53      	adds	r3, r2, #1
 8003a60:	b298      	uxth	r0, r3
 8003a62:	4b52      	ldr	r3, [pc, #328]	; (8003bac <HAL_UART_RxCpltCallback+0x170>)
 8003a64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a68:	3302      	adds	r3, #2
 8003a6a:	8018      	strh	r0, [r3, #0]
 8003a6c:	4614      	mov	r4, r2
 8003a6e:	4b4f      	ldr	r3, [pc, #316]	; (8003bac <HAL_UART_RxCpltCallback+0x170>)
 8003a70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a74:	7818      	ldrb	r0, [r3, #0]
 8003a76:	4a4d      	ldr	r2, [pc, #308]	; (8003bac <HAL_UART_RxCpltCallback+0x170>)
 8003a78:	028b      	lsls	r3, r1, #10
 8003a7a:	4413      	add	r3, r2
 8003a7c:	4423      	add	r3, r4
 8003a7e:	4602      	mov	r2, r0
 8003a80:	701a      	strb	r2, [r3, #0]
		if(uart1_hal_rx.input_p >= UART_RX_BUFFER_SIZE){
 8003a82:	4b4a      	ldr	r3, [pc, #296]	; (8003bac <HAL_UART_RxCpltCallback+0x170>)
 8003a84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a88:	3302      	adds	r3, #2
 8003a8a:	881b      	ldrh	r3, [r3, #0]
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a92:	d30b      	bcc.n	8003aac <HAL_UART_RxCpltCallback+0x70>
			replace_Buff_uart1(0, RX1_IN_BUF_num);
 8003a94:	4b44      	ldr	r3, [pc, #272]	; (8003ba8 <HAL_UART_RxCpltCallback+0x16c>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4619      	mov	r1, r3
 8003a9a:	2000      	movs	r0, #0
 8003a9c:	f7ff fc92 	bl	80033c4 <replace_Buff_uart1>
			uart1_hal_rx.input_p = 0;
 8003aa0:	4b42      	ldr	r3, [pc, #264]	; (8003bac <HAL_UART_RxCpltCallback+0x170>)
 8003aa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003aa6:	3302      	adds	r3, #2
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	801a      	strh	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart1, &uart1_hal_rx.temp, 1);
 8003aac:	2201      	movs	r2, #1
 8003aae:	4940      	ldr	r1, [pc, #256]	; (8003bb0 <HAL_UART_RxCpltCallback+0x174>)
 8003ab0:	4840      	ldr	r0, [pc, #256]	; (8003bb4 <HAL_UART_RxCpltCallback+0x178>)
 8003ab2:	f003 f8b4 	bl	8006c1e <HAL_UART_Receive_IT>
	}
	if(huart->Instance == USART2){
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a3f      	ldr	r2, [pc, #252]	; (8003bb8 <HAL_UART_RxCpltCallback+0x17c>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d133      	bne.n	8003b28 <HAL_UART_RxCpltCallback+0xec>
		uart2_hal_rx.buffer[RX2_IN_BUF_num][uart2_hal_rx.input_p++] = uart2_hal_rx.temp;
 8003ac0:	4b3e      	ldr	r3, [pc, #248]	; (8003bbc <HAL_UART_RxCpltCallback+0x180>)
 8003ac2:	6819      	ldr	r1, [r3, #0]
 8003ac4:	4b3e      	ldr	r3, [pc, #248]	; (8003bc0 <HAL_UART_RxCpltCallback+0x184>)
 8003ac6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003aca:	3302      	adds	r3, #2
 8003acc:	881b      	ldrh	r3, [r3, #0]
 8003ace:	b29a      	uxth	r2, r3
 8003ad0:	1c53      	adds	r3, r2, #1
 8003ad2:	b298      	uxth	r0, r3
 8003ad4:	4b3a      	ldr	r3, [pc, #232]	; (8003bc0 <HAL_UART_RxCpltCallback+0x184>)
 8003ad6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ada:	3302      	adds	r3, #2
 8003adc:	8018      	strh	r0, [r3, #0]
 8003ade:	4614      	mov	r4, r2
 8003ae0:	4b37      	ldr	r3, [pc, #220]	; (8003bc0 <HAL_UART_RxCpltCallback+0x184>)
 8003ae2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ae6:	7818      	ldrb	r0, [r3, #0]
 8003ae8:	4a35      	ldr	r2, [pc, #212]	; (8003bc0 <HAL_UART_RxCpltCallback+0x184>)
 8003aea:	028b      	lsls	r3, r1, #10
 8003aec:	4413      	add	r3, r2
 8003aee:	4423      	add	r3, r4
 8003af0:	4602      	mov	r2, r0
 8003af2:	701a      	strb	r2, [r3, #0]
		if(uart2_hal_rx.input_p >= UART_RX_BUFFER_SIZE){
 8003af4:	4b32      	ldr	r3, [pc, #200]	; (8003bc0 <HAL_UART_RxCpltCallback+0x184>)
 8003af6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003afa:	3302      	adds	r3, #2
 8003afc:	881b      	ldrh	r3, [r3, #0]
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b04:	d30b      	bcc.n	8003b1e <HAL_UART_RxCpltCallback+0xe2>
			replace_Buff_uart2(0, RX2_IN_BUF_num);
 8003b06:	4b2d      	ldr	r3, [pc, #180]	; (8003bbc <HAL_UART_RxCpltCallback+0x180>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	2000      	movs	r0, #0
 8003b0e:	f7ff fc99 	bl	8003444 <replace_Buff_uart2>
			uart2_hal_rx.input_p = 0;
 8003b12:	4b2b      	ldr	r3, [pc, #172]	; (8003bc0 <HAL_UART_RxCpltCallback+0x184>)
 8003b14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b18:	3302      	adds	r3, #2
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	801a      	strh	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart2, &uart2_hal_rx.temp, 1);
 8003b1e:	2201      	movs	r2, #1
 8003b20:	4928      	ldr	r1, [pc, #160]	; (8003bc4 <HAL_UART_RxCpltCallback+0x188>)
 8003b22:	4829      	ldr	r0, [pc, #164]	; (8003bc8 <HAL_UART_RxCpltCallback+0x18c>)
 8003b24:	f003 f87b 	bl	8006c1e <HAL_UART_Receive_IT>
	}
	if(huart->Instance == USART3){
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a27      	ldr	r2, [pc, #156]	; (8003bcc <HAL_UART_RxCpltCallback+0x190>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d133      	bne.n	8003b9a <HAL_UART_RxCpltCallback+0x15e>
		uart3_hal_rx.buffer[RX3_IN_BUF_num][uart3_hal_rx.input_p++] = uart3_hal_rx.temp;
 8003b32:	4b27      	ldr	r3, [pc, #156]	; (8003bd0 <HAL_UART_RxCpltCallback+0x194>)
 8003b34:	6819      	ldr	r1, [r3, #0]
 8003b36:	4b27      	ldr	r3, [pc, #156]	; (8003bd4 <HAL_UART_RxCpltCallback+0x198>)
 8003b38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b3c:	3302      	adds	r3, #2
 8003b3e:	881b      	ldrh	r3, [r3, #0]
 8003b40:	b29a      	uxth	r2, r3
 8003b42:	1c53      	adds	r3, r2, #1
 8003b44:	b298      	uxth	r0, r3
 8003b46:	4b23      	ldr	r3, [pc, #140]	; (8003bd4 <HAL_UART_RxCpltCallback+0x198>)
 8003b48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b4c:	3302      	adds	r3, #2
 8003b4e:	8018      	strh	r0, [r3, #0]
 8003b50:	4614      	mov	r4, r2
 8003b52:	4b20      	ldr	r3, [pc, #128]	; (8003bd4 <HAL_UART_RxCpltCallback+0x198>)
 8003b54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b58:	7818      	ldrb	r0, [r3, #0]
 8003b5a:	4a1e      	ldr	r2, [pc, #120]	; (8003bd4 <HAL_UART_RxCpltCallback+0x198>)
 8003b5c:	028b      	lsls	r3, r1, #10
 8003b5e:	4413      	add	r3, r2
 8003b60:	4423      	add	r3, r4
 8003b62:	4602      	mov	r2, r0
 8003b64:	701a      	strb	r2, [r3, #0]
		if(uart3_hal_rx.input_p >= UART_RX_BUFFER_SIZE){
 8003b66:	4b1b      	ldr	r3, [pc, #108]	; (8003bd4 <HAL_UART_RxCpltCallback+0x198>)
 8003b68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b6c:	3302      	adds	r3, #2
 8003b6e:	881b      	ldrh	r3, [r3, #0]
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b76:	d30b      	bcc.n	8003b90 <HAL_UART_RxCpltCallback+0x154>
			replace_Buff_uart3(0, RX3_IN_BUF_num);
 8003b78:	4b15      	ldr	r3, [pc, #84]	; (8003bd0 <HAL_UART_RxCpltCallback+0x194>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	2000      	movs	r0, #0
 8003b80:	f7ff fca0 	bl	80034c4 <replace_Buff_uart3>
			uart3_hal_rx.input_p = 0;
 8003b84:	4b13      	ldr	r3, [pc, #76]	; (8003bd4 <HAL_UART_RxCpltCallback+0x198>)
 8003b86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b8a:	3302      	adds	r3, #2
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	801a      	strh	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart3, &uart3_hal_rx.temp, 1);
 8003b90:	2201      	movs	r2, #1
 8003b92:	4911      	ldr	r1, [pc, #68]	; (8003bd8 <HAL_UART_RxCpltCallback+0x19c>)
 8003b94:	4811      	ldr	r0, [pc, #68]	; (8003bdc <HAL_UART_RxCpltCallback+0x1a0>)
 8003b96:	f003 f842 	bl	8006c1e <HAL_UART_Receive_IT>
	}
}
 8003b9a:	bf00      	nop
 8003b9c:	370c      	adds	r7, #12
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd90      	pop	{r4, r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	40013800 	.word	0x40013800
 8003ba8:	20000310 	.word	0x20000310
 8003bac:	20002940 	.word	0x20002940
 8003bb0:	20003940 	.word	0x20003940
 8003bb4:	20003948 	.word	0x20003948
 8003bb8:	40004400 	.word	0x40004400
 8003bbc:	20000318 	.word	0x20000318
 8003bc0:	20001534 	.word	0x20001534
 8003bc4:	20002534 	.word	0x20002534
 8003bc8:	20004194 	.word	0x20004194
 8003bcc:	40004800 	.word	0x40004800
 8003bd0:	20000320 	.word	0x20000320
 8003bd4:	200004e8 	.word	0x200004e8
 8003bd8:	200014e8 	.word	0x200014e8
 8003bdc:	200014f0 	.word	0x200014f0

08003be0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003be0:	480c      	ldr	r0, [pc, #48]	; (8003c14 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003be2:	490d      	ldr	r1, [pc, #52]	; (8003c18 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003be4:	4a0d      	ldr	r2, [pc, #52]	; (8003c1c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003be6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003be8:	e002      	b.n	8003bf0 <LoopCopyDataInit>

08003bea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003bea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003bec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003bee:	3304      	adds	r3, #4

08003bf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003bf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003bf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003bf4:	d3f9      	bcc.n	8003bea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003bf6:	4a0a      	ldr	r2, [pc, #40]	; (8003c20 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003bf8:	4c0a      	ldr	r4, [pc, #40]	; (8003c24 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003bfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003bfc:	e001      	b.n	8003c02 <LoopFillZerobss>

08003bfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003bfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c00:	3204      	adds	r2, #4

08003c02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c04:	d3fb      	bcc.n	8003bfe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003c06:	f7ff f815 	bl	8002c34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c0a:	f003 fc15 	bl	8007438 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003c0e:	f7fd fac7 	bl	80011a0 <main>
  bx lr
 8003c12:	4770      	bx	lr
  ldr r0, =_sdata
 8003c14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c18:	200002dc 	.word	0x200002dc
  ldr r2, =_sidata
 8003c1c:	0800ad44 	.word	0x0800ad44
  ldr r2, =_sbss
 8003c20:	200002dc 	.word	0x200002dc
  ldr r4, =_ebss
 8003c24:	200041ec 	.word	0x200041ec

08003c28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003c28:	e7fe      	b.n	8003c28 <ADC1_2_IRQHandler>
	...

08003c2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c30:	4b08      	ldr	r3, [pc, #32]	; (8003c54 <HAL_Init+0x28>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a07      	ldr	r2, [pc, #28]	; (8003c54 <HAL_Init+0x28>)
 8003c36:	f043 0310 	orr.w	r3, r3, #16
 8003c3a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c3c:	2003      	movs	r0, #3
 8003c3e:	f000 f947 	bl	8003ed0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c42:	2000      	movs	r0, #0
 8003c44:	f000 f808 	bl	8003c58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c48:	f7fe fe92 	bl	8002970 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	40022000 	.word	0x40022000

08003c58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003c60:	4b12      	ldr	r3, [pc, #72]	; (8003cac <HAL_InitTick+0x54>)
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	4b12      	ldr	r3, [pc, #72]	; (8003cb0 <HAL_InitTick+0x58>)
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	4619      	mov	r1, r3
 8003c6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c76:	4618      	mov	r0, r3
 8003c78:	f000 f95f 	bl	8003f3a <HAL_SYSTICK_Config>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d001      	beq.n	8003c86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e00e      	b.n	8003ca4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2b0f      	cmp	r3, #15
 8003c8a:	d80a      	bhi.n	8003ca2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	6879      	ldr	r1, [r7, #4]
 8003c90:	f04f 30ff 	mov.w	r0, #4294967295
 8003c94:	f000 f927 	bl	8003ee6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003c98:	4a06      	ldr	r2, [pc, #24]	; (8003cb4 <HAL_InitTick+0x5c>)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	e000      	b.n	8003ca4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3708      	adds	r7, #8
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	20000100 	.word	0x20000100
 8003cb0:	20000108 	.word	0x20000108
 8003cb4:	20000104 	.word	0x20000104

08003cb8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003cbc:	4b05      	ldr	r3, [pc, #20]	; (8003cd4 <HAL_IncTick+0x1c>)
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	4b05      	ldr	r3, [pc, #20]	; (8003cd8 <HAL_IncTick+0x20>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4413      	add	r3, r2
 8003cc8:	4a03      	ldr	r2, [pc, #12]	; (8003cd8 <HAL_IncTick+0x20>)
 8003cca:	6013      	str	r3, [r2, #0]
}
 8003ccc:	bf00      	nop
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bc80      	pop	{r7}
 8003cd2:	4770      	bx	lr
 8003cd4:	20000108 	.word	0x20000108
 8003cd8:	200041d8 	.word	0x200041d8

08003cdc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	af00      	add	r7, sp, #0
  return uwTick;
 8003ce0:	4b02      	ldr	r3, [pc, #8]	; (8003cec <HAL_GetTick+0x10>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bc80      	pop	{r7}
 8003cea:	4770      	bx	lr
 8003cec:	200041d8 	.word	0x200041d8

08003cf0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003cf8:	f7ff fff0 	bl	8003cdc <HAL_GetTick>
 8003cfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d08:	d005      	beq.n	8003d16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d0a:	4b0a      	ldr	r3, [pc, #40]	; (8003d34 <HAL_Delay+0x44>)
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	461a      	mov	r2, r3
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	4413      	add	r3, r2
 8003d14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003d16:	bf00      	nop
 8003d18:	f7ff ffe0 	bl	8003cdc <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	68fa      	ldr	r2, [r7, #12]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d8f7      	bhi.n	8003d18 <HAL_Delay+0x28>
  {
  }
}
 8003d28:	bf00      	nop
 8003d2a:	bf00      	nop
 8003d2c:	3710      	adds	r7, #16
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	20000108 	.word	0x20000108

08003d38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b085      	sub	sp, #20
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f003 0307 	and.w	r3, r3, #7
 8003d46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d48:	4b0c      	ldr	r3, [pc, #48]	; (8003d7c <__NVIC_SetPriorityGrouping+0x44>)
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d4e:	68ba      	ldr	r2, [r7, #8]
 8003d50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d54:	4013      	ands	r3, r2
 8003d56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d6a:	4a04      	ldr	r2, [pc, #16]	; (8003d7c <__NVIC_SetPriorityGrouping+0x44>)
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	60d3      	str	r3, [r2, #12]
}
 8003d70:	bf00      	nop
 8003d72:	3714      	adds	r7, #20
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bc80      	pop	{r7}
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	e000ed00 	.word	0xe000ed00

08003d80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d80:	b480      	push	{r7}
 8003d82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d84:	4b04      	ldr	r3, [pc, #16]	; (8003d98 <__NVIC_GetPriorityGrouping+0x18>)
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	0a1b      	lsrs	r3, r3, #8
 8003d8a:	f003 0307 	and.w	r3, r3, #7
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bc80      	pop	{r7}
 8003d94:	4770      	bx	lr
 8003d96:	bf00      	nop
 8003d98:	e000ed00 	.word	0xe000ed00

08003d9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	4603      	mov	r3, r0
 8003da4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	db0b      	blt.n	8003dc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003dae:	79fb      	ldrb	r3, [r7, #7]
 8003db0:	f003 021f 	and.w	r2, r3, #31
 8003db4:	4906      	ldr	r1, [pc, #24]	; (8003dd0 <__NVIC_EnableIRQ+0x34>)
 8003db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dba:	095b      	lsrs	r3, r3, #5
 8003dbc:	2001      	movs	r0, #1
 8003dbe:	fa00 f202 	lsl.w	r2, r0, r2
 8003dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003dc6:	bf00      	nop
 8003dc8:	370c      	adds	r7, #12
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bc80      	pop	{r7}
 8003dce:	4770      	bx	lr
 8003dd0:	e000e100 	.word	0xe000e100

08003dd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	4603      	mov	r3, r0
 8003ddc:	6039      	str	r1, [r7, #0]
 8003dde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	db0a      	blt.n	8003dfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	b2da      	uxtb	r2, r3
 8003dec:	490c      	ldr	r1, [pc, #48]	; (8003e20 <__NVIC_SetPriority+0x4c>)
 8003dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003df2:	0112      	lsls	r2, r2, #4
 8003df4:	b2d2      	uxtb	r2, r2
 8003df6:	440b      	add	r3, r1
 8003df8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003dfc:	e00a      	b.n	8003e14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	b2da      	uxtb	r2, r3
 8003e02:	4908      	ldr	r1, [pc, #32]	; (8003e24 <__NVIC_SetPriority+0x50>)
 8003e04:	79fb      	ldrb	r3, [r7, #7]
 8003e06:	f003 030f 	and.w	r3, r3, #15
 8003e0a:	3b04      	subs	r3, #4
 8003e0c:	0112      	lsls	r2, r2, #4
 8003e0e:	b2d2      	uxtb	r2, r2
 8003e10:	440b      	add	r3, r1
 8003e12:	761a      	strb	r2, [r3, #24]
}
 8003e14:	bf00      	nop
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bc80      	pop	{r7}
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop
 8003e20:	e000e100 	.word	0xe000e100
 8003e24:	e000ed00 	.word	0xe000ed00

08003e28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b089      	sub	sp, #36	; 0x24
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f003 0307 	and.w	r3, r3, #7
 8003e3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	f1c3 0307 	rsb	r3, r3, #7
 8003e42:	2b04      	cmp	r3, #4
 8003e44:	bf28      	it	cs
 8003e46:	2304      	movcs	r3, #4
 8003e48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	3304      	adds	r3, #4
 8003e4e:	2b06      	cmp	r3, #6
 8003e50:	d902      	bls.n	8003e58 <NVIC_EncodePriority+0x30>
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	3b03      	subs	r3, #3
 8003e56:	e000      	b.n	8003e5a <NVIC_EncodePriority+0x32>
 8003e58:	2300      	movs	r3, #0
 8003e5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	fa02 f303 	lsl.w	r3, r2, r3
 8003e66:	43da      	mvns	r2, r3
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	401a      	ands	r2, r3
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e70:	f04f 31ff 	mov.w	r1, #4294967295
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	fa01 f303 	lsl.w	r3, r1, r3
 8003e7a:	43d9      	mvns	r1, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e80:	4313      	orrs	r3, r2
         );
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3724      	adds	r7, #36	; 0x24
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bc80      	pop	{r7}
 8003e8a:	4770      	bx	lr

08003e8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	3b01      	subs	r3, #1
 8003e98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e9c:	d301      	bcc.n	8003ea2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e00f      	b.n	8003ec2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ea2:	4a0a      	ldr	r2, [pc, #40]	; (8003ecc <SysTick_Config+0x40>)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	3b01      	subs	r3, #1
 8003ea8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003eaa:	210f      	movs	r1, #15
 8003eac:	f04f 30ff 	mov.w	r0, #4294967295
 8003eb0:	f7ff ff90 	bl	8003dd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003eb4:	4b05      	ldr	r3, [pc, #20]	; (8003ecc <SysTick_Config+0x40>)
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003eba:	4b04      	ldr	r3, [pc, #16]	; (8003ecc <SysTick_Config+0x40>)
 8003ebc:	2207      	movs	r2, #7
 8003ebe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3708      	adds	r7, #8
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	e000e010 	.word	0xe000e010

08003ed0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f7ff ff2d 	bl	8003d38 <__NVIC_SetPriorityGrouping>
}
 8003ede:	bf00      	nop
 8003ee0:	3708      	adds	r7, #8
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}

08003ee6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ee6:	b580      	push	{r7, lr}
 8003ee8:	b086      	sub	sp, #24
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	4603      	mov	r3, r0
 8003eee:	60b9      	str	r1, [r7, #8]
 8003ef0:	607a      	str	r2, [r7, #4]
 8003ef2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ef8:	f7ff ff42 	bl	8003d80 <__NVIC_GetPriorityGrouping>
 8003efc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	68b9      	ldr	r1, [r7, #8]
 8003f02:	6978      	ldr	r0, [r7, #20]
 8003f04:	f7ff ff90 	bl	8003e28 <NVIC_EncodePriority>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f0e:	4611      	mov	r1, r2
 8003f10:	4618      	mov	r0, r3
 8003f12:	f7ff ff5f 	bl	8003dd4 <__NVIC_SetPriority>
}
 8003f16:	bf00      	nop
 8003f18:	3718      	adds	r7, #24
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}

08003f1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f1e:	b580      	push	{r7, lr}
 8003f20:	b082      	sub	sp, #8
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	4603      	mov	r3, r0
 8003f26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f7ff ff35 	bl	8003d9c <__NVIC_EnableIRQ>
}
 8003f32:	bf00      	nop
 8003f34:	3708      	adds	r7, #8
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}

08003f3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f3a:	b580      	push	{r7, lr}
 8003f3c:	b082      	sub	sp, #8
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f7ff ffa2 	bl	8003e8c <SysTick_Config>
 8003f48:	4603      	mov	r3, r0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3708      	adds	r7, #8
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003f52:	b480      	push	{r7}
 8003f54:	b085      	sub	sp, #20
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d008      	beq.n	8003f7a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2204      	movs	r2, #4
 8003f6c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e020      	b.n	8003fbc <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f022 020e 	bic.w	r2, r2, #14
 8003f88:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f022 0201 	bic.w	r2, r2, #1
 8003f98:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fa2:	2101      	movs	r1, #1
 8003fa4:	fa01 f202 	lsl.w	r2, r1, r2
 8003fa8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2201      	movs	r2, #1
 8003fae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003fba:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3714      	adds	r7, #20
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bc80      	pop	{r7}
 8003fc4:	4770      	bx	lr
	...

08003fc8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d005      	beq.n	8003fea <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2204      	movs	r2, #4
 8003fe2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	73fb      	strb	r3, [r7, #15]
 8003fe8:	e0d6      	b.n	8004198 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f022 020e 	bic.w	r2, r2, #14
 8003ff8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f022 0201 	bic.w	r2, r2, #1
 8004008:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	461a      	mov	r2, r3
 8004010:	4b64      	ldr	r3, [pc, #400]	; (80041a4 <HAL_DMA_Abort_IT+0x1dc>)
 8004012:	429a      	cmp	r2, r3
 8004014:	d958      	bls.n	80040c8 <HAL_DMA_Abort_IT+0x100>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a63      	ldr	r2, [pc, #396]	; (80041a8 <HAL_DMA_Abort_IT+0x1e0>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d04f      	beq.n	80040c0 <HAL_DMA_Abort_IT+0xf8>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a61      	ldr	r2, [pc, #388]	; (80041ac <HAL_DMA_Abort_IT+0x1e4>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d048      	beq.n	80040bc <HAL_DMA_Abort_IT+0xf4>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a60      	ldr	r2, [pc, #384]	; (80041b0 <HAL_DMA_Abort_IT+0x1e8>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d040      	beq.n	80040b6 <HAL_DMA_Abort_IT+0xee>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a5e      	ldr	r2, [pc, #376]	; (80041b4 <HAL_DMA_Abort_IT+0x1ec>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d038      	beq.n	80040b0 <HAL_DMA_Abort_IT+0xe8>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a5d      	ldr	r2, [pc, #372]	; (80041b8 <HAL_DMA_Abort_IT+0x1f0>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d030      	beq.n	80040aa <HAL_DMA_Abort_IT+0xe2>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a5b      	ldr	r2, [pc, #364]	; (80041bc <HAL_DMA_Abort_IT+0x1f4>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d028      	beq.n	80040a4 <HAL_DMA_Abort_IT+0xdc>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a53      	ldr	r2, [pc, #332]	; (80041a4 <HAL_DMA_Abort_IT+0x1dc>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d020      	beq.n	800409e <HAL_DMA_Abort_IT+0xd6>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a57      	ldr	r2, [pc, #348]	; (80041c0 <HAL_DMA_Abort_IT+0x1f8>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d019      	beq.n	800409a <HAL_DMA_Abort_IT+0xd2>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a56      	ldr	r2, [pc, #344]	; (80041c4 <HAL_DMA_Abort_IT+0x1fc>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d012      	beq.n	8004096 <HAL_DMA_Abort_IT+0xce>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a54      	ldr	r2, [pc, #336]	; (80041c8 <HAL_DMA_Abort_IT+0x200>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d00a      	beq.n	8004090 <HAL_DMA_Abort_IT+0xc8>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a53      	ldr	r2, [pc, #332]	; (80041cc <HAL_DMA_Abort_IT+0x204>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d102      	bne.n	800408a <HAL_DMA_Abort_IT+0xc2>
 8004084:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004088:	e01b      	b.n	80040c2 <HAL_DMA_Abort_IT+0xfa>
 800408a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800408e:	e018      	b.n	80040c2 <HAL_DMA_Abort_IT+0xfa>
 8004090:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004094:	e015      	b.n	80040c2 <HAL_DMA_Abort_IT+0xfa>
 8004096:	2310      	movs	r3, #16
 8004098:	e013      	b.n	80040c2 <HAL_DMA_Abort_IT+0xfa>
 800409a:	2301      	movs	r3, #1
 800409c:	e011      	b.n	80040c2 <HAL_DMA_Abort_IT+0xfa>
 800409e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80040a2:	e00e      	b.n	80040c2 <HAL_DMA_Abort_IT+0xfa>
 80040a4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80040a8:	e00b      	b.n	80040c2 <HAL_DMA_Abort_IT+0xfa>
 80040aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80040ae:	e008      	b.n	80040c2 <HAL_DMA_Abort_IT+0xfa>
 80040b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040b4:	e005      	b.n	80040c2 <HAL_DMA_Abort_IT+0xfa>
 80040b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80040ba:	e002      	b.n	80040c2 <HAL_DMA_Abort_IT+0xfa>
 80040bc:	2310      	movs	r3, #16
 80040be:	e000      	b.n	80040c2 <HAL_DMA_Abort_IT+0xfa>
 80040c0:	2301      	movs	r3, #1
 80040c2:	4a43      	ldr	r2, [pc, #268]	; (80041d0 <HAL_DMA_Abort_IT+0x208>)
 80040c4:	6053      	str	r3, [r2, #4]
 80040c6:	e057      	b.n	8004178 <HAL_DMA_Abort_IT+0x1b0>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a36      	ldr	r2, [pc, #216]	; (80041a8 <HAL_DMA_Abort_IT+0x1e0>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d04f      	beq.n	8004172 <HAL_DMA_Abort_IT+0x1aa>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a35      	ldr	r2, [pc, #212]	; (80041ac <HAL_DMA_Abort_IT+0x1e4>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d048      	beq.n	800416e <HAL_DMA_Abort_IT+0x1a6>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a33      	ldr	r2, [pc, #204]	; (80041b0 <HAL_DMA_Abort_IT+0x1e8>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d040      	beq.n	8004168 <HAL_DMA_Abort_IT+0x1a0>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a32      	ldr	r2, [pc, #200]	; (80041b4 <HAL_DMA_Abort_IT+0x1ec>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d038      	beq.n	8004162 <HAL_DMA_Abort_IT+0x19a>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a30      	ldr	r2, [pc, #192]	; (80041b8 <HAL_DMA_Abort_IT+0x1f0>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d030      	beq.n	800415c <HAL_DMA_Abort_IT+0x194>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a2f      	ldr	r2, [pc, #188]	; (80041bc <HAL_DMA_Abort_IT+0x1f4>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d028      	beq.n	8004156 <HAL_DMA_Abort_IT+0x18e>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a26      	ldr	r2, [pc, #152]	; (80041a4 <HAL_DMA_Abort_IT+0x1dc>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d020      	beq.n	8004150 <HAL_DMA_Abort_IT+0x188>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a2b      	ldr	r2, [pc, #172]	; (80041c0 <HAL_DMA_Abort_IT+0x1f8>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d019      	beq.n	800414c <HAL_DMA_Abort_IT+0x184>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a29      	ldr	r2, [pc, #164]	; (80041c4 <HAL_DMA_Abort_IT+0x1fc>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d012      	beq.n	8004148 <HAL_DMA_Abort_IT+0x180>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a28      	ldr	r2, [pc, #160]	; (80041c8 <HAL_DMA_Abort_IT+0x200>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d00a      	beq.n	8004142 <HAL_DMA_Abort_IT+0x17a>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a26      	ldr	r2, [pc, #152]	; (80041cc <HAL_DMA_Abort_IT+0x204>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d102      	bne.n	800413c <HAL_DMA_Abort_IT+0x174>
 8004136:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800413a:	e01b      	b.n	8004174 <HAL_DMA_Abort_IT+0x1ac>
 800413c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004140:	e018      	b.n	8004174 <HAL_DMA_Abort_IT+0x1ac>
 8004142:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004146:	e015      	b.n	8004174 <HAL_DMA_Abort_IT+0x1ac>
 8004148:	2310      	movs	r3, #16
 800414a:	e013      	b.n	8004174 <HAL_DMA_Abort_IT+0x1ac>
 800414c:	2301      	movs	r3, #1
 800414e:	e011      	b.n	8004174 <HAL_DMA_Abort_IT+0x1ac>
 8004150:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004154:	e00e      	b.n	8004174 <HAL_DMA_Abort_IT+0x1ac>
 8004156:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800415a:	e00b      	b.n	8004174 <HAL_DMA_Abort_IT+0x1ac>
 800415c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004160:	e008      	b.n	8004174 <HAL_DMA_Abort_IT+0x1ac>
 8004162:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004166:	e005      	b.n	8004174 <HAL_DMA_Abort_IT+0x1ac>
 8004168:	f44f 7380 	mov.w	r3, #256	; 0x100
 800416c:	e002      	b.n	8004174 <HAL_DMA_Abort_IT+0x1ac>
 800416e:	2310      	movs	r3, #16
 8004170:	e000      	b.n	8004174 <HAL_DMA_Abort_IT+0x1ac>
 8004172:	2301      	movs	r3, #1
 8004174:	4a17      	ldr	r2, [pc, #92]	; (80041d4 <HAL_DMA_Abort_IT+0x20c>)
 8004176:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800418c:	2b00      	cmp	r3, #0
 800418e:	d003      	beq.n	8004198 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	4798      	blx	r3
    } 
  }
  return status;
 8004198:	7bfb      	ldrb	r3, [r7, #15]
}
 800419a:	4618      	mov	r0, r3
 800419c:	3710      	adds	r7, #16
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	40020080 	.word	0x40020080
 80041a8:	40020008 	.word	0x40020008
 80041ac:	4002001c 	.word	0x4002001c
 80041b0:	40020030 	.word	0x40020030
 80041b4:	40020044 	.word	0x40020044
 80041b8:	40020058 	.word	0x40020058
 80041bc:	4002006c 	.word	0x4002006c
 80041c0:	40020408 	.word	0x40020408
 80041c4:	4002041c 	.word	0x4002041c
 80041c8:	40020430 	.word	0x40020430
 80041cc:	40020444 	.word	0x40020444
 80041d0:	40020400 	.word	0x40020400
 80041d4:	40020000 	.word	0x40020000

080041d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041d8:	b480      	push	{r7}
 80041da:	b08b      	sub	sp, #44	; 0x2c
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80041e2:	2300      	movs	r3, #0
 80041e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80041e6:	2300      	movs	r3, #0
 80041e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80041ea:	e179      	b.n	80044e0 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80041ec:	2201      	movs	r2, #1
 80041ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f0:	fa02 f303 	lsl.w	r3, r2, r3
 80041f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	69fa      	ldr	r2, [r7, #28]
 80041fc:	4013      	ands	r3, r2
 80041fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004200:	69ba      	ldr	r2, [r7, #24]
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	429a      	cmp	r2, r3
 8004206:	f040 8168 	bne.w	80044da <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	4aa0      	ldr	r2, [pc, #640]	; (8004490 <HAL_GPIO_Init+0x2b8>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d05e      	beq.n	80042d2 <HAL_GPIO_Init+0xfa>
 8004214:	4a9e      	ldr	r2, [pc, #632]	; (8004490 <HAL_GPIO_Init+0x2b8>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d875      	bhi.n	8004306 <HAL_GPIO_Init+0x12e>
 800421a:	4a9e      	ldr	r2, [pc, #632]	; (8004494 <HAL_GPIO_Init+0x2bc>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d058      	beq.n	80042d2 <HAL_GPIO_Init+0xfa>
 8004220:	4a9c      	ldr	r2, [pc, #624]	; (8004494 <HAL_GPIO_Init+0x2bc>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d86f      	bhi.n	8004306 <HAL_GPIO_Init+0x12e>
 8004226:	4a9c      	ldr	r2, [pc, #624]	; (8004498 <HAL_GPIO_Init+0x2c0>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d052      	beq.n	80042d2 <HAL_GPIO_Init+0xfa>
 800422c:	4a9a      	ldr	r2, [pc, #616]	; (8004498 <HAL_GPIO_Init+0x2c0>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d869      	bhi.n	8004306 <HAL_GPIO_Init+0x12e>
 8004232:	4a9a      	ldr	r2, [pc, #616]	; (800449c <HAL_GPIO_Init+0x2c4>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d04c      	beq.n	80042d2 <HAL_GPIO_Init+0xfa>
 8004238:	4a98      	ldr	r2, [pc, #608]	; (800449c <HAL_GPIO_Init+0x2c4>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d863      	bhi.n	8004306 <HAL_GPIO_Init+0x12e>
 800423e:	4a98      	ldr	r2, [pc, #608]	; (80044a0 <HAL_GPIO_Init+0x2c8>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d046      	beq.n	80042d2 <HAL_GPIO_Init+0xfa>
 8004244:	4a96      	ldr	r2, [pc, #600]	; (80044a0 <HAL_GPIO_Init+0x2c8>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d85d      	bhi.n	8004306 <HAL_GPIO_Init+0x12e>
 800424a:	2b12      	cmp	r3, #18
 800424c:	d82a      	bhi.n	80042a4 <HAL_GPIO_Init+0xcc>
 800424e:	2b12      	cmp	r3, #18
 8004250:	d859      	bhi.n	8004306 <HAL_GPIO_Init+0x12e>
 8004252:	a201      	add	r2, pc, #4	; (adr r2, 8004258 <HAL_GPIO_Init+0x80>)
 8004254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004258:	080042d3 	.word	0x080042d3
 800425c:	080042ad 	.word	0x080042ad
 8004260:	080042bf 	.word	0x080042bf
 8004264:	08004301 	.word	0x08004301
 8004268:	08004307 	.word	0x08004307
 800426c:	08004307 	.word	0x08004307
 8004270:	08004307 	.word	0x08004307
 8004274:	08004307 	.word	0x08004307
 8004278:	08004307 	.word	0x08004307
 800427c:	08004307 	.word	0x08004307
 8004280:	08004307 	.word	0x08004307
 8004284:	08004307 	.word	0x08004307
 8004288:	08004307 	.word	0x08004307
 800428c:	08004307 	.word	0x08004307
 8004290:	08004307 	.word	0x08004307
 8004294:	08004307 	.word	0x08004307
 8004298:	08004307 	.word	0x08004307
 800429c:	080042b5 	.word	0x080042b5
 80042a0:	080042c9 	.word	0x080042c9
 80042a4:	4a7f      	ldr	r2, [pc, #508]	; (80044a4 <HAL_GPIO_Init+0x2cc>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d013      	beq.n	80042d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80042aa:	e02c      	b.n	8004306 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	623b      	str	r3, [r7, #32]
          break;
 80042b2:	e029      	b.n	8004308 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	3304      	adds	r3, #4
 80042ba:	623b      	str	r3, [r7, #32]
          break;
 80042bc:	e024      	b.n	8004308 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	3308      	adds	r3, #8
 80042c4:	623b      	str	r3, [r7, #32]
          break;
 80042c6:	e01f      	b.n	8004308 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	330c      	adds	r3, #12
 80042ce:	623b      	str	r3, [r7, #32]
          break;
 80042d0:	e01a      	b.n	8004308 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d102      	bne.n	80042e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80042da:	2304      	movs	r3, #4
 80042dc:	623b      	str	r3, [r7, #32]
          break;
 80042de:	e013      	b.n	8004308 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d105      	bne.n	80042f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80042e8:	2308      	movs	r3, #8
 80042ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	69fa      	ldr	r2, [r7, #28]
 80042f0:	611a      	str	r2, [r3, #16]
          break;
 80042f2:	e009      	b.n	8004308 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80042f4:	2308      	movs	r3, #8
 80042f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	69fa      	ldr	r2, [r7, #28]
 80042fc:	615a      	str	r2, [r3, #20]
          break;
 80042fe:	e003      	b.n	8004308 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004300:	2300      	movs	r3, #0
 8004302:	623b      	str	r3, [r7, #32]
          break;
 8004304:	e000      	b.n	8004308 <HAL_GPIO_Init+0x130>
          break;
 8004306:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	2bff      	cmp	r3, #255	; 0xff
 800430c:	d801      	bhi.n	8004312 <HAL_GPIO_Init+0x13a>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	e001      	b.n	8004316 <HAL_GPIO_Init+0x13e>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	3304      	adds	r3, #4
 8004316:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	2bff      	cmp	r3, #255	; 0xff
 800431c:	d802      	bhi.n	8004324 <HAL_GPIO_Init+0x14c>
 800431e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	e002      	b.n	800432a <HAL_GPIO_Init+0x152>
 8004324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004326:	3b08      	subs	r3, #8
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	210f      	movs	r1, #15
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	fa01 f303 	lsl.w	r3, r1, r3
 8004338:	43db      	mvns	r3, r3
 800433a:	401a      	ands	r2, r3
 800433c:	6a39      	ldr	r1, [r7, #32]
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	fa01 f303 	lsl.w	r3, r1, r3
 8004344:	431a      	orrs	r2, r3
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004352:	2b00      	cmp	r3, #0
 8004354:	f000 80c1 	beq.w	80044da <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004358:	4b53      	ldr	r3, [pc, #332]	; (80044a8 <HAL_GPIO_Init+0x2d0>)
 800435a:	699b      	ldr	r3, [r3, #24]
 800435c:	4a52      	ldr	r2, [pc, #328]	; (80044a8 <HAL_GPIO_Init+0x2d0>)
 800435e:	f043 0301 	orr.w	r3, r3, #1
 8004362:	6193      	str	r3, [r2, #24]
 8004364:	4b50      	ldr	r3, [pc, #320]	; (80044a8 <HAL_GPIO_Init+0x2d0>)
 8004366:	699b      	ldr	r3, [r3, #24]
 8004368:	f003 0301 	and.w	r3, r3, #1
 800436c:	60bb      	str	r3, [r7, #8]
 800436e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004370:	4a4e      	ldr	r2, [pc, #312]	; (80044ac <HAL_GPIO_Init+0x2d4>)
 8004372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004374:	089b      	lsrs	r3, r3, #2
 8004376:	3302      	adds	r3, #2
 8004378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800437c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800437e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004380:	f003 0303 	and.w	r3, r3, #3
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	220f      	movs	r2, #15
 8004388:	fa02 f303 	lsl.w	r3, r2, r3
 800438c:	43db      	mvns	r3, r3
 800438e:	68fa      	ldr	r2, [r7, #12]
 8004390:	4013      	ands	r3, r2
 8004392:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4a46      	ldr	r2, [pc, #280]	; (80044b0 <HAL_GPIO_Init+0x2d8>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d01f      	beq.n	80043dc <HAL_GPIO_Init+0x204>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4a45      	ldr	r2, [pc, #276]	; (80044b4 <HAL_GPIO_Init+0x2dc>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d019      	beq.n	80043d8 <HAL_GPIO_Init+0x200>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	4a44      	ldr	r2, [pc, #272]	; (80044b8 <HAL_GPIO_Init+0x2e0>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d013      	beq.n	80043d4 <HAL_GPIO_Init+0x1fc>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4a43      	ldr	r2, [pc, #268]	; (80044bc <HAL_GPIO_Init+0x2e4>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d00d      	beq.n	80043d0 <HAL_GPIO_Init+0x1f8>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4a42      	ldr	r2, [pc, #264]	; (80044c0 <HAL_GPIO_Init+0x2e8>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d007      	beq.n	80043cc <HAL_GPIO_Init+0x1f4>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a41      	ldr	r2, [pc, #260]	; (80044c4 <HAL_GPIO_Init+0x2ec>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d101      	bne.n	80043c8 <HAL_GPIO_Init+0x1f0>
 80043c4:	2305      	movs	r3, #5
 80043c6:	e00a      	b.n	80043de <HAL_GPIO_Init+0x206>
 80043c8:	2306      	movs	r3, #6
 80043ca:	e008      	b.n	80043de <HAL_GPIO_Init+0x206>
 80043cc:	2304      	movs	r3, #4
 80043ce:	e006      	b.n	80043de <HAL_GPIO_Init+0x206>
 80043d0:	2303      	movs	r3, #3
 80043d2:	e004      	b.n	80043de <HAL_GPIO_Init+0x206>
 80043d4:	2302      	movs	r3, #2
 80043d6:	e002      	b.n	80043de <HAL_GPIO_Init+0x206>
 80043d8:	2301      	movs	r3, #1
 80043da:	e000      	b.n	80043de <HAL_GPIO_Init+0x206>
 80043dc:	2300      	movs	r3, #0
 80043de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043e0:	f002 0203 	and.w	r2, r2, #3
 80043e4:	0092      	lsls	r2, r2, #2
 80043e6:	4093      	lsls	r3, r2
 80043e8:	68fa      	ldr	r2, [r7, #12]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80043ee:	492f      	ldr	r1, [pc, #188]	; (80044ac <HAL_GPIO_Init+0x2d4>)
 80043f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f2:	089b      	lsrs	r3, r3, #2
 80043f4:	3302      	adds	r3, #2
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d006      	beq.n	8004416 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004408:	4b2f      	ldr	r3, [pc, #188]	; (80044c8 <HAL_GPIO_Init+0x2f0>)
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	492e      	ldr	r1, [pc, #184]	; (80044c8 <HAL_GPIO_Init+0x2f0>)
 800440e:	69bb      	ldr	r3, [r7, #24]
 8004410:	4313      	orrs	r3, r2
 8004412:	600b      	str	r3, [r1, #0]
 8004414:	e006      	b.n	8004424 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004416:	4b2c      	ldr	r3, [pc, #176]	; (80044c8 <HAL_GPIO_Init+0x2f0>)
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	43db      	mvns	r3, r3
 800441e:	492a      	ldr	r1, [pc, #168]	; (80044c8 <HAL_GPIO_Init+0x2f0>)
 8004420:	4013      	ands	r3, r2
 8004422:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d006      	beq.n	800443e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004430:	4b25      	ldr	r3, [pc, #148]	; (80044c8 <HAL_GPIO_Init+0x2f0>)
 8004432:	685a      	ldr	r2, [r3, #4]
 8004434:	4924      	ldr	r1, [pc, #144]	; (80044c8 <HAL_GPIO_Init+0x2f0>)
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	4313      	orrs	r3, r2
 800443a:	604b      	str	r3, [r1, #4]
 800443c:	e006      	b.n	800444c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800443e:	4b22      	ldr	r3, [pc, #136]	; (80044c8 <HAL_GPIO_Init+0x2f0>)
 8004440:	685a      	ldr	r2, [r3, #4]
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	43db      	mvns	r3, r3
 8004446:	4920      	ldr	r1, [pc, #128]	; (80044c8 <HAL_GPIO_Init+0x2f0>)
 8004448:	4013      	ands	r3, r2
 800444a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004454:	2b00      	cmp	r3, #0
 8004456:	d006      	beq.n	8004466 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004458:	4b1b      	ldr	r3, [pc, #108]	; (80044c8 <HAL_GPIO_Init+0x2f0>)
 800445a:	689a      	ldr	r2, [r3, #8]
 800445c:	491a      	ldr	r1, [pc, #104]	; (80044c8 <HAL_GPIO_Init+0x2f0>)
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	4313      	orrs	r3, r2
 8004462:	608b      	str	r3, [r1, #8]
 8004464:	e006      	b.n	8004474 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004466:	4b18      	ldr	r3, [pc, #96]	; (80044c8 <HAL_GPIO_Init+0x2f0>)
 8004468:	689a      	ldr	r2, [r3, #8]
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	43db      	mvns	r3, r3
 800446e:	4916      	ldr	r1, [pc, #88]	; (80044c8 <HAL_GPIO_Init+0x2f0>)
 8004470:	4013      	ands	r3, r2
 8004472:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d025      	beq.n	80044cc <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004480:	4b11      	ldr	r3, [pc, #68]	; (80044c8 <HAL_GPIO_Init+0x2f0>)
 8004482:	68da      	ldr	r2, [r3, #12]
 8004484:	4910      	ldr	r1, [pc, #64]	; (80044c8 <HAL_GPIO_Init+0x2f0>)
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	4313      	orrs	r3, r2
 800448a:	60cb      	str	r3, [r1, #12]
 800448c:	e025      	b.n	80044da <HAL_GPIO_Init+0x302>
 800448e:	bf00      	nop
 8004490:	10320000 	.word	0x10320000
 8004494:	10310000 	.word	0x10310000
 8004498:	10220000 	.word	0x10220000
 800449c:	10210000 	.word	0x10210000
 80044a0:	10120000 	.word	0x10120000
 80044a4:	10110000 	.word	0x10110000
 80044a8:	40021000 	.word	0x40021000
 80044ac:	40010000 	.word	0x40010000
 80044b0:	40010800 	.word	0x40010800
 80044b4:	40010c00 	.word	0x40010c00
 80044b8:	40011000 	.word	0x40011000
 80044bc:	40011400 	.word	0x40011400
 80044c0:	40011800 	.word	0x40011800
 80044c4:	40011c00 	.word	0x40011c00
 80044c8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80044cc:	4b0b      	ldr	r3, [pc, #44]	; (80044fc <HAL_GPIO_Init+0x324>)
 80044ce:	68da      	ldr	r2, [r3, #12]
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	43db      	mvns	r3, r3
 80044d4:	4909      	ldr	r1, [pc, #36]	; (80044fc <HAL_GPIO_Init+0x324>)
 80044d6:	4013      	ands	r3, r2
 80044d8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80044da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044dc:	3301      	adds	r3, #1
 80044de:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e6:	fa22 f303 	lsr.w	r3, r2, r3
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	f47f ae7e 	bne.w	80041ec <HAL_GPIO_Init+0x14>
  }
}
 80044f0:	bf00      	nop
 80044f2:	bf00      	nop
 80044f4:	372c      	adds	r7, #44	; 0x2c
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bc80      	pop	{r7}
 80044fa:	4770      	bx	lr
 80044fc:	40010400 	.word	0x40010400

08004500 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	460b      	mov	r3, r1
 800450a:	807b      	strh	r3, [r7, #2]
 800450c:	4613      	mov	r3, r2
 800450e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004510:	787b      	ldrb	r3, [r7, #1]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d003      	beq.n	800451e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004516:	887a      	ldrh	r2, [r7, #2]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800451c:	e003      	b.n	8004526 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800451e:	887b      	ldrh	r3, [r7, #2]
 8004520:	041a      	lsls	r2, r3, #16
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	611a      	str	r2, [r3, #16]
}
 8004526:	bf00      	nop
 8004528:	370c      	adds	r7, #12
 800452a:	46bd      	mov	sp, r7
 800452c:	bc80      	pop	{r7}
 800452e:	4770      	bx	lr

08004530 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b082      	sub	sp, #8
 8004534:	af00      	add	r7, sp, #0
 8004536:	4603      	mov	r3, r0
 8004538:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800453a:	4b08      	ldr	r3, [pc, #32]	; (800455c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800453c:	695a      	ldr	r2, [r3, #20]
 800453e:	88fb      	ldrh	r3, [r7, #6]
 8004540:	4013      	ands	r3, r2
 8004542:	2b00      	cmp	r3, #0
 8004544:	d006      	beq.n	8004554 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004546:	4a05      	ldr	r2, [pc, #20]	; (800455c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004548:	88fb      	ldrh	r3, [r7, #6]
 800454a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800454c:	88fb      	ldrh	r3, [r7, #6]
 800454e:	4618      	mov	r0, r3
 8004550:	f000 f806 	bl	8004560 <HAL_GPIO_EXTI_Callback>
  }
}
 8004554:	bf00      	nop
 8004556:	3708      	adds	r7, #8
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}
 800455c:	40010400 	.word	0x40010400

08004560 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	4603      	mov	r3, r0
 8004568:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800456a:	bf00      	nop
 800456c:	370c      	adds	r7, #12
 800456e:	46bd      	mov	sp, r7
 8004570:	bc80      	pop	{r7}
 8004572:	4770      	bx	lr

08004574 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004574:	b480      	push	{r7}
 8004576:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8004578:	4b03      	ldr	r3, [pc, #12]	; (8004588 <HAL_PWR_EnableBkUpAccess+0x14>)
 800457a:	2201      	movs	r2, #1
 800457c:	601a      	str	r2, [r3, #0]
}
 800457e:	bf00      	nop
 8004580:	46bd      	mov	sp, r7
 8004582:	bc80      	pop	{r7}
 8004584:	4770      	bx	lr
 8004586:	bf00      	nop
 8004588:	420e0020 	.word	0x420e0020

0800458c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b086      	sub	sp, #24
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d101      	bne.n	800459e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e26c      	b.n	8004a78 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0301 	and.w	r3, r3, #1
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	f000 8087 	beq.w	80046ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80045ac:	4b92      	ldr	r3, [pc, #584]	; (80047f8 <HAL_RCC_OscConfig+0x26c>)
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f003 030c 	and.w	r3, r3, #12
 80045b4:	2b04      	cmp	r3, #4
 80045b6:	d00c      	beq.n	80045d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80045b8:	4b8f      	ldr	r3, [pc, #572]	; (80047f8 <HAL_RCC_OscConfig+0x26c>)
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	f003 030c 	and.w	r3, r3, #12
 80045c0:	2b08      	cmp	r3, #8
 80045c2:	d112      	bne.n	80045ea <HAL_RCC_OscConfig+0x5e>
 80045c4:	4b8c      	ldr	r3, [pc, #560]	; (80047f8 <HAL_RCC_OscConfig+0x26c>)
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045d0:	d10b      	bne.n	80045ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045d2:	4b89      	ldr	r3, [pc, #548]	; (80047f8 <HAL_RCC_OscConfig+0x26c>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d06c      	beq.n	80046b8 <HAL_RCC_OscConfig+0x12c>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d168      	bne.n	80046b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e246      	b.n	8004a78 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045f2:	d106      	bne.n	8004602 <HAL_RCC_OscConfig+0x76>
 80045f4:	4b80      	ldr	r3, [pc, #512]	; (80047f8 <HAL_RCC_OscConfig+0x26c>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a7f      	ldr	r2, [pc, #508]	; (80047f8 <HAL_RCC_OscConfig+0x26c>)
 80045fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045fe:	6013      	str	r3, [r2, #0]
 8004600:	e02e      	b.n	8004660 <HAL_RCC_OscConfig+0xd4>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d10c      	bne.n	8004624 <HAL_RCC_OscConfig+0x98>
 800460a:	4b7b      	ldr	r3, [pc, #492]	; (80047f8 <HAL_RCC_OscConfig+0x26c>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a7a      	ldr	r2, [pc, #488]	; (80047f8 <HAL_RCC_OscConfig+0x26c>)
 8004610:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004614:	6013      	str	r3, [r2, #0]
 8004616:	4b78      	ldr	r3, [pc, #480]	; (80047f8 <HAL_RCC_OscConfig+0x26c>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a77      	ldr	r2, [pc, #476]	; (80047f8 <HAL_RCC_OscConfig+0x26c>)
 800461c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004620:	6013      	str	r3, [r2, #0]
 8004622:	e01d      	b.n	8004660 <HAL_RCC_OscConfig+0xd4>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800462c:	d10c      	bne.n	8004648 <HAL_RCC_OscConfig+0xbc>
 800462e:	4b72      	ldr	r3, [pc, #456]	; (80047f8 <HAL_RCC_OscConfig+0x26c>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a71      	ldr	r2, [pc, #452]	; (80047f8 <HAL_RCC_OscConfig+0x26c>)
 8004634:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004638:	6013      	str	r3, [r2, #0]
 800463a:	4b6f      	ldr	r3, [pc, #444]	; (80047f8 <HAL_RCC_OscConfig+0x26c>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a6e      	ldr	r2, [pc, #440]	; (80047f8 <HAL_RCC_OscConfig+0x26c>)
 8004640:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004644:	6013      	str	r3, [r2, #0]
 8004646:	e00b      	b.n	8004660 <HAL_RCC_OscConfig+0xd4>
 8004648:	4b6b      	ldr	r3, [pc, #428]	; (80047f8 <HAL_RCC_OscConfig+0x26c>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a6a      	ldr	r2, [pc, #424]	; (80047f8 <HAL_RCC_OscConfig+0x26c>)
 800464e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004652:	6013      	str	r3, [r2, #0]
 8004654:	4b68      	ldr	r3, [pc, #416]	; (80047f8 <HAL_RCC_OscConfig+0x26c>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a67      	ldr	r2, [pc, #412]	; (80047f8 <HAL_RCC_OscConfig+0x26c>)
 800465a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800465e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d013      	beq.n	8004690 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004668:	f7ff fb38 	bl	8003cdc <HAL_GetTick>
 800466c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800466e:	e008      	b.n	8004682 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004670:	f7ff fb34 	bl	8003cdc <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	2b64      	cmp	r3, #100	; 0x64
 800467c:	d901      	bls.n	8004682 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e1fa      	b.n	8004a78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004682:	4b5d      	ldr	r3, [pc, #372]	; (80047f8 <HAL_RCC_OscConfig+0x26c>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d0f0      	beq.n	8004670 <HAL_RCC_OscConfig+0xe4>
 800468e:	e014      	b.n	80046ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004690:	f7ff fb24 	bl	8003cdc <HAL_GetTick>
 8004694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004696:	e008      	b.n	80046aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004698:	f7ff fb20 	bl	8003cdc <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	2b64      	cmp	r3, #100	; 0x64
 80046a4:	d901      	bls.n	80046aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e1e6      	b.n	8004a78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046aa:	4b53      	ldr	r3, [pc, #332]	; (80047f8 <HAL_RCC_OscConfig+0x26c>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1f0      	bne.n	8004698 <HAL_RCC_OscConfig+0x10c>
 80046b6:	e000      	b.n	80046ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0302 	and.w	r3, r3, #2
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d063      	beq.n	800478e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80046c6:	4b4c      	ldr	r3, [pc, #304]	; (80047f8 <HAL_RCC_OscConfig+0x26c>)
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	f003 030c 	and.w	r3, r3, #12
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00b      	beq.n	80046ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80046d2:	4b49      	ldr	r3, [pc, #292]	; (80047f8 <HAL_RCC_OscConfig+0x26c>)
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	f003 030c 	and.w	r3, r3, #12
 80046da:	2b08      	cmp	r3, #8
 80046dc:	d11c      	bne.n	8004718 <HAL_RCC_OscConfig+0x18c>
 80046de:	4b46      	ldr	r3, [pc, #280]	; (80047f8 <HAL_RCC_OscConfig+0x26c>)
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d116      	bne.n	8004718 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046ea:	4b43      	ldr	r3, [pc, #268]	; (80047f8 <HAL_RCC_OscConfig+0x26c>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0302 	and.w	r3, r3, #2
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d005      	beq.n	8004702 <HAL_RCC_OscConfig+0x176>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d001      	beq.n	8004702 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e1ba      	b.n	8004a78 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004702:	4b3d      	ldr	r3, [pc, #244]	; (80047f8 <HAL_RCC_OscConfig+0x26c>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	695b      	ldr	r3, [r3, #20]
 800470e:	00db      	lsls	r3, r3, #3
 8004710:	4939      	ldr	r1, [pc, #228]	; (80047f8 <HAL_RCC_OscConfig+0x26c>)
 8004712:	4313      	orrs	r3, r2
 8004714:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004716:	e03a      	b.n	800478e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	691b      	ldr	r3, [r3, #16]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d020      	beq.n	8004762 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004720:	4b36      	ldr	r3, [pc, #216]	; (80047fc <HAL_RCC_OscConfig+0x270>)
 8004722:	2201      	movs	r2, #1
 8004724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004726:	f7ff fad9 	bl	8003cdc <HAL_GetTick>
 800472a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800472c:	e008      	b.n	8004740 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800472e:	f7ff fad5 	bl	8003cdc <HAL_GetTick>
 8004732:	4602      	mov	r2, r0
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	2b02      	cmp	r3, #2
 800473a:	d901      	bls.n	8004740 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800473c:	2303      	movs	r3, #3
 800473e:	e19b      	b.n	8004a78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004740:	4b2d      	ldr	r3, [pc, #180]	; (80047f8 <HAL_RCC_OscConfig+0x26c>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0302 	and.w	r3, r3, #2
 8004748:	2b00      	cmp	r3, #0
 800474a:	d0f0      	beq.n	800472e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800474c:	4b2a      	ldr	r3, [pc, #168]	; (80047f8 <HAL_RCC_OscConfig+0x26c>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	695b      	ldr	r3, [r3, #20]
 8004758:	00db      	lsls	r3, r3, #3
 800475a:	4927      	ldr	r1, [pc, #156]	; (80047f8 <HAL_RCC_OscConfig+0x26c>)
 800475c:	4313      	orrs	r3, r2
 800475e:	600b      	str	r3, [r1, #0]
 8004760:	e015      	b.n	800478e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004762:	4b26      	ldr	r3, [pc, #152]	; (80047fc <HAL_RCC_OscConfig+0x270>)
 8004764:	2200      	movs	r2, #0
 8004766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004768:	f7ff fab8 	bl	8003cdc <HAL_GetTick>
 800476c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800476e:	e008      	b.n	8004782 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004770:	f7ff fab4 	bl	8003cdc <HAL_GetTick>
 8004774:	4602      	mov	r2, r0
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	2b02      	cmp	r3, #2
 800477c:	d901      	bls.n	8004782 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e17a      	b.n	8004a78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004782:	4b1d      	ldr	r3, [pc, #116]	; (80047f8 <HAL_RCC_OscConfig+0x26c>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0302 	and.w	r3, r3, #2
 800478a:	2b00      	cmp	r3, #0
 800478c:	d1f0      	bne.n	8004770 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 0308 	and.w	r3, r3, #8
 8004796:	2b00      	cmp	r3, #0
 8004798:	d03a      	beq.n	8004810 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	699b      	ldr	r3, [r3, #24]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d019      	beq.n	80047d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047a2:	4b17      	ldr	r3, [pc, #92]	; (8004800 <HAL_RCC_OscConfig+0x274>)
 80047a4:	2201      	movs	r2, #1
 80047a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047a8:	f7ff fa98 	bl	8003cdc <HAL_GetTick>
 80047ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047ae:	e008      	b.n	80047c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047b0:	f7ff fa94 	bl	8003cdc <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d901      	bls.n	80047c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e15a      	b.n	8004a78 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047c2:	4b0d      	ldr	r3, [pc, #52]	; (80047f8 <HAL_RCC_OscConfig+0x26c>)
 80047c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c6:	f003 0302 	and.w	r3, r3, #2
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d0f0      	beq.n	80047b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80047ce:	2001      	movs	r0, #1
 80047d0:	f000 fada 	bl	8004d88 <RCC_Delay>
 80047d4:	e01c      	b.n	8004810 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047d6:	4b0a      	ldr	r3, [pc, #40]	; (8004800 <HAL_RCC_OscConfig+0x274>)
 80047d8:	2200      	movs	r2, #0
 80047da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047dc:	f7ff fa7e 	bl	8003cdc <HAL_GetTick>
 80047e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047e2:	e00f      	b.n	8004804 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047e4:	f7ff fa7a 	bl	8003cdc <HAL_GetTick>
 80047e8:	4602      	mov	r2, r0
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d908      	bls.n	8004804 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	e140      	b.n	8004a78 <HAL_RCC_OscConfig+0x4ec>
 80047f6:	bf00      	nop
 80047f8:	40021000 	.word	0x40021000
 80047fc:	42420000 	.word	0x42420000
 8004800:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004804:	4b9e      	ldr	r3, [pc, #632]	; (8004a80 <HAL_RCC_OscConfig+0x4f4>)
 8004806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004808:	f003 0302 	and.w	r3, r3, #2
 800480c:	2b00      	cmp	r3, #0
 800480e:	d1e9      	bne.n	80047e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0304 	and.w	r3, r3, #4
 8004818:	2b00      	cmp	r3, #0
 800481a:	f000 80a6 	beq.w	800496a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800481e:	2300      	movs	r3, #0
 8004820:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004822:	4b97      	ldr	r3, [pc, #604]	; (8004a80 <HAL_RCC_OscConfig+0x4f4>)
 8004824:	69db      	ldr	r3, [r3, #28]
 8004826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d10d      	bne.n	800484a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800482e:	4b94      	ldr	r3, [pc, #592]	; (8004a80 <HAL_RCC_OscConfig+0x4f4>)
 8004830:	69db      	ldr	r3, [r3, #28]
 8004832:	4a93      	ldr	r2, [pc, #588]	; (8004a80 <HAL_RCC_OscConfig+0x4f4>)
 8004834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004838:	61d3      	str	r3, [r2, #28]
 800483a:	4b91      	ldr	r3, [pc, #580]	; (8004a80 <HAL_RCC_OscConfig+0x4f4>)
 800483c:	69db      	ldr	r3, [r3, #28]
 800483e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004842:	60bb      	str	r3, [r7, #8]
 8004844:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004846:	2301      	movs	r3, #1
 8004848:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800484a:	4b8e      	ldr	r3, [pc, #568]	; (8004a84 <HAL_RCC_OscConfig+0x4f8>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004852:	2b00      	cmp	r3, #0
 8004854:	d118      	bne.n	8004888 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004856:	4b8b      	ldr	r3, [pc, #556]	; (8004a84 <HAL_RCC_OscConfig+0x4f8>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a8a      	ldr	r2, [pc, #552]	; (8004a84 <HAL_RCC_OscConfig+0x4f8>)
 800485c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004860:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004862:	f7ff fa3b 	bl	8003cdc <HAL_GetTick>
 8004866:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004868:	e008      	b.n	800487c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800486a:	f7ff fa37 	bl	8003cdc <HAL_GetTick>
 800486e:	4602      	mov	r2, r0
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	2b64      	cmp	r3, #100	; 0x64
 8004876:	d901      	bls.n	800487c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004878:	2303      	movs	r3, #3
 800487a:	e0fd      	b.n	8004a78 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800487c:	4b81      	ldr	r3, [pc, #516]	; (8004a84 <HAL_RCC_OscConfig+0x4f8>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004884:	2b00      	cmp	r3, #0
 8004886:	d0f0      	beq.n	800486a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	2b01      	cmp	r3, #1
 800488e:	d106      	bne.n	800489e <HAL_RCC_OscConfig+0x312>
 8004890:	4b7b      	ldr	r3, [pc, #492]	; (8004a80 <HAL_RCC_OscConfig+0x4f4>)
 8004892:	6a1b      	ldr	r3, [r3, #32]
 8004894:	4a7a      	ldr	r2, [pc, #488]	; (8004a80 <HAL_RCC_OscConfig+0x4f4>)
 8004896:	f043 0301 	orr.w	r3, r3, #1
 800489a:	6213      	str	r3, [r2, #32]
 800489c:	e02d      	b.n	80048fa <HAL_RCC_OscConfig+0x36e>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d10c      	bne.n	80048c0 <HAL_RCC_OscConfig+0x334>
 80048a6:	4b76      	ldr	r3, [pc, #472]	; (8004a80 <HAL_RCC_OscConfig+0x4f4>)
 80048a8:	6a1b      	ldr	r3, [r3, #32]
 80048aa:	4a75      	ldr	r2, [pc, #468]	; (8004a80 <HAL_RCC_OscConfig+0x4f4>)
 80048ac:	f023 0301 	bic.w	r3, r3, #1
 80048b0:	6213      	str	r3, [r2, #32]
 80048b2:	4b73      	ldr	r3, [pc, #460]	; (8004a80 <HAL_RCC_OscConfig+0x4f4>)
 80048b4:	6a1b      	ldr	r3, [r3, #32]
 80048b6:	4a72      	ldr	r2, [pc, #456]	; (8004a80 <HAL_RCC_OscConfig+0x4f4>)
 80048b8:	f023 0304 	bic.w	r3, r3, #4
 80048bc:	6213      	str	r3, [r2, #32]
 80048be:	e01c      	b.n	80048fa <HAL_RCC_OscConfig+0x36e>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	2b05      	cmp	r3, #5
 80048c6:	d10c      	bne.n	80048e2 <HAL_RCC_OscConfig+0x356>
 80048c8:	4b6d      	ldr	r3, [pc, #436]	; (8004a80 <HAL_RCC_OscConfig+0x4f4>)
 80048ca:	6a1b      	ldr	r3, [r3, #32]
 80048cc:	4a6c      	ldr	r2, [pc, #432]	; (8004a80 <HAL_RCC_OscConfig+0x4f4>)
 80048ce:	f043 0304 	orr.w	r3, r3, #4
 80048d2:	6213      	str	r3, [r2, #32]
 80048d4:	4b6a      	ldr	r3, [pc, #424]	; (8004a80 <HAL_RCC_OscConfig+0x4f4>)
 80048d6:	6a1b      	ldr	r3, [r3, #32]
 80048d8:	4a69      	ldr	r2, [pc, #420]	; (8004a80 <HAL_RCC_OscConfig+0x4f4>)
 80048da:	f043 0301 	orr.w	r3, r3, #1
 80048de:	6213      	str	r3, [r2, #32]
 80048e0:	e00b      	b.n	80048fa <HAL_RCC_OscConfig+0x36e>
 80048e2:	4b67      	ldr	r3, [pc, #412]	; (8004a80 <HAL_RCC_OscConfig+0x4f4>)
 80048e4:	6a1b      	ldr	r3, [r3, #32]
 80048e6:	4a66      	ldr	r2, [pc, #408]	; (8004a80 <HAL_RCC_OscConfig+0x4f4>)
 80048e8:	f023 0301 	bic.w	r3, r3, #1
 80048ec:	6213      	str	r3, [r2, #32]
 80048ee:	4b64      	ldr	r3, [pc, #400]	; (8004a80 <HAL_RCC_OscConfig+0x4f4>)
 80048f0:	6a1b      	ldr	r3, [r3, #32]
 80048f2:	4a63      	ldr	r2, [pc, #396]	; (8004a80 <HAL_RCC_OscConfig+0x4f4>)
 80048f4:	f023 0304 	bic.w	r3, r3, #4
 80048f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d015      	beq.n	800492e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004902:	f7ff f9eb 	bl	8003cdc <HAL_GetTick>
 8004906:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004908:	e00a      	b.n	8004920 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800490a:	f7ff f9e7 	bl	8003cdc <HAL_GetTick>
 800490e:	4602      	mov	r2, r0
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	f241 3288 	movw	r2, #5000	; 0x1388
 8004918:	4293      	cmp	r3, r2
 800491a:	d901      	bls.n	8004920 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800491c:	2303      	movs	r3, #3
 800491e:	e0ab      	b.n	8004a78 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004920:	4b57      	ldr	r3, [pc, #348]	; (8004a80 <HAL_RCC_OscConfig+0x4f4>)
 8004922:	6a1b      	ldr	r3, [r3, #32]
 8004924:	f003 0302 	and.w	r3, r3, #2
 8004928:	2b00      	cmp	r3, #0
 800492a:	d0ee      	beq.n	800490a <HAL_RCC_OscConfig+0x37e>
 800492c:	e014      	b.n	8004958 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800492e:	f7ff f9d5 	bl	8003cdc <HAL_GetTick>
 8004932:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004934:	e00a      	b.n	800494c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004936:	f7ff f9d1 	bl	8003cdc <HAL_GetTick>
 800493a:	4602      	mov	r2, r0
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	f241 3288 	movw	r2, #5000	; 0x1388
 8004944:	4293      	cmp	r3, r2
 8004946:	d901      	bls.n	800494c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004948:	2303      	movs	r3, #3
 800494a:	e095      	b.n	8004a78 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800494c:	4b4c      	ldr	r3, [pc, #304]	; (8004a80 <HAL_RCC_OscConfig+0x4f4>)
 800494e:	6a1b      	ldr	r3, [r3, #32]
 8004950:	f003 0302 	and.w	r3, r3, #2
 8004954:	2b00      	cmp	r3, #0
 8004956:	d1ee      	bne.n	8004936 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004958:	7dfb      	ldrb	r3, [r7, #23]
 800495a:	2b01      	cmp	r3, #1
 800495c:	d105      	bne.n	800496a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800495e:	4b48      	ldr	r3, [pc, #288]	; (8004a80 <HAL_RCC_OscConfig+0x4f4>)
 8004960:	69db      	ldr	r3, [r3, #28]
 8004962:	4a47      	ldr	r2, [pc, #284]	; (8004a80 <HAL_RCC_OscConfig+0x4f4>)
 8004964:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004968:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	69db      	ldr	r3, [r3, #28]
 800496e:	2b00      	cmp	r3, #0
 8004970:	f000 8081 	beq.w	8004a76 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004974:	4b42      	ldr	r3, [pc, #264]	; (8004a80 <HAL_RCC_OscConfig+0x4f4>)
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f003 030c 	and.w	r3, r3, #12
 800497c:	2b08      	cmp	r3, #8
 800497e:	d061      	beq.n	8004a44 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	69db      	ldr	r3, [r3, #28]
 8004984:	2b02      	cmp	r3, #2
 8004986:	d146      	bne.n	8004a16 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004988:	4b3f      	ldr	r3, [pc, #252]	; (8004a88 <HAL_RCC_OscConfig+0x4fc>)
 800498a:	2200      	movs	r2, #0
 800498c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800498e:	f7ff f9a5 	bl	8003cdc <HAL_GetTick>
 8004992:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004994:	e008      	b.n	80049a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004996:	f7ff f9a1 	bl	8003cdc <HAL_GetTick>
 800499a:	4602      	mov	r2, r0
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	1ad3      	subs	r3, r2, r3
 80049a0:	2b02      	cmp	r3, #2
 80049a2:	d901      	bls.n	80049a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80049a4:	2303      	movs	r3, #3
 80049a6:	e067      	b.n	8004a78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049a8:	4b35      	ldr	r3, [pc, #212]	; (8004a80 <HAL_RCC_OscConfig+0x4f4>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d1f0      	bne.n	8004996 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6a1b      	ldr	r3, [r3, #32]
 80049b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049bc:	d108      	bne.n	80049d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80049be:	4b30      	ldr	r3, [pc, #192]	; (8004a80 <HAL_RCC_OscConfig+0x4f4>)
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	492d      	ldr	r1, [pc, #180]	; (8004a80 <HAL_RCC_OscConfig+0x4f4>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049d0:	4b2b      	ldr	r3, [pc, #172]	; (8004a80 <HAL_RCC_OscConfig+0x4f4>)
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a19      	ldr	r1, [r3, #32]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e0:	430b      	orrs	r3, r1
 80049e2:	4927      	ldr	r1, [pc, #156]	; (8004a80 <HAL_RCC_OscConfig+0x4f4>)
 80049e4:	4313      	orrs	r3, r2
 80049e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049e8:	4b27      	ldr	r3, [pc, #156]	; (8004a88 <HAL_RCC_OscConfig+0x4fc>)
 80049ea:	2201      	movs	r2, #1
 80049ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049ee:	f7ff f975 	bl	8003cdc <HAL_GetTick>
 80049f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80049f4:	e008      	b.n	8004a08 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049f6:	f7ff f971 	bl	8003cdc <HAL_GetTick>
 80049fa:	4602      	mov	r2, r0
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	2b02      	cmp	r3, #2
 8004a02:	d901      	bls.n	8004a08 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004a04:	2303      	movs	r3, #3
 8004a06:	e037      	b.n	8004a78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a08:	4b1d      	ldr	r3, [pc, #116]	; (8004a80 <HAL_RCC_OscConfig+0x4f4>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d0f0      	beq.n	80049f6 <HAL_RCC_OscConfig+0x46a>
 8004a14:	e02f      	b.n	8004a76 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a16:	4b1c      	ldr	r3, [pc, #112]	; (8004a88 <HAL_RCC_OscConfig+0x4fc>)
 8004a18:	2200      	movs	r2, #0
 8004a1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a1c:	f7ff f95e 	bl	8003cdc <HAL_GetTick>
 8004a20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a22:	e008      	b.n	8004a36 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a24:	f7ff f95a 	bl	8003cdc <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d901      	bls.n	8004a36 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e020      	b.n	8004a78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a36:	4b12      	ldr	r3, [pc, #72]	; (8004a80 <HAL_RCC_OscConfig+0x4f4>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d1f0      	bne.n	8004a24 <HAL_RCC_OscConfig+0x498>
 8004a42:	e018      	b.n	8004a76 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	69db      	ldr	r3, [r3, #28]
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d101      	bne.n	8004a50 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e013      	b.n	8004a78 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004a50:	4b0b      	ldr	r3, [pc, #44]	; (8004a80 <HAL_RCC_OscConfig+0x4f4>)
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a1b      	ldr	r3, [r3, #32]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d106      	bne.n	8004a72 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d001      	beq.n	8004a76 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e000      	b.n	8004a78 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004a76:	2300      	movs	r3, #0
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3718      	adds	r7, #24
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	40021000 	.word	0x40021000
 8004a84:	40007000 	.word	0x40007000
 8004a88:	42420060 	.word	0x42420060

08004a8c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d101      	bne.n	8004aa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e0d0      	b.n	8004c42 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004aa0:	4b6a      	ldr	r3, [pc, #424]	; (8004c4c <HAL_RCC_ClockConfig+0x1c0>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 0307 	and.w	r3, r3, #7
 8004aa8:	683a      	ldr	r2, [r7, #0]
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d910      	bls.n	8004ad0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aae:	4b67      	ldr	r3, [pc, #412]	; (8004c4c <HAL_RCC_ClockConfig+0x1c0>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f023 0207 	bic.w	r2, r3, #7
 8004ab6:	4965      	ldr	r1, [pc, #404]	; (8004c4c <HAL_RCC_ClockConfig+0x1c0>)
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004abe:	4b63      	ldr	r3, [pc, #396]	; (8004c4c <HAL_RCC_ClockConfig+0x1c0>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0307 	and.w	r3, r3, #7
 8004ac6:	683a      	ldr	r2, [r7, #0]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d001      	beq.n	8004ad0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e0b8      	b.n	8004c42 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0302 	and.w	r3, r3, #2
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d020      	beq.n	8004b1e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0304 	and.w	r3, r3, #4
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d005      	beq.n	8004af4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ae8:	4b59      	ldr	r3, [pc, #356]	; (8004c50 <HAL_RCC_ClockConfig+0x1c4>)
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	4a58      	ldr	r2, [pc, #352]	; (8004c50 <HAL_RCC_ClockConfig+0x1c4>)
 8004aee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004af2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0308 	and.w	r3, r3, #8
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d005      	beq.n	8004b0c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b00:	4b53      	ldr	r3, [pc, #332]	; (8004c50 <HAL_RCC_ClockConfig+0x1c4>)
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	4a52      	ldr	r2, [pc, #328]	; (8004c50 <HAL_RCC_ClockConfig+0x1c4>)
 8004b06:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004b0a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b0c:	4b50      	ldr	r3, [pc, #320]	; (8004c50 <HAL_RCC_ClockConfig+0x1c4>)
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	494d      	ldr	r1, [pc, #308]	; (8004c50 <HAL_RCC_ClockConfig+0x1c4>)
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0301 	and.w	r3, r3, #1
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d040      	beq.n	8004bac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d107      	bne.n	8004b42 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b32:	4b47      	ldr	r3, [pc, #284]	; (8004c50 <HAL_RCC_ClockConfig+0x1c4>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d115      	bne.n	8004b6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e07f      	b.n	8004c42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	2b02      	cmp	r3, #2
 8004b48:	d107      	bne.n	8004b5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b4a:	4b41      	ldr	r3, [pc, #260]	; (8004c50 <HAL_RCC_ClockConfig+0x1c4>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d109      	bne.n	8004b6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e073      	b.n	8004c42 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b5a:	4b3d      	ldr	r3, [pc, #244]	; (8004c50 <HAL_RCC_ClockConfig+0x1c4>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 0302 	and.w	r3, r3, #2
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d101      	bne.n	8004b6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e06b      	b.n	8004c42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b6a:	4b39      	ldr	r3, [pc, #228]	; (8004c50 <HAL_RCC_ClockConfig+0x1c4>)
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	f023 0203 	bic.w	r2, r3, #3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	4936      	ldr	r1, [pc, #216]	; (8004c50 <HAL_RCC_ClockConfig+0x1c4>)
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b7c:	f7ff f8ae 	bl	8003cdc <HAL_GetTick>
 8004b80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b82:	e00a      	b.n	8004b9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b84:	f7ff f8aa 	bl	8003cdc <HAL_GetTick>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d901      	bls.n	8004b9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e053      	b.n	8004c42 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b9a:	4b2d      	ldr	r3, [pc, #180]	; (8004c50 <HAL_RCC_ClockConfig+0x1c4>)
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	f003 020c 	and.w	r2, r3, #12
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d1eb      	bne.n	8004b84 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004bac:	4b27      	ldr	r3, [pc, #156]	; (8004c4c <HAL_RCC_ClockConfig+0x1c0>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 0307 	and.w	r3, r3, #7
 8004bb4:	683a      	ldr	r2, [r7, #0]
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d210      	bcs.n	8004bdc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bba:	4b24      	ldr	r3, [pc, #144]	; (8004c4c <HAL_RCC_ClockConfig+0x1c0>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f023 0207 	bic.w	r2, r3, #7
 8004bc2:	4922      	ldr	r1, [pc, #136]	; (8004c4c <HAL_RCC_ClockConfig+0x1c0>)
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bca:	4b20      	ldr	r3, [pc, #128]	; (8004c4c <HAL_RCC_ClockConfig+0x1c0>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 0307 	and.w	r3, r3, #7
 8004bd2:	683a      	ldr	r2, [r7, #0]
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d001      	beq.n	8004bdc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e032      	b.n	8004c42 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0304 	and.w	r3, r3, #4
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d008      	beq.n	8004bfa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004be8:	4b19      	ldr	r3, [pc, #100]	; (8004c50 <HAL_RCC_ClockConfig+0x1c4>)
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	4916      	ldr	r1, [pc, #88]	; (8004c50 <HAL_RCC_ClockConfig+0x1c4>)
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 0308 	and.w	r3, r3, #8
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d009      	beq.n	8004c1a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004c06:	4b12      	ldr	r3, [pc, #72]	; (8004c50 <HAL_RCC_ClockConfig+0x1c4>)
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	00db      	lsls	r3, r3, #3
 8004c14:	490e      	ldr	r1, [pc, #56]	; (8004c50 <HAL_RCC_ClockConfig+0x1c4>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c1a:	f000 f821 	bl	8004c60 <HAL_RCC_GetSysClockFreq>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	4b0b      	ldr	r3, [pc, #44]	; (8004c50 <HAL_RCC_ClockConfig+0x1c4>)
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	091b      	lsrs	r3, r3, #4
 8004c26:	f003 030f 	and.w	r3, r3, #15
 8004c2a:	490a      	ldr	r1, [pc, #40]	; (8004c54 <HAL_RCC_ClockConfig+0x1c8>)
 8004c2c:	5ccb      	ldrb	r3, [r1, r3]
 8004c2e:	fa22 f303 	lsr.w	r3, r2, r3
 8004c32:	4a09      	ldr	r2, [pc, #36]	; (8004c58 <HAL_RCC_ClockConfig+0x1cc>)
 8004c34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004c36:	4b09      	ldr	r3, [pc, #36]	; (8004c5c <HAL_RCC_ClockConfig+0x1d0>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f7ff f80c 	bl	8003c58 <HAL_InitTick>

  return HAL_OK;
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3710      	adds	r7, #16
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	40022000 	.word	0x40022000
 8004c50:	40021000 	.word	0x40021000
 8004c54:	0800a944 	.word	0x0800a944
 8004c58:	20000100 	.word	0x20000100
 8004c5c:	20000104 	.word	0x20000104

08004c60 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c60:	b490      	push	{r4, r7}
 8004c62:	b08a      	sub	sp, #40	; 0x28
 8004c64:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004c66:	4b2a      	ldr	r3, [pc, #168]	; (8004d10 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004c68:	1d3c      	adds	r4, r7, #4
 8004c6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c6c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004c70:	f240 2301 	movw	r3, #513	; 0x201
 8004c74:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004c76:	2300      	movs	r3, #0
 8004c78:	61fb      	str	r3, [r7, #28]
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	61bb      	str	r3, [r7, #24]
 8004c7e:	2300      	movs	r3, #0
 8004c80:	627b      	str	r3, [r7, #36]	; 0x24
 8004c82:	2300      	movs	r3, #0
 8004c84:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004c86:	2300      	movs	r3, #0
 8004c88:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004c8a:	4b22      	ldr	r3, [pc, #136]	; (8004d14 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004c90:	69fb      	ldr	r3, [r7, #28]
 8004c92:	f003 030c 	and.w	r3, r3, #12
 8004c96:	2b04      	cmp	r3, #4
 8004c98:	d002      	beq.n	8004ca0 <HAL_RCC_GetSysClockFreq+0x40>
 8004c9a:	2b08      	cmp	r3, #8
 8004c9c:	d003      	beq.n	8004ca6 <HAL_RCC_GetSysClockFreq+0x46>
 8004c9e:	e02d      	b.n	8004cfc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004ca0:	4b1d      	ldr	r3, [pc, #116]	; (8004d18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ca2:	623b      	str	r3, [r7, #32]
      break;
 8004ca4:	e02d      	b.n	8004d02 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	0c9b      	lsrs	r3, r3, #18
 8004caa:	f003 030f 	and.w	r3, r3, #15
 8004cae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004cb2:	4413      	add	r3, r2
 8004cb4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004cb8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d013      	beq.n	8004cec <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004cc4:	4b13      	ldr	r3, [pc, #76]	; (8004d14 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	0c5b      	lsrs	r3, r3, #17
 8004cca:	f003 0301 	and.w	r3, r3, #1
 8004cce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004cd2:	4413      	add	r3, r2
 8004cd4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004cd8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	4a0e      	ldr	r2, [pc, #56]	; (8004d18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004cde:	fb02 f203 	mul.w	r2, r2, r3
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ce8:	627b      	str	r3, [r7, #36]	; 0x24
 8004cea:	e004      	b.n	8004cf6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	4a0b      	ldr	r2, [pc, #44]	; (8004d1c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004cf0:	fb02 f303 	mul.w	r3, r2, r3
 8004cf4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf8:	623b      	str	r3, [r7, #32]
      break;
 8004cfa:	e002      	b.n	8004d02 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004cfc:	4b08      	ldr	r3, [pc, #32]	; (8004d20 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004cfe:	623b      	str	r3, [r7, #32]
      break;
 8004d00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d02:	6a3b      	ldr	r3, [r7, #32]
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3728      	adds	r7, #40	; 0x28
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bc90      	pop	{r4, r7}
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	0800a924 	.word	0x0800a924
 8004d14:	40021000 	.word	0x40021000
 8004d18:	00b71b00 	.word	0x00b71b00
 8004d1c:	003d0900 	.word	0x003d0900
 8004d20:	007a1200 	.word	0x007a1200

08004d24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d24:	b480      	push	{r7}
 8004d26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d28:	4b02      	ldr	r3, [pc, #8]	; (8004d34 <HAL_RCC_GetHCLKFreq+0x10>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bc80      	pop	{r7}
 8004d32:	4770      	bx	lr
 8004d34:	20000100 	.word	0x20000100

08004d38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d3c:	f7ff fff2 	bl	8004d24 <HAL_RCC_GetHCLKFreq>
 8004d40:	4602      	mov	r2, r0
 8004d42:	4b05      	ldr	r3, [pc, #20]	; (8004d58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	0a1b      	lsrs	r3, r3, #8
 8004d48:	f003 0307 	and.w	r3, r3, #7
 8004d4c:	4903      	ldr	r1, [pc, #12]	; (8004d5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d4e:	5ccb      	ldrb	r3, [r1, r3]
 8004d50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	40021000 	.word	0x40021000
 8004d5c:	0800a954 	.word	0x0800a954

08004d60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004d64:	f7ff ffde 	bl	8004d24 <HAL_RCC_GetHCLKFreq>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	4b05      	ldr	r3, [pc, #20]	; (8004d80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	0adb      	lsrs	r3, r3, #11
 8004d70:	f003 0307 	and.w	r3, r3, #7
 8004d74:	4903      	ldr	r1, [pc, #12]	; (8004d84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d76:	5ccb      	ldrb	r3, [r1, r3]
 8004d78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	40021000 	.word	0x40021000
 8004d84:	0800a954 	.word	0x0800a954

08004d88 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b085      	sub	sp, #20
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004d90:	4b0a      	ldr	r3, [pc, #40]	; (8004dbc <RCC_Delay+0x34>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a0a      	ldr	r2, [pc, #40]	; (8004dc0 <RCC_Delay+0x38>)
 8004d96:	fba2 2303 	umull	r2, r3, r2, r3
 8004d9a:	0a5b      	lsrs	r3, r3, #9
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	fb02 f303 	mul.w	r3, r2, r3
 8004da2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004da4:	bf00      	nop
  }
  while (Delay --);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	1e5a      	subs	r2, r3, #1
 8004daa:	60fa      	str	r2, [r7, #12]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d1f9      	bne.n	8004da4 <RCC_Delay+0x1c>
}
 8004db0:	bf00      	nop
 8004db2:	bf00      	nop
 8004db4:	3714      	adds	r7, #20
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bc80      	pop	{r7}
 8004dba:	4770      	bx	lr
 8004dbc:	20000100 	.word	0x20000100
 8004dc0:	10624dd3 	.word	0x10624dd3

08004dc4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b086      	sub	sp, #24
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	613b      	str	r3, [r7, #16]
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0301 	and.w	r3, r3, #1
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d07d      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004de0:	2300      	movs	r3, #0
 8004de2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004de4:	4b4f      	ldr	r3, [pc, #316]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004de6:	69db      	ldr	r3, [r3, #28]
 8004de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d10d      	bne.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004df0:	4b4c      	ldr	r3, [pc, #304]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004df2:	69db      	ldr	r3, [r3, #28]
 8004df4:	4a4b      	ldr	r2, [pc, #300]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004df6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dfa:	61d3      	str	r3, [r2, #28]
 8004dfc:	4b49      	ldr	r3, [pc, #292]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dfe:	69db      	ldr	r3, [r3, #28]
 8004e00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e04:	60bb      	str	r3, [r7, #8]
 8004e06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e0c:	4b46      	ldr	r3, [pc, #280]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d118      	bne.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e18:	4b43      	ldr	r3, [pc, #268]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a42      	ldr	r2, [pc, #264]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e22:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e24:	f7fe ff5a 	bl	8003cdc <HAL_GetTick>
 8004e28:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e2a:	e008      	b.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e2c:	f7fe ff56 	bl	8003cdc <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	2b64      	cmp	r3, #100	; 0x64
 8004e38:	d901      	bls.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e06d      	b.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e3e:	4b3a      	ldr	r3, [pc, #232]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d0f0      	beq.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e4a:	4b36      	ldr	r3, [pc, #216]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e4c:	6a1b      	ldr	r3, [r3, #32]
 8004e4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e52:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d02e      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d027      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e68:	4b2e      	ldr	r3, [pc, #184]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e6a:	6a1b      	ldr	r3, [r3, #32]
 8004e6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e70:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e72:	4b2e      	ldr	r3, [pc, #184]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004e74:	2201      	movs	r2, #1
 8004e76:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e78:	4b2c      	ldr	r3, [pc, #176]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004e7e:	4a29      	ldr	r2, [pc, #164]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f003 0301 	and.w	r3, r3, #1
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d014      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e8e:	f7fe ff25 	bl	8003cdc <HAL_GetTick>
 8004e92:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e94:	e00a      	b.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e96:	f7fe ff21 	bl	8003cdc <HAL_GetTick>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d901      	bls.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	e036      	b.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eac:	4b1d      	ldr	r3, [pc, #116]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004eae:	6a1b      	ldr	r3, [r3, #32]
 8004eb0:	f003 0302 	and.w	r3, r3, #2
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d0ee      	beq.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004eb8:	4b1a      	ldr	r3, [pc, #104]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004eba:	6a1b      	ldr	r3, [r3, #32]
 8004ebc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	4917      	ldr	r1, [pc, #92]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004eca:	7dfb      	ldrb	r3, [r7, #23]
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d105      	bne.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ed0:	4b14      	ldr	r3, [pc, #80]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ed2:	69db      	ldr	r3, [r3, #28]
 8004ed4:	4a13      	ldr	r2, [pc, #76]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ed6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004eda:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 0302 	and.w	r3, r3, #2
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d008      	beq.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ee8:	4b0e      	ldr	r3, [pc, #56]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	490b      	ldr	r1, [pc, #44]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 0310 	and.w	r3, r3, #16
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d008      	beq.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f06:	4b07      	ldr	r3, [pc, #28]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	695b      	ldr	r3, [r3, #20]
 8004f12:	4904      	ldr	r1, [pc, #16]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f14:	4313      	orrs	r3, r2
 8004f16:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3718      	adds	r7, #24
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	40021000 	.word	0x40021000
 8004f28:	40007000 	.word	0x40007000
 8004f2c:	42420440 	.word	0x42420440

08004f30 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004f30:	b590      	push	{r4, r7, lr}
 8004f32:	b08d      	sub	sp, #52	; 0x34
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004f38:	4b6b      	ldr	r3, [pc, #428]	; (80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8004f3a:	f107 040c 	add.w	r4, r7, #12
 8004f3e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004f40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004f44:	f240 2301 	movw	r3, #513	; 0x201
 8004f48:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	627b      	str	r3, [r7, #36]	; 0x24
 8004f4e:	2300      	movs	r3, #0
 8004f50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f52:	2300      	movs	r3, #0
 8004f54:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004f56:	2300      	movs	r3, #0
 8004f58:	61fb      	str	r3, [r7, #28]
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	3b01      	subs	r3, #1
 8004f62:	2b0f      	cmp	r3, #15
 8004f64:	f200 80b5 	bhi.w	80050d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 8004f68:	a201      	add	r2, pc, #4	; (adr r2, 8004f70 <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 8004f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f6e:	bf00      	nop
 8004f70:	08005053 	.word	0x08005053
 8004f74:	080050b7 	.word	0x080050b7
 8004f78:	080050d3 	.word	0x080050d3
 8004f7c:	08005043 	.word	0x08005043
 8004f80:	080050d3 	.word	0x080050d3
 8004f84:	080050d3 	.word	0x080050d3
 8004f88:	080050d3 	.word	0x080050d3
 8004f8c:	0800504b 	.word	0x0800504b
 8004f90:	080050d3 	.word	0x080050d3
 8004f94:	080050d3 	.word	0x080050d3
 8004f98:	080050d3 	.word	0x080050d3
 8004f9c:	080050d3 	.word	0x080050d3
 8004fa0:	080050d3 	.word	0x080050d3
 8004fa4:	080050d3 	.word	0x080050d3
 8004fa8:	080050d3 	.word	0x080050d3
 8004fac:	08004fb1 	.word	0x08004fb1
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8004fb0:	4b4e      	ldr	r3, [pc, #312]	; (80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	61fb      	str	r3, [r7, #28]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004fb6:	4b4d      	ldr	r3, [pc, #308]	; (80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	f000 8089 	beq.w	80050d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004fc4:	69fb      	ldr	r3, [r7, #28]
 8004fc6:	0c9b      	lsrs	r3, r3, #18
 8004fc8:	f003 030f 	and.w	r3, r3, #15
 8004fcc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004fd0:	4413      	add	r3, r2
 8004fd2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004fd6:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d018      	beq.n	8005014 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004fe2:	4b42      	ldr	r3, [pc, #264]	; (80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	0c5b      	lsrs	r3, r3, #17
 8004fe8:	f003 0301 	and.w	r3, r3, #1
 8004fec:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004ff0:	4413      	add	r3, r2
 8004ff2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004ff6:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d00d      	beq.n	800501e <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005002:	4a3b      	ldr	r2, [pc, #236]	; (80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8005004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005006:	fbb2 f2f3 	udiv	r2, r2, r3
 800500a:	6a3b      	ldr	r3, [r7, #32]
 800500c:	fb02 f303 	mul.w	r3, r2, r3
 8005010:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005012:	e004      	b.n	800501e <HAL_RCCEx_GetPeriphCLKFreq+0xee>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005014:	6a3b      	ldr	r3, [r7, #32]
 8005016:	4a37      	ldr	r2, [pc, #220]	; (80050f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 8005018:	fb02 f303 	mul.w	r3, r2, r3
 800501c:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800501e:	4b33      	ldr	r3, [pc, #204]	; (80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005026:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800502a:	d102      	bne.n	8005032 <HAL_RCCEx_GetPeriphCLKFreq+0x102>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 800502c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800502e:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8005030:	e051      	b.n	80050d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
          frequency = (pllclk * 2) / 3;
 8005032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005034:	005b      	lsls	r3, r3, #1
 8005036:	4a30      	ldr	r2, [pc, #192]	; (80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>)
 8005038:	fba2 2303 	umull	r2, r3, r2, r3
 800503c:	085b      	lsrs	r3, r3, #1
 800503e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005040:	e049      	b.n	80050d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8005042:	f7ff fe0d 	bl	8004c60 <HAL_RCC_GetSysClockFreq>
 8005046:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8005048:	e048      	b.n	80050dc <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 800504a:	f7ff fe09 	bl	8004c60 <HAL_RCC_GetSysClockFreq>
 800504e:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8005050:	e044      	b.n	80050dc <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8005052:	4b26      	ldr	r3, [pc, #152]	; (80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8005054:	6a1b      	ldr	r3, [r3, #32]
 8005056:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800505e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005062:	d108      	bne.n	8005076 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	f003 0302 	and.w	r3, r3, #2
 800506a:	2b00      	cmp	r3, #0
 800506c:	d003      	beq.n	8005076 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSE_VALUE;
 800506e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005072:	62bb      	str	r3, [r7, #40]	; 0x28
 8005074:	e01e      	b.n	80050b4 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800507c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005080:	d109      	bne.n	8005096 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8005082:	4b1a      	ldr	r3, [pc, #104]	; (80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8005084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005086:	f003 0302 	and.w	r3, r3, #2
 800508a:	2b00      	cmp	r3, #0
 800508c:	d003      	beq.n	8005096 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      {
        frequency = LSI_VALUE;
 800508e:	f649 4340 	movw	r3, #40000	; 0x9c40
 8005092:	62bb      	str	r3, [r7, #40]	; 0x28
 8005094:	e00e      	b.n	80050b4 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800509c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050a0:	d11b      	bne.n	80050da <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 80050a2:	4b12      	ldr	r3, [pc, #72]	; (80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d015      	beq.n	80050da <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
      {
        frequency = HSE_VALUE / 128U;
 80050ae:	4b13      	ldr	r3, [pc, #76]	; (80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cc>)
 80050b0:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 80050b2:	e012      	b.n	80050da <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 80050b4:	e011      	b.n	80050da <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80050b6:	f7ff fe53 	bl	8004d60 <HAL_RCC_GetPCLK2Freq>
 80050ba:	4602      	mov	r2, r0
 80050bc:	4b0b      	ldr	r3, [pc, #44]	; (80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	0b9b      	lsrs	r3, r3, #14
 80050c2:	f003 0303 	and.w	r3, r3, #3
 80050c6:	3301      	adds	r3, #1
 80050c8:	005b      	lsls	r3, r3, #1
 80050ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ce:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80050d0:	e004      	b.n	80050dc <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
    }
    default:
    {
      break;
 80050d2:	bf00      	nop
 80050d4:	e002      	b.n	80050dc <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
      break;
 80050d6:	bf00      	nop
 80050d8:	e000      	b.n	80050dc <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
      break;
 80050da:	bf00      	nop
    }
  }
  return (frequency);
 80050dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3734      	adds	r7, #52	; 0x34
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd90      	pop	{r4, r7, pc}
 80050e6:	bf00      	nop
 80050e8:	0800a934 	.word	0x0800a934
 80050ec:	40021000 	.word	0x40021000
 80050f0:	00b71b00 	.word	0x00b71b00
 80050f4:	003d0900 	.word	0x003d0900
 80050f8:	aaaaaaab 	.word	0xaaaaaaab
 80050fc:	00016e36 	.word	0x00016e36

08005100 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8005108:	2300      	movs	r3, #0
 800510a:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d101      	bne.n	8005116 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e084      	b.n	8005220 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	7c5b      	ldrb	r3, [r3, #17]
 800511a:	b2db      	uxtb	r3, r3
 800511c:	2b00      	cmp	r3, #0
 800511e:	d105      	bne.n	800512c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f7fd fbee 	bl	8002908 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2202      	movs	r2, #2
 8005130:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 fb8b 	bl	800584e <HAL_RTC_WaitForSynchro>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d004      	beq.n	8005148 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2204      	movs	r2, #4
 8005142:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e06b      	b.n	8005220 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f000 fc44 	bl	80059d6 <RTC_EnterInitMode>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d004      	beq.n	800515e <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2204      	movs	r2, #4
 8005158:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e060      	b.n	8005220 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	685a      	ldr	r2, [r3, #4]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f022 0207 	bic.w	r2, r2, #7
 800516c:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d005      	beq.n	8005182 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8005176:	4b2c      	ldr	r3, [pc, #176]	; (8005228 <HAL_RTC_Init+0x128>)
 8005178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800517a:	4a2b      	ldr	r2, [pc, #172]	; (8005228 <HAL_RTC_Init+0x128>)
 800517c:	f023 0301 	bic.w	r3, r3, #1
 8005180:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8005182:	4b29      	ldr	r3, [pc, #164]	; (8005228 <HAL_RTC_Init+0x128>)
 8005184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005186:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	4926      	ldr	r1, [pc, #152]	; (8005228 <HAL_RTC_Init+0x128>)
 8005190:	4313      	orrs	r3, r2
 8005192:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800519c:	d003      	beq.n	80051a6 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	60fb      	str	r3, [r7, #12]
 80051a4:	e00e      	b.n	80051c4 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80051a6:	2001      	movs	r0, #1
 80051a8:	f7ff fec2 	bl	8004f30 <HAL_RCCEx_GetPeriphCLKFreq>
 80051ac:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d104      	bne.n	80051be <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2204      	movs	r2, #4
 80051b8:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e030      	b.n	8005220 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	3b01      	subs	r3, #1
 80051c2:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	f023 010f 	bic.w	r1, r3, #15
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	0c1a      	lsrs	r2, r3, #16
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	430a      	orrs	r2, r1
 80051d8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	0c1b      	lsrs	r3, r3, #16
 80051e2:	041b      	lsls	r3, r3, #16
 80051e4:	68fa      	ldr	r2, [r7, #12]
 80051e6:	b291      	uxth	r1, r2
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	6812      	ldr	r2, [r2, #0]
 80051ec:	430b      	orrs	r3, r1
 80051ee:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f000 fc18 	bl	8005a26 <RTC_ExitInitMode>
 80051f6:	4603      	mov	r3, r0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d004      	beq.n	8005206 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2204      	movs	r2, #4
 8005200:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e00c      	b.n	8005220 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2201      	movs	r2, #1
 8005216:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2201      	movs	r2, #1
 800521c:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 800521e:	2300      	movs	r3, #0
  }
}
 8005220:	4618      	mov	r0, r3
 8005222:	3710      	adds	r7, #16
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}
 8005228:	40006c00 	.word	0x40006c00

0800522c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800522c:	b590      	push	{r4, r7, lr}
 800522e:	b087      	sub	sp, #28
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8005238:	2300      	movs	r3, #0
 800523a:	617b      	str	r3, [r7, #20]
 800523c:	2300      	movs	r3, #0
 800523e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d002      	beq.n	800524c <HAL_RTC_SetTime+0x20>
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d101      	bne.n	8005250 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	e080      	b.n	8005352 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	7c1b      	ldrb	r3, [r3, #16]
 8005254:	2b01      	cmp	r3, #1
 8005256:	d101      	bne.n	800525c <HAL_RTC_SetTime+0x30>
 8005258:	2302      	movs	r3, #2
 800525a:	e07a      	b.n	8005352 <HAL_RTC_SetTime+0x126>
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2201      	movs	r2, #1
 8005260:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2202      	movs	r2, #2
 8005266:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d113      	bne.n	8005296 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	781b      	ldrb	r3, [r3, #0]
 8005272:	461a      	mov	r2, r3
 8005274:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8005278:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	785b      	ldrb	r3, [r3, #1]
 8005280:	4619      	mov	r1, r3
 8005282:	460b      	mov	r3, r1
 8005284:	011b      	lsls	r3, r3, #4
 8005286:	1a5b      	subs	r3, r3, r1
 8005288:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800528a:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 800528c:	68ba      	ldr	r2, [r7, #8]
 800528e:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005290:	4413      	add	r3, r2
 8005292:	617b      	str	r3, [r7, #20]
 8005294:	e01e      	b.n	80052d4 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	4618      	mov	r0, r3
 800529c:	f000 fc08 	bl	8005ab0 <RTC_Bcd2ToByte>
 80052a0:	4603      	mov	r3, r0
 80052a2:	461a      	mov	r2, r3
 80052a4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80052a8:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	785b      	ldrb	r3, [r3, #1]
 80052b0:	4618      	mov	r0, r3
 80052b2:	f000 fbfd 	bl	8005ab0 <RTC_Bcd2ToByte>
 80052b6:	4603      	mov	r3, r0
 80052b8:	461a      	mov	r2, r3
 80052ba:	4613      	mov	r3, r2
 80052bc:	011b      	lsls	r3, r3, #4
 80052be:	1a9b      	subs	r3, r3, r2
 80052c0:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80052c2:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	789b      	ldrb	r3, [r3, #2]
 80052c8:	4618      	mov	r0, r3
 80052ca:	f000 fbf1 	bl	8005ab0 <RTC_Bcd2ToByte>
 80052ce:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80052d0:	4423      	add	r3, r4
 80052d2:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80052d4:	6979      	ldr	r1, [r7, #20]
 80052d6:	68f8      	ldr	r0, [r7, #12]
 80052d8:	f000 fb16 	bl	8005908 <RTC_WriteTimeCounter>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d007      	beq.n	80052f2 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2204      	movs	r2, #4
 80052e6:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2200      	movs	r2, #0
 80052ec:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	e02f      	b.n	8005352 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	685a      	ldr	r2, [r3, #4]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f022 0205 	bic.w	r2, r2, #5
 8005300:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8005302:	68f8      	ldr	r0, [r7, #12]
 8005304:	f000 fb27 	bl	8005956 <RTC_ReadAlarmCounter>
 8005308:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005310:	d018      	beq.n	8005344 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8005312:	693a      	ldr	r2, [r7, #16]
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	429a      	cmp	r2, r3
 8005318:	d214      	bcs.n	8005344 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8005320:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005324:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005326:	6939      	ldr	r1, [r7, #16]
 8005328:	68f8      	ldr	r0, [r7, #12]
 800532a:	f000 fb2d 	bl	8005988 <RTC_WriteAlarmCounter>
 800532e:	4603      	mov	r3, r0
 8005330:	2b00      	cmp	r3, #0
 8005332:	d007      	beq.n	8005344 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2204      	movs	r2, #4
 8005338:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2200      	movs	r2, #0
 800533e:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	e006      	b.n	8005352 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2201      	movs	r2, #1
 8005348:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2200      	movs	r2, #0
 800534e:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8005350:	2300      	movs	r3, #0
  }
}
 8005352:	4618      	mov	r0, r3
 8005354:	371c      	adds	r7, #28
 8005356:	46bd      	mov	sp, r7
 8005358:	bd90      	pop	{r4, r7, pc}
	...

0800535c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b088      	sub	sp, #32
 8005360:	af00      	add	r7, sp, #0
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8005368:	2300      	movs	r3, #0
 800536a:	61bb      	str	r3, [r7, #24]
 800536c:	2300      	movs	r3, #0
 800536e:	61fb      	str	r3, [r7, #28]
 8005370:	2300      	movs	r3, #0
 8005372:	617b      	str	r3, [r7, #20]
 8005374:	2300      	movs	r3, #0
 8005376:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d002      	beq.n	8005384 <HAL_RTC_GetTime+0x28>
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d101      	bne.n	8005388 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	e0b5      	b.n	80054f4 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	f003 0304 	and.w	r3, r3, #4
 8005392:	2b00      	cmp	r3, #0
 8005394:	d001      	beq.n	800539a <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e0ac      	b.n	80054f4 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800539a:	68f8      	ldr	r0, [r7, #12]
 800539c:	f000 fa84 	bl	80058a8 <RTC_ReadTimeCounter>
 80053a0:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	4a55      	ldr	r2, [pc, #340]	; (80054fc <HAL_RTC_GetTime+0x1a0>)
 80053a6:	fba2 2303 	umull	r2, r3, r2, r3
 80053aa:	0adb      	lsrs	r3, r3, #11
 80053ac:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 80053ae:	69ba      	ldr	r2, [r7, #24]
 80053b0:	4b52      	ldr	r3, [pc, #328]	; (80054fc <HAL_RTC_GetTime+0x1a0>)
 80053b2:	fba3 1302 	umull	r1, r3, r3, r2
 80053b6:	0adb      	lsrs	r3, r3, #11
 80053b8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80053bc:	fb01 f303 	mul.w	r3, r1, r3
 80053c0:	1ad3      	subs	r3, r2, r3
 80053c2:	4a4f      	ldr	r2, [pc, #316]	; (8005500 <HAL_RTC_GetTime+0x1a4>)
 80053c4:	fba2 2303 	umull	r2, r3, r2, r3
 80053c8:	095b      	lsrs	r3, r3, #5
 80053ca:	b2da      	uxtb	r2, r3
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	4a4a      	ldr	r2, [pc, #296]	; (80054fc <HAL_RTC_GetTime+0x1a0>)
 80053d4:	fba2 1203 	umull	r1, r2, r2, r3
 80053d8:	0ad2      	lsrs	r2, r2, #11
 80053da:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80053de:	fb01 f202 	mul.w	r2, r1, r2
 80053e2:	1a9a      	subs	r2, r3, r2
 80053e4:	4b46      	ldr	r3, [pc, #280]	; (8005500 <HAL_RTC_GetTime+0x1a4>)
 80053e6:	fba3 1302 	umull	r1, r3, r3, r2
 80053ea:	0959      	lsrs	r1, r3, #5
 80053ec:	460b      	mov	r3, r1
 80053ee:	011b      	lsls	r3, r3, #4
 80053f0:	1a5b      	subs	r3, r3, r1
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	1ad1      	subs	r1, r2, r3
 80053f6:	b2ca      	uxtb	r2, r1
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	2b17      	cmp	r3, #23
 8005400:	d955      	bls.n	80054ae <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	4a3f      	ldr	r2, [pc, #252]	; (8005504 <HAL_RTC_GetTime+0x1a8>)
 8005406:	fba2 2303 	umull	r2, r3, r2, r3
 800540a:	091b      	lsrs	r3, r3, #4
 800540c:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 800540e:	6939      	ldr	r1, [r7, #16]
 8005410:	4b3c      	ldr	r3, [pc, #240]	; (8005504 <HAL_RTC_GetTime+0x1a8>)
 8005412:	fba3 2301 	umull	r2, r3, r3, r1
 8005416:	091a      	lsrs	r2, r3, #4
 8005418:	4613      	mov	r3, r2
 800541a:	005b      	lsls	r3, r3, #1
 800541c:	4413      	add	r3, r2
 800541e:	00db      	lsls	r3, r3, #3
 8005420:	1aca      	subs	r2, r1, r3
 8005422:	b2d2      	uxtb	r2, r2
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8005428:	68f8      	ldr	r0, [r7, #12]
 800542a:	f000 fa94 	bl	8005956 <RTC_ReadAlarmCounter>
 800542e:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005436:	d008      	beq.n	800544a <HAL_RTC_GetTime+0xee>
 8005438:	69fa      	ldr	r2, [r7, #28]
 800543a:	69bb      	ldr	r3, [r7, #24]
 800543c:	429a      	cmp	r2, r3
 800543e:	d904      	bls.n	800544a <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8005440:	69fa      	ldr	r2, [r7, #28]
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	61fb      	str	r3, [r7, #28]
 8005448:	e002      	b.n	8005450 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 800544a:	f04f 33ff 	mov.w	r3, #4294967295
 800544e:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	4a2d      	ldr	r2, [pc, #180]	; (8005508 <HAL_RTC_GetTime+0x1ac>)
 8005454:	fb02 f303 	mul.w	r3, r2, r3
 8005458:	69ba      	ldr	r2, [r7, #24]
 800545a:	1ad3      	subs	r3, r2, r3
 800545c:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800545e:	69b9      	ldr	r1, [r7, #24]
 8005460:	68f8      	ldr	r0, [r7, #12]
 8005462:	f000 fa51 	bl	8005908 <RTC_WriteTimeCounter>
 8005466:	4603      	mov	r3, r0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d001      	beq.n	8005470 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	e041      	b.n	80054f4 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8005470:	69fb      	ldr	r3, [r7, #28]
 8005472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005476:	d00c      	beq.n	8005492 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8005478:	69fa      	ldr	r2, [r7, #28]
 800547a:	69bb      	ldr	r3, [r7, #24]
 800547c:	4413      	add	r3, r2
 800547e:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005480:	69f9      	ldr	r1, [r7, #28]
 8005482:	68f8      	ldr	r0, [r7, #12]
 8005484:	f000 fa80 	bl	8005988 <RTC_WriteAlarmCounter>
 8005488:	4603      	mov	r3, r0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d00a      	beq.n	80054a4 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e030      	b.n	80054f4 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005492:	69f9      	ldr	r1, [r7, #28]
 8005494:	68f8      	ldr	r0, [r7, #12]
 8005496:	f000 fa77 	bl	8005988 <RTC_WriteAlarmCounter>
 800549a:	4603      	mov	r3, r0
 800549c:	2b00      	cmp	r3, #0
 800549e:	d001      	beq.n	80054a4 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	e027      	b.n	80054f4 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 80054a4:	6979      	ldr	r1, [r7, #20]
 80054a6:	68f8      	ldr	r0, [r7, #12]
 80054a8:	f000 fb1f 	bl	8005aea <RTC_DateUpdate>
 80054ac:	e003      	b.n	80054b6 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	b2da      	uxtb	r2, r3
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d01a      	beq.n	80054f2 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	4618      	mov	r0, r3
 80054c2:	f000 fad8 	bl	8005a76 <RTC_ByteToBcd2>
 80054c6:	4603      	mov	r3, r0
 80054c8:	461a      	mov	r2, r3
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	785b      	ldrb	r3, [r3, #1]
 80054d2:	4618      	mov	r0, r3
 80054d4:	f000 facf 	bl	8005a76 <RTC_ByteToBcd2>
 80054d8:	4603      	mov	r3, r0
 80054da:	461a      	mov	r2, r3
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	789b      	ldrb	r3, [r3, #2]
 80054e4:	4618      	mov	r0, r3
 80054e6:	f000 fac6 	bl	8005a76 <RTC_ByteToBcd2>
 80054ea:	4603      	mov	r3, r0
 80054ec:	461a      	mov	r2, r3
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80054f2:	2300      	movs	r3, #0
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3720      	adds	r7, #32
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}
 80054fc:	91a2b3c5 	.word	0x91a2b3c5
 8005500:	88888889 	.word	0x88888889
 8005504:	aaaaaaab 	.word	0xaaaaaaab
 8005508:	00015180 	.word	0x00015180

0800550c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b088      	sub	sp, #32
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8005518:	2300      	movs	r3, #0
 800551a:	61fb      	str	r3, [r7, #28]
 800551c:	2300      	movs	r3, #0
 800551e:	61bb      	str	r3, [r7, #24]
 8005520:	2300      	movs	r3, #0
 8005522:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d002      	beq.n	8005530 <HAL_RTC_SetDate+0x24>
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d101      	bne.n	8005534 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	e097      	b.n	8005664 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	7c1b      	ldrb	r3, [r3, #16]
 8005538:	2b01      	cmp	r3, #1
 800553a:	d101      	bne.n	8005540 <HAL_RTC_SetDate+0x34>
 800553c:	2302      	movs	r3, #2
 800553e:	e091      	b.n	8005664 <HAL_RTC_SetDate+0x158>
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2201      	movs	r2, #1
 8005544:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2202      	movs	r2, #2
 800554a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d10c      	bne.n	800556c <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	78da      	ldrb	r2, [r3, #3]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	785a      	ldrb	r2, [r3, #1]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	789a      	ldrb	r2, [r3, #2]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	739a      	strb	r2, [r3, #14]
 800556a:	e01a      	b.n	80055a2 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	78db      	ldrb	r3, [r3, #3]
 8005570:	4618      	mov	r0, r3
 8005572:	f000 fa9d 	bl	8005ab0 <RTC_Bcd2ToByte>
 8005576:	4603      	mov	r3, r0
 8005578:	461a      	mov	r2, r3
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	785b      	ldrb	r3, [r3, #1]
 8005582:	4618      	mov	r0, r3
 8005584:	f000 fa94 	bl	8005ab0 <RTC_Bcd2ToByte>
 8005588:	4603      	mov	r3, r0
 800558a:	461a      	mov	r2, r3
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	789b      	ldrb	r3, [r3, #2]
 8005594:	4618      	mov	r0, r3
 8005596:	f000 fa8b 	bl	8005ab0 <RTC_Bcd2ToByte>
 800559a:	4603      	mov	r3, r0
 800559c:	461a      	mov	r2, r3
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	7bdb      	ldrb	r3, [r3, #15]
 80055a6:	4618      	mov	r0, r3
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	7b59      	ldrb	r1, [r3, #13]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	7b9b      	ldrb	r3, [r3, #14]
 80055b0:	461a      	mov	r2, r3
 80055b2:	f000 fb75 	bl	8005ca0 <RTC_WeekDayNum>
 80055b6:	4603      	mov	r3, r0
 80055b8:	461a      	mov	r2, r3
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	7b1a      	ldrb	r2, [r3, #12]
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80055c6:	68f8      	ldr	r0, [r7, #12]
 80055c8:	f000 f96e 	bl	80058a8 <RTC_ReadTimeCounter>
 80055cc:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	4a26      	ldr	r2, [pc, #152]	; (800566c <HAL_RTC_SetDate+0x160>)
 80055d2:	fba2 2303 	umull	r2, r3, r2, r3
 80055d6:	0adb      	lsrs	r3, r3, #11
 80055d8:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	2b18      	cmp	r3, #24
 80055de:	d93a      	bls.n	8005656 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	4a23      	ldr	r2, [pc, #140]	; (8005670 <HAL_RTC_SetDate+0x164>)
 80055e4:	fba2 2303 	umull	r2, r3, r2, r3
 80055e8:	091b      	lsrs	r3, r3, #4
 80055ea:	4a22      	ldr	r2, [pc, #136]	; (8005674 <HAL_RTC_SetDate+0x168>)
 80055ec:	fb02 f303 	mul.w	r3, r2, r3
 80055f0:	69fa      	ldr	r2, [r7, #28]
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80055f6:	69f9      	ldr	r1, [r7, #28]
 80055f8:	68f8      	ldr	r0, [r7, #12]
 80055fa:	f000 f985 	bl	8005908 <RTC_WriteTimeCounter>
 80055fe:	4603      	mov	r3, r0
 8005600:	2b00      	cmp	r3, #0
 8005602:	d007      	beq.n	8005614 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2204      	movs	r2, #4
 8005608:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2200      	movs	r2, #0
 800560e:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	e027      	b.n	8005664 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8005614:	68f8      	ldr	r0, [r7, #12]
 8005616:	f000 f99e 	bl	8005956 <RTC_ReadAlarmCounter>
 800561a:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800561c:	69bb      	ldr	r3, [r7, #24]
 800561e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005622:	d018      	beq.n	8005656 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8005624:	69ba      	ldr	r2, [r7, #24]
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	429a      	cmp	r2, r3
 800562a:	d214      	bcs.n	8005656 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800562c:	69bb      	ldr	r3, [r7, #24]
 800562e:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8005632:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005636:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005638:	69b9      	ldr	r1, [r7, #24]
 800563a:	68f8      	ldr	r0, [r7, #12]
 800563c:	f000 f9a4 	bl	8005988 <RTC_WriteAlarmCounter>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d007      	beq.n	8005656 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2204      	movs	r2, #4
 800564a:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2200      	movs	r2, #0
 8005650:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e006      	b.n	8005664 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2201      	movs	r2, #1
 800565a:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2200      	movs	r2, #0
 8005660:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8005662:	2300      	movs	r3, #0
}
 8005664:	4618      	mov	r0, r3
 8005666:	3720      	adds	r7, #32
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}
 800566c:	91a2b3c5 	.word	0x91a2b3c5
 8005670:	aaaaaaab 	.word	0xaaaaaaab
 8005674:	00015180 	.word	0x00015180

08005678 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005678:	b590      	push	{r4, r7, lr}
 800567a:	b089      	sub	sp, #36	; 0x24
 800567c:	af00      	add	r7, sp, #0
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	60b9      	str	r1, [r7, #8]
 8005682:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 8005684:	2300      	movs	r3, #0
 8005686:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 8005688:	f107 0314 	add.w	r3, r7, #20
 800568c:	2100      	movs	r1, #0
 800568e:	460a      	mov	r2, r1
 8005690:	801a      	strh	r2, [r3, #0]
 8005692:	460a      	mov	r2, r1
 8005694:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d002      	beq.n	80056a2 <HAL_RTC_SetAlarm_IT+0x2a>
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d101      	bne.n	80056a6 <HAL_RTC_SetAlarm_IT+0x2e>
  {
    return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e099      	b.n	80057da <HAL_RTC_SetAlarm_IT+0x162>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	7c1b      	ldrb	r3, [r3, #16]
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d101      	bne.n	80056b2 <HAL_RTC_SetAlarm_IT+0x3a>
 80056ae:	2302      	movs	r3, #2
 80056b0:	e093      	b.n	80057da <HAL_RTC_SetAlarm_IT+0x162>
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2201      	movs	r2, #1
 80056b6:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2202      	movs	r2, #2
 80056bc:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 80056be:	f107 0314 	add.w	r3, r7, #20
 80056c2:	2200      	movs	r2, #0
 80056c4:	4619      	mov	r1, r3
 80056c6:	68f8      	ldr	r0, [r7, #12]
 80056c8:	f7ff fe48 	bl	800535c <HAL_RTC_GetTime>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d001      	beq.n	80056d6 <HAL_RTC_SetAlarm_IT+0x5e>
  {
    return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e081      	b.n	80057da <HAL_RTC_SetAlarm_IT+0x162>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 80056d6:	7d3b      	ldrb	r3, [r7, #20]
 80056d8:	461a      	mov	r2, r3
 80056da:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80056de:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 80056e2:	7d7b      	ldrb	r3, [r7, #21]
 80056e4:	4619      	mov	r1, r3
 80056e6:	460b      	mov	r3, r1
 80056e8:	011b      	lsls	r3, r3, #4
 80056ea:	1a5b      	subs	r3, r3, r1
 80056ec:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 80056ee:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 80056f0:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 80056f2:	4413      	add	r3, r2
 80056f4:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d113      	bne.n	8005724 <HAL_RTC_SetAlarm_IT+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	461a      	mov	r2, r3
 8005702:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8005706:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	785b      	ldrb	r3, [r3, #1]
 800570e:	4619      	mov	r1, r3
 8005710:	460b      	mov	r3, r1
 8005712:	011b      	lsls	r3, r3, #4
 8005714:	1a5b      	subs	r3, r3, r1
 8005716:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8005718:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 800571a:	68ba      	ldr	r2, [r7, #8]
 800571c:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 800571e:	4413      	add	r3, r2
 8005720:	61fb      	str	r3, [r7, #28]
 8005722:	e01e      	b.n	8005762 <HAL_RTC_SetAlarm_IT+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	4618      	mov	r0, r3
 800572a:	f000 f9c1 	bl	8005ab0 <RTC_Bcd2ToByte>
 800572e:	4603      	mov	r3, r0
 8005730:	461a      	mov	r2, r3
 8005732:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8005736:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	785b      	ldrb	r3, [r3, #1]
 800573e:	4618      	mov	r0, r3
 8005740:	f000 f9b6 	bl	8005ab0 <RTC_Bcd2ToByte>
 8005744:	4603      	mov	r3, r0
 8005746:	461a      	mov	r2, r3
 8005748:	4613      	mov	r3, r2
 800574a:	011b      	lsls	r3, r3, #4
 800574c:	1a9b      	subs	r3, r3, r2
 800574e:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8005750:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	789b      	ldrb	r3, [r3, #2]
 8005756:	4618      	mov	r0, r3
 8005758:	f000 f9aa 	bl	8005ab0 <RTC_Bcd2ToByte>
 800575c:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 800575e:	4423      	add	r3, r4
 8005760:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 8005762:	69fa      	ldr	r2, [r7, #28]
 8005764:	69bb      	ldr	r3, [r7, #24]
 8005766:	429a      	cmp	r2, r3
 8005768:	d205      	bcs.n	8005776 <HAL_RTC_SetAlarm_IT+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8005770:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005774:	61fb      	str	r3, [r7, #28]
  }

  /* Write alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005776:	69f9      	ldr	r1, [r7, #28]
 8005778:	68f8      	ldr	r0, [r7, #12]
 800577a:	f000 f905 	bl	8005988 <RTC_WriteAlarmCounter>
 800577e:	4603      	mov	r3, r0
 8005780:	2b00      	cmp	r3, #0
 8005782:	d007      	beq.n	8005794 <HAL_RTC_SetAlarm_IT+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2204      	movs	r2, #4
 8005788:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2200      	movs	r2, #0
 800578e:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	e022      	b.n	80057da <HAL_RTC_SetAlarm_IT+0x162>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	685a      	ldr	r2, [r3, #4]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f022 0202 	bic.w	r2, r2, #2
 80057a2:	605a      	str	r2, [r3, #4]

    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f042 0202 	orr.w	r2, r2, #2
 80057b2:	601a      	str	r2, [r3, #0]

    /* RTC Alarm Interrupt Configuration: EXTI configuration */
    __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80057b4:	4b0b      	ldr	r3, [pc, #44]	; (80057e4 <HAL_RTC_SetAlarm_IT+0x16c>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a0a      	ldr	r2, [pc, #40]	; (80057e4 <HAL_RTC_SetAlarm_IT+0x16c>)
 80057ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057be:	6013      	str	r3, [r2, #0]

    __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80057c0:	4b08      	ldr	r3, [pc, #32]	; (80057e4 <HAL_RTC_SetAlarm_IT+0x16c>)
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	4a07      	ldr	r2, [pc, #28]	; (80057e4 <HAL_RTC_SetAlarm_IT+0x16c>)
 80057c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057ca:	6093      	str	r3, [r2, #8]

    hrtc->State = HAL_RTC_STATE_READY;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2201      	movs	r2, #1
 80057d0:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2200      	movs	r2, #0
 80057d6:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80057d8:	2300      	movs	r3, #0
  }
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3724      	adds	r7, #36	; 0x24
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd90      	pop	{r4, r7, pc}
 80057e2:	bf00      	nop
 80057e4:	40010400 	.word	0x40010400

080057e8 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b082      	sub	sp, #8
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 0302 	and.w	r3, r3, #2
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d011      	beq.n	8005822 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	f003 0302 	and.w	r3, r3, #2
 8005808:	2b00      	cmp	r3, #0
 800580a:	d00a      	beq.n	8005822 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f000 f815 	bl	800583c <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	685a      	ldr	r2, [r3, #4]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f022 0202 	bic.w	r2, r2, #2
 8005820:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8005822:	4b05      	ldr	r3, [pc, #20]	; (8005838 <HAL_RTC_AlarmIRQHandler+0x50>)
 8005824:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005828:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2201      	movs	r2, #1
 800582e:	745a      	strb	r2, [r3, #17]
}
 8005830:	bf00      	nop
 8005832:	3708      	adds	r7, #8
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}
 8005838:	40010400 	.word	0x40010400

0800583c <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8005844:	bf00      	nop
 8005846:	370c      	adds	r7, #12
 8005848:	46bd      	mov	sp, r7
 800584a:	bc80      	pop	{r7}
 800584c:	4770      	bx	lr

0800584e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800584e:	b580      	push	{r7, lr}
 8005850:	b084      	sub	sp, #16
 8005852:	af00      	add	r7, sp, #0
 8005854:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005856:	2300      	movs	r3, #0
 8005858:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d101      	bne.n	8005864 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	e01d      	b.n	80058a0 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	685a      	ldr	r2, [r3, #4]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f022 0208 	bic.w	r2, r2, #8
 8005872:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8005874:	f7fe fa32 	bl	8003cdc <HAL_GetTick>
 8005878:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800587a:	e009      	b.n	8005890 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800587c:	f7fe fa2e 	bl	8003cdc <HAL_GetTick>
 8005880:	4602      	mov	r2, r0
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	1ad3      	subs	r3, r2, r3
 8005886:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800588a:	d901      	bls.n	8005890 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 800588c:	2303      	movs	r3, #3
 800588e:	e007      	b.n	80058a0 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	f003 0308 	and.w	r3, r3, #8
 800589a:	2b00      	cmp	r3, #0
 800589c:	d0ee      	beq.n	800587c <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 800589e:	2300      	movs	r3, #0
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3710      	adds	r7, #16
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}

080058a8 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b087      	sub	sp, #28
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80058b0:	2300      	movs	r3, #0
 80058b2:	827b      	strh	r3, [r7, #18]
 80058b4:	2300      	movs	r3, #0
 80058b6:	823b      	strh	r3, [r7, #16]
 80058b8:	2300      	movs	r3, #0
 80058ba:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80058bc:	2300      	movs	r3, #0
 80058be:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	699b      	ldr	r3, [r3, #24]
 80058c6:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	69db      	ldr	r3, [r3, #28]
 80058ce:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	699b      	ldr	r3, [r3, #24]
 80058d6:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 80058d8:	8a7a      	ldrh	r2, [r7, #18]
 80058da:	8a3b      	ldrh	r3, [r7, #16]
 80058dc:	429a      	cmp	r2, r3
 80058de:	d008      	beq.n	80058f2 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80058e0:	8a3b      	ldrh	r3, [r7, #16]
 80058e2:	041a      	lsls	r2, r3, #16
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	69db      	ldr	r3, [r3, #28]
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	4313      	orrs	r3, r2
 80058ee:	617b      	str	r3, [r7, #20]
 80058f0:	e004      	b.n	80058fc <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80058f2:	8a7b      	ldrh	r3, [r7, #18]
 80058f4:	041a      	lsls	r2, r3, #16
 80058f6:	89fb      	ldrh	r3, [r7, #14]
 80058f8:	4313      	orrs	r3, r2
 80058fa:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 80058fc:	697b      	ldr	r3, [r7, #20]
}
 80058fe:	4618      	mov	r0, r3
 8005900:	371c      	adds	r7, #28
 8005902:	46bd      	mov	sp, r7
 8005904:	bc80      	pop	{r7}
 8005906:	4770      	bx	lr

08005908 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b084      	sub	sp, #16
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005912:	2300      	movs	r3, #0
 8005914:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 f85d 	bl	80059d6 <RTC_EnterInitMode>
 800591c:	4603      	mov	r3, r0
 800591e:	2b00      	cmp	r3, #0
 8005920:	d002      	beq.n	8005928 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	73fb      	strb	r3, [r7, #15]
 8005926:	e011      	b.n	800594c <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	683a      	ldr	r2, [r7, #0]
 800592e:	0c12      	lsrs	r2, r2, #16
 8005930:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	683a      	ldr	r2, [r7, #0]
 8005938:	b292      	uxth	r2, r2
 800593a:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f000 f872 	bl	8005a26 <RTC_ExitInitMode>
 8005942:	4603      	mov	r3, r0
 8005944:	2b00      	cmp	r3, #0
 8005946:	d001      	beq.n	800594c <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800594c:	7bfb      	ldrb	r3, [r7, #15]
}
 800594e:	4618      	mov	r0, r3
 8005950:	3710      	adds	r7, #16
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}

08005956 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8005956:	b480      	push	{r7}
 8005958:	b085      	sub	sp, #20
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 800595e:	2300      	movs	r3, #0
 8005960:	81fb      	strh	r3, [r7, #14]
 8005962:	2300      	movs	r3, #0
 8005964:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	6a1b      	ldr	r3, [r3, #32]
 800596c:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005974:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8005976:	89fb      	ldrh	r3, [r7, #14]
 8005978:	041a      	lsls	r2, r3, #16
 800597a:	89bb      	ldrh	r3, [r7, #12]
 800597c:	4313      	orrs	r3, r2
}
 800597e:	4618      	mov	r0, r3
 8005980:	3714      	adds	r7, #20
 8005982:	46bd      	mov	sp, r7
 8005984:	bc80      	pop	{r7}
 8005986:	4770      	bx	lr

08005988 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005992:	2300      	movs	r3, #0
 8005994:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f000 f81d 	bl	80059d6 <RTC_EnterInitMode>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d002      	beq.n	80059a8 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	73fb      	strb	r3, [r7, #15]
 80059a6:	e011      	b.n	80059cc <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	683a      	ldr	r2, [r7, #0]
 80059ae:	0c12      	lsrs	r2, r2, #16
 80059b0:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	683a      	ldr	r2, [r7, #0]
 80059b8:	b292      	uxth	r2, r2
 80059ba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f000 f832 	bl	8005a26 <RTC_ExitInitMode>
 80059c2:	4603      	mov	r3, r0
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d001      	beq.n	80059cc <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80059cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3710      	adds	r7, #16
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}

080059d6 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80059d6:	b580      	push	{r7, lr}
 80059d8:	b084      	sub	sp, #16
 80059da:	af00      	add	r7, sp, #0
 80059dc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80059de:	2300      	movs	r3, #0
 80059e0:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80059e2:	f7fe f97b 	bl	8003cdc <HAL_GetTick>
 80059e6:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80059e8:	e009      	b.n	80059fe <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80059ea:	f7fe f977 	bl	8003cdc <HAL_GetTick>
 80059ee:	4602      	mov	r2, r0
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	1ad3      	subs	r3, r2, r3
 80059f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80059f8:	d901      	bls.n	80059fe <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	e00f      	b.n	8005a1e <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	f003 0320 	and.w	r3, r3, #32
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d0ee      	beq.n	80059ea <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	685a      	ldr	r2, [r3, #4]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f042 0210 	orr.w	r2, r2, #16
 8005a1a:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8005a1c:	2300      	movs	r3, #0
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3710      	adds	r7, #16
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}

08005a26 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005a26:	b580      	push	{r7, lr}
 8005a28:	b084      	sub	sp, #16
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	685a      	ldr	r2, [r3, #4]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f022 0210 	bic.w	r2, r2, #16
 8005a40:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8005a42:	f7fe f94b 	bl	8003cdc <HAL_GetTick>
 8005a46:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005a48:	e009      	b.n	8005a5e <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005a4a:	f7fe f947 	bl	8003cdc <HAL_GetTick>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	1ad3      	subs	r3, r2, r3
 8005a54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a58:	d901      	bls.n	8005a5e <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8005a5a:	2303      	movs	r3, #3
 8005a5c:	e007      	b.n	8005a6e <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	f003 0320 	and.w	r3, r3, #32
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d0ee      	beq.n	8005a4a <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8005a6c:	2300      	movs	r3, #0
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3710      	adds	r7, #16
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}

08005a76 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005a76:	b480      	push	{r7}
 8005a78:	b085      	sub	sp, #20
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005a80:	2300      	movs	r3, #0
 8005a82:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8005a84:	e005      	b.n	8005a92 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	3301      	adds	r3, #1
 8005a8a:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8005a8c:	79fb      	ldrb	r3, [r7, #7]
 8005a8e:	3b0a      	subs	r3, #10
 8005a90:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8005a92:	79fb      	ldrb	r3, [r7, #7]
 8005a94:	2b09      	cmp	r3, #9
 8005a96:	d8f6      	bhi.n	8005a86 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	011b      	lsls	r3, r3, #4
 8005a9e:	b2da      	uxtb	r2, r3
 8005aa0:	79fb      	ldrb	r3, [r7, #7]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	b2db      	uxtb	r3, r3
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3714      	adds	r7, #20
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bc80      	pop	{r7}
 8005aae:	4770      	bx	lr

08005ab0 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b085      	sub	sp, #20
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8005aba:	2300      	movs	r3, #0
 8005abc:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8005abe:	79fb      	ldrb	r3, [r7, #7]
 8005ac0:	091b      	lsrs	r3, r3, #4
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	4613      	mov	r3, r2
 8005ac8:	009b      	lsls	r3, r3, #2
 8005aca:	4413      	add	r3, r2
 8005acc:	005b      	lsls	r3, r3, #1
 8005ace:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8005ad0:	79fb      	ldrb	r3, [r7, #7]
 8005ad2:	f003 030f 	and.w	r3, r3, #15
 8005ad6:	b2da      	uxtb	r2, r3
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	4413      	add	r3, r2
 8005ade:	b2db      	uxtb	r3, r3
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3714      	adds	r7, #20
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bc80      	pop	{r7}
 8005ae8:	4770      	bx	lr

08005aea <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8005aea:	b580      	push	{r7, lr}
 8005aec:	b086      	sub	sp, #24
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	6078      	str	r0, [r7, #4]
 8005af2:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8005af4:	2300      	movs	r3, #0
 8005af6:	617b      	str	r3, [r7, #20]
 8005af8:	2300      	movs	r3, #0
 8005afa:	613b      	str	r3, [r7, #16]
 8005afc:	2300      	movs	r3, #0
 8005afe:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8005b00:	2300      	movs	r3, #0
 8005b02:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	7bdb      	ldrb	r3, [r3, #15]
 8005b08:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	7b5b      	ldrb	r3, [r3, #13]
 8005b0e:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	7b9b      	ldrb	r3, [r3, #14]
 8005b14:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8005b16:	2300      	movs	r3, #0
 8005b18:	60bb      	str	r3, [r7, #8]
 8005b1a:	e06f      	b.n	8005bfc <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d011      	beq.n	8005b46 <RTC_DateUpdate+0x5c>
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	2b03      	cmp	r3, #3
 8005b26:	d00e      	beq.n	8005b46 <RTC_DateUpdate+0x5c>
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	2b05      	cmp	r3, #5
 8005b2c:	d00b      	beq.n	8005b46 <RTC_DateUpdate+0x5c>
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	2b07      	cmp	r3, #7
 8005b32:	d008      	beq.n	8005b46 <RTC_DateUpdate+0x5c>
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	2b08      	cmp	r3, #8
 8005b38:	d005      	beq.n	8005b46 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	2b0a      	cmp	r3, #10
 8005b3e:	d002      	beq.n	8005b46 <RTC_DateUpdate+0x5c>
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	2b0c      	cmp	r3, #12
 8005b44:	d117      	bne.n	8005b76 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2b1e      	cmp	r3, #30
 8005b4a:	d803      	bhi.n	8005b54 <RTC_DateUpdate+0x6a>
      {
        day++;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	3301      	adds	r3, #1
 8005b50:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8005b52:	e050      	b.n	8005bf6 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	2b0c      	cmp	r3, #12
 8005b58:	d005      	beq.n	8005b66 <RTC_DateUpdate+0x7c>
        {
          month++;
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	3301      	adds	r3, #1
 8005b5e:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005b60:	2301      	movs	r3, #1
 8005b62:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8005b64:	e047      	b.n	8005bf6 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8005b66:	2301      	movs	r3, #1
 8005b68:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	60fb      	str	r3, [r7, #12]
          year++;
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	3301      	adds	r3, #1
 8005b72:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8005b74:	e03f      	b.n	8005bf6 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	2b04      	cmp	r3, #4
 8005b7a:	d008      	beq.n	8005b8e <RTC_DateUpdate+0xa4>
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	2b06      	cmp	r3, #6
 8005b80:	d005      	beq.n	8005b8e <RTC_DateUpdate+0xa4>
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	2b09      	cmp	r3, #9
 8005b86:	d002      	beq.n	8005b8e <RTC_DateUpdate+0xa4>
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	2b0b      	cmp	r3, #11
 8005b8c:	d10c      	bne.n	8005ba8 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2b1d      	cmp	r3, #29
 8005b92:	d803      	bhi.n	8005b9c <RTC_DateUpdate+0xb2>
      {
        day++;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	3301      	adds	r3, #1
 8005b98:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8005b9a:	e02c      	b.n	8005bf6 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	613b      	str	r3, [r7, #16]
        day = 1U;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8005ba6:	e026      	b.n	8005bf6 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	2b02      	cmp	r3, #2
 8005bac:	d123      	bne.n	8005bf6 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2b1b      	cmp	r3, #27
 8005bb2:	d803      	bhi.n	8005bbc <RTC_DateUpdate+0xd2>
      {
        day++;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	60fb      	str	r3, [r7, #12]
 8005bba:	e01c      	b.n	8005bf6 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2b1c      	cmp	r3, #28
 8005bc0:	d111      	bne.n	8005be6 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f000 f838 	bl	8005c3c <RTC_IsLeapYear>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d003      	beq.n	8005bda <RTC_DateUpdate+0xf0>
        {
          day++;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	3301      	adds	r3, #1
 8005bd6:	60fb      	str	r3, [r7, #12]
 8005bd8:	e00d      	b.n	8005bf6 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	3301      	adds	r3, #1
 8005bde:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005be0:	2301      	movs	r3, #1
 8005be2:	60fb      	str	r3, [r7, #12]
 8005be4:	e007      	b.n	8005bf6 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2b1d      	cmp	r3, #29
 8005bea:	d104      	bne.n	8005bf6 <RTC_DateUpdate+0x10c>
      {
        month++;
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	3301      	adds	r3, #1
 8005bf0:	613b      	str	r3, [r7, #16]
        day = 1U;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	60bb      	str	r3, [r7, #8]
 8005bfc:	68ba      	ldr	r2, [r7, #8]
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d38b      	bcc.n	8005b1c <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	b2da      	uxtb	r2, r3
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	b2da      	uxtb	r2, r3
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	b2da      	uxtb	r2, r3
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	68fa      	ldr	r2, [r7, #12]
 8005c22:	b2d2      	uxtb	r2, r2
 8005c24:	4619      	mov	r1, r3
 8005c26:	6978      	ldr	r0, [r7, #20]
 8005c28:	f000 f83a 	bl	8005ca0 <RTC_WeekDayNum>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	461a      	mov	r2, r3
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	731a      	strb	r2, [r3, #12]
}
 8005c34:	bf00      	nop
 8005c36:	3718      	adds	r7, #24
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b083      	sub	sp, #12
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	4603      	mov	r3, r0
 8005c44:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8005c46:	88fb      	ldrh	r3, [r7, #6]
 8005c48:	f003 0303 	and.w	r3, r3, #3
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d001      	beq.n	8005c56 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8005c52:	2300      	movs	r3, #0
 8005c54:	e01d      	b.n	8005c92 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8005c56:	88fb      	ldrh	r3, [r7, #6]
 8005c58:	4a10      	ldr	r2, [pc, #64]	; (8005c9c <RTC_IsLeapYear+0x60>)
 8005c5a:	fba2 1203 	umull	r1, r2, r2, r3
 8005c5e:	0952      	lsrs	r2, r2, #5
 8005c60:	2164      	movs	r1, #100	; 0x64
 8005c62:	fb01 f202 	mul.w	r2, r1, r2
 8005c66:	1a9b      	subs	r3, r3, r2
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d001      	beq.n	8005c72 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e00f      	b.n	8005c92 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8005c72:	88fb      	ldrh	r3, [r7, #6]
 8005c74:	4a09      	ldr	r2, [pc, #36]	; (8005c9c <RTC_IsLeapYear+0x60>)
 8005c76:	fba2 1203 	umull	r1, r2, r2, r3
 8005c7a:	09d2      	lsrs	r2, r2, #7
 8005c7c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005c80:	fb01 f202 	mul.w	r2, r1, r2
 8005c84:	1a9b      	subs	r3, r3, r2
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d101      	bne.n	8005c90 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e000      	b.n	8005c92 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8005c90:	2300      	movs	r3, #0
  }
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	370c      	adds	r7, #12
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bc80      	pop	{r7}
 8005c9a:	4770      	bx	lr
 8005c9c:	51eb851f 	.word	0x51eb851f

08005ca0 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b085      	sub	sp, #20
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	460b      	mov	r3, r1
 8005caa:	70fb      	strb	r3, [r7, #3]
 8005cac:	4613      	mov	r3, r2
 8005cae:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	60bb      	str	r3, [r7, #8]
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8005cbe:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8005cc0:	78fb      	ldrb	r3, [r7, #3]
 8005cc2:	2b02      	cmp	r3, #2
 8005cc4:	d82d      	bhi.n	8005d22 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8005cc6:	78fa      	ldrb	r2, [r7, #3]
 8005cc8:	4613      	mov	r3, r2
 8005cca:	005b      	lsls	r3, r3, #1
 8005ccc:	4413      	add	r3, r2
 8005cce:	00db      	lsls	r3, r3, #3
 8005cd0:	1a9b      	subs	r3, r3, r2
 8005cd2:	4a2c      	ldr	r2, [pc, #176]	; (8005d84 <RTC_WeekDayNum+0xe4>)
 8005cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8005cd8:	085a      	lsrs	r2, r3, #1
 8005cda:	78bb      	ldrb	r3, [r7, #2]
 8005cdc:	441a      	add	r2, r3
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	441a      	add	r2, r3
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	3b01      	subs	r3, #1
 8005ce6:	089b      	lsrs	r3, r3, #2
 8005ce8:	441a      	add	r2, r3
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	3b01      	subs	r3, #1
 8005cee:	4926      	ldr	r1, [pc, #152]	; (8005d88 <RTC_WeekDayNum+0xe8>)
 8005cf0:	fba1 1303 	umull	r1, r3, r1, r3
 8005cf4:	095b      	lsrs	r3, r3, #5
 8005cf6:	1ad2      	subs	r2, r2, r3
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	3b01      	subs	r3, #1
 8005cfc:	4922      	ldr	r1, [pc, #136]	; (8005d88 <RTC_WeekDayNum+0xe8>)
 8005cfe:	fba1 1303 	umull	r1, r3, r1, r3
 8005d02:	09db      	lsrs	r3, r3, #7
 8005d04:	4413      	add	r3, r2
 8005d06:	1d1a      	adds	r2, r3, #4
 8005d08:	4b20      	ldr	r3, [pc, #128]	; (8005d8c <RTC_WeekDayNum+0xec>)
 8005d0a:	fba3 1302 	umull	r1, r3, r3, r2
 8005d0e:	1ad1      	subs	r1, r2, r3
 8005d10:	0849      	lsrs	r1, r1, #1
 8005d12:	440b      	add	r3, r1
 8005d14:	0899      	lsrs	r1, r3, #2
 8005d16:	460b      	mov	r3, r1
 8005d18:	00db      	lsls	r3, r3, #3
 8005d1a:	1a5b      	subs	r3, r3, r1
 8005d1c:	1ad3      	subs	r3, r2, r3
 8005d1e:	60fb      	str	r3, [r7, #12]
 8005d20:	e029      	b.n	8005d76 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8005d22:	78fa      	ldrb	r2, [r7, #3]
 8005d24:	4613      	mov	r3, r2
 8005d26:	005b      	lsls	r3, r3, #1
 8005d28:	4413      	add	r3, r2
 8005d2a:	00db      	lsls	r3, r3, #3
 8005d2c:	1a9b      	subs	r3, r3, r2
 8005d2e:	4a15      	ldr	r2, [pc, #84]	; (8005d84 <RTC_WeekDayNum+0xe4>)
 8005d30:	fba2 2303 	umull	r2, r3, r2, r3
 8005d34:	085a      	lsrs	r2, r3, #1
 8005d36:	78bb      	ldrb	r3, [r7, #2]
 8005d38:	441a      	add	r2, r3
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	441a      	add	r2, r3
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	089b      	lsrs	r3, r3, #2
 8005d42:	441a      	add	r2, r3
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	4910      	ldr	r1, [pc, #64]	; (8005d88 <RTC_WeekDayNum+0xe8>)
 8005d48:	fba1 1303 	umull	r1, r3, r1, r3
 8005d4c:	095b      	lsrs	r3, r3, #5
 8005d4e:	1ad2      	subs	r2, r2, r3
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	490d      	ldr	r1, [pc, #52]	; (8005d88 <RTC_WeekDayNum+0xe8>)
 8005d54:	fba1 1303 	umull	r1, r3, r1, r3
 8005d58:	09db      	lsrs	r3, r3, #7
 8005d5a:	4413      	add	r3, r2
 8005d5c:	1c9a      	adds	r2, r3, #2
 8005d5e:	4b0b      	ldr	r3, [pc, #44]	; (8005d8c <RTC_WeekDayNum+0xec>)
 8005d60:	fba3 1302 	umull	r1, r3, r3, r2
 8005d64:	1ad1      	subs	r1, r2, r3
 8005d66:	0849      	lsrs	r1, r1, #1
 8005d68:	440b      	add	r3, r1
 8005d6a:	0899      	lsrs	r1, r3, #2
 8005d6c:	460b      	mov	r3, r1
 8005d6e:	00db      	lsls	r3, r3, #3
 8005d70:	1a5b      	subs	r3, r3, r1
 8005d72:	1ad3      	subs	r3, r2, r3
 8005d74:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	b2db      	uxtb	r3, r3
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3714      	adds	r7, #20
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bc80      	pop	{r7}
 8005d82:	4770      	bx	lr
 8005d84:	38e38e39 	.word	0x38e38e39
 8005d88:	51eb851f 	.word	0x51eb851f
 8005d8c:	24924925 	.word	0x24924925

08005d90 <HAL_RTCEx_RTCIRQHandler>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_RTCIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b082      	sub	sp, #8
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f003 0301 	and.w	r3, r3, #1
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d027      	beq.n	8005df6 <HAL_RTCEx_RTCIRQHandler+0x66>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	f003 0301 	and.w	r3, r3, #1
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d020      	beq.n	8005df6 <HAL_RTCEx_RTCIRQHandler+0x66>
    {
      /* Check if Overrun occurred */
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	f003 0304 	and.w	r3, r3, #4
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d00b      	beq.n	8005dda <HAL_RTCEx_RTCIRQHandler+0x4a>
      {
        /* Second error callback */
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 f824 	bl	8005e10 <HAL_RTCEx_RTCEventErrorCallback>

        /* Clear flag Second */
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f06f 0204 	mvn.w	r2, #4
 8005dd0:	605a      	str	r2, [r3, #4]

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2204      	movs	r2, #4
 8005dd6:	745a      	strb	r2, [r3, #17]
 8005dd8:	e005      	b.n	8005de6 <HAL_RTCEx_RTCIRQHandler+0x56>
      }
      else
      {
        /* Second callback */
        HAL_RTCEx_RTCEventCallback(hrtc);
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 f80f 	bl	8005dfe <HAL_RTCEx_RTCEventCallback>

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	745a      	strb	r2, [r3, #17]
      }

      /* Clear flag Second */
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	685a      	ldr	r2, [r3, #4]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f022 0201 	bic.w	r2, r2, #1
 8005df4:	605a      	str	r2, [r3, #4]
    }
  }
}
 8005df6:	bf00      	nop
 8005df8:	3708      	adds	r7, #8
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}

08005dfe <HAL_RTCEx_RTCEventCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005dfe:	b480      	push	{r7}
 8005e00:	b083      	sub	sp, #12
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventCallback could be implemented in the user file
   */
}
 8005e06:	bf00      	nop
 8005e08:	370c      	adds	r7, #12
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bc80      	pop	{r7}
 8005e0e:	4770      	bx	lr

08005e10 <HAL_RTCEx_RTCEventErrorCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventErrorCallback(RTC_HandleTypeDef *hrtc)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventErrorCallback could be implemented in the user file
   */
}
 8005e18:	bf00      	nop
 8005e1a:	370c      	adds	r7, #12
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bc80      	pop	{r7}
 8005e20:	4770      	bx	lr
	...

08005e24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b085      	sub	sp, #20
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d001      	beq.n	8005e3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e044      	b.n	8005ec6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2202      	movs	r2, #2
 8005e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	68da      	ldr	r2, [r3, #12]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f042 0201 	orr.w	r2, r2, #1
 8005e52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a1d      	ldr	r2, [pc, #116]	; (8005ed0 <HAL_TIM_Base_Start_IT+0xac>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d018      	beq.n	8005e90 <HAL_TIM_Base_Start_IT+0x6c>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a1c      	ldr	r2, [pc, #112]	; (8005ed4 <HAL_TIM_Base_Start_IT+0xb0>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d013      	beq.n	8005e90 <HAL_TIM_Base_Start_IT+0x6c>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e70:	d00e      	beq.n	8005e90 <HAL_TIM_Base_Start_IT+0x6c>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a18      	ldr	r2, [pc, #96]	; (8005ed8 <HAL_TIM_Base_Start_IT+0xb4>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d009      	beq.n	8005e90 <HAL_TIM_Base_Start_IT+0x6c>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a16      	ldr	r2, [pc, #88]	; (8005edc <HAL_TIM_Base_Start_IT+0xb8>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d004      	beq.n	8005e90 <HAL_TIM_Base_Start_IT+0x6c>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a15      	ldr	r2, [pc, #84]	; (8005ee0 <HAL_TIM_Base_Start_IT+0xbc>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d111      	bne.n	8005eb4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	f003 0307 	and.w	r3, r3, #7
 8005e9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2b06      	cmp	r3, #6
 8005ea0:	d010      	beq.n	8005ec4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f042 0201 	orr.w	r2, r2, #1
 8005eb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eb2:	e007      	b.n	8005ec4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f042 0201 	orr.w	r2, r2, #1
 8005ec2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ec4:	2300      	movs	r3, #0
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3714      	adds	r7, #20
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bc80      	pop	{r7}
 8005ece:	4770      	bx	lr
 8005ed0:	40012c00 	.word	0x40012c00
 8005ed4:	40013400 	.word	0x40013400
 8005ed8:	40000400 	.word	0x40000400
 8005edc:	40000800 	.word	0x40000800
 8005ee0:	40000c00 	.word	0x40000c00

08005ee4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b082      	sub	sp, #8
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d101      	bne.n	8005ef6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e041      	b.n	8005f7a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d106      	bne.n	8005f10 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f7fc fef8 	bl	8002d00 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2202      	movs	r2, #2
 8005f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	3304      	adds	r3, #4
 8005f20:	4619      	mov	r1, r3
 8005f22:	4610      	mov	r0, r2
 8005f24:	f000 fb22 	bl	800656c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2201      	movs	r2, #1
 8005f54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f78:	2300      	movs	r3, #0
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3708      	adds	r7, #8
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
	...

08005f84 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b084      	sub	sp, #16
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d109      	bne.n	8005fa8 <HAL_TIM_PWM_Start_IT+0x24>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f9a:	b2db      	uxtb	r3, r3
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	bf14      	ite	ne
 8005fa0:	2301      	movne	r3, #1
 8005fa2:	2300      	moveq	r3, #0
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	e022      	b.n	8005fee <HAL_TIM_PWM_Start_IT+0x6a>
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	2b04      	cmp	r3, #4
 8005fac:	d109      	bne.n	8005fc2 <HAL_TIM_PWM_Start_IT+0x3e>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	bf14      	ite	ne
 8005fba:	2301      	movne	r3, #1
 8005fbc:	2300      	moveq	r3, #0
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	e015      	b.n	8005fee <HAL_TIM_PWM_Start_IT+0x6a>
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	2b08      	cmp	r3, #8
 8005fc6:	d109      	bne.n	8005fdc <HAL_TIM_PWM_Start_IT+0x58>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	bf14      	ite	ne
 8005fd4:	2301      	movne	r3, #1
 8005fd6:	2300      	moveq	r3, #0
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	e008      	b.n	8005fee <HAL_TIM_PWM_Start_IT+0x6a>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fe2:	b2db      	uxtb	r3, r3
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	bf14      	ite	ne
 8005fe8:	2301      	movne	r3, #1
 8005fea:	2300      	moveq	r3, #0
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d001      	beq.n	8005ff6 <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e0b8      	b.n	8006168 <HAL_TIM_PWM_Start_IT+0x1e4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d104      	bne.n	8006006 <HAL_TIM_PWM_Start_IT+0x82>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2202      	movs	r2, #2
 8006000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006004:	e013      	b.n	800602e <HAL_TIM_PWM_Start_IT+0xaa>
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	2b04      	cmp	r3, #4
 800600a:	d104      	bne.n	8006016 <HAL_TIM_PWM_Start_IT+0x92>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2202      	movs	r2, #2
 8006010:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006014:	e00b      	b.n	800602e <HAL_TIM_PWM_Start_IT+0xaa>
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	2b08      	cmp	r3, #8
 800601a:	d104      	bne.n	8006026 <HAL_TIM_PWM_Start_IT+0xa2>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2202      	movs	r2, #2
 8006020:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006024:	e003      	b.n	800602e <HAL_TIM_PWM_Start_IT+0xaa>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2202      	movs	r2, #2
 800602a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	2b0c      	cmp	r3, #12
 8006032:	d841      	bhi.n	80060b8 <HAL_TIM_PWM_Start_IT+0x134>
 8006034:	a201      	add	r2, pc, #4	; (adr r2, 800603c <HAL_TIM_PWM_Start_IT+0xb8>)
 8006036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800603a:	bf00      	nop
 800603c:	08006071 	.word	0x08006071
 8006040:	080060b9 	.word	0x080060b9
 8006044:	080060b9 	.word	0x080060b9
 8006048:	080060b9 	.word	0x080060b9
 800604c:	08006083 	.word	0x08006083
 8006050:	080060b9 	.word	0x080060b9
 8006054:	080060b9 	.word	0x080060b9
 8006058:	080060b9 	.word	0x080060b9
 800605c:	08006095 	.word	0x08006095
 8006060:	080060b9 	.word	0x080060b9
 8006064:	080060b9 	.word	0x080060b9
 8006068:	080060b9 	.word	0x080060b9
 800606c:	080060a7 	.word	0x080060a7
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	68da      	ldr	r2, [r3, #12]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f042 0202 	orr.w	r2, r2, #2
 800607e:	60da      	str	r2, [r3, #12]
      break;
 8006080:	e01b      	b.n	80060ba <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	68da      	ldr	r2, [r3, #12]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f042 0204 	orr.w	r2, r2, #4
 8006090:	60da      	str	r2, [r3, #12]
      break;
 8006092:	e012      	b.n	80060ba <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	68da      	ldr	r2, [r3, #12]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f042 0208 	orr.w	r2, r2, #8
 80060a2:	60da      	str	r2, [r3, #12]
      break;
 80060a4:	e009      	b.n	80060ba <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	68da      	ldr	r2, [r3, #12]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f042 0210 	orr.w	r2, r2, #16
 80060b4:	60da      	str	r2, [r3, #12]
      break;
 80060b6:	e000      	b.n	80060ba <HAL_TIM_PWM_Start_IT+0x136>
    }

    default:
      break;
 80060b8:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	2201      	movs	r2, #1
 80060c0:	6839      	ldr	r1, [r7, #0]
 80060c2:	4618      	mov	r0, r3
 80060c4:	f000 fc78 	bl	80069b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a28      	ldr	r2, [pc, #160]	; (8006170 <HAL_TIM_PWM_Start_IT+0x1ec>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d004      	beq.n	80060dc <HAL_TIM_PWM_Start_IT+0x158>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a27      	ldr	r2, [pc, #156]	; (8006174 <HAL_TIM_PWM_Start_IT+0x1f0>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d101      	bne.n	80060e0 <HAL_TIM_PWM_Start_IT+0x15c>
 80060dc:	2301      	movs	r3, #1
 80060de:	e000      	b.n	80060e2 <HAL_TIM_PWM_Start_IT+0x15e>
 80060e0:	2300      	movs	r3, #0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d007      	beq.n	80060f6 <HAL_TIM_PWM_Start_IT+0x172>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80060f4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a1d      	ldr	r2, [pc, #116]	; (8006170 <HAL_TIM_PWM_Start_IT+0x1ec>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d018      	beq.n	8006132 <HAL_TIM_PWM_Start_IT+0x1ae>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a1b      	ldr	r2, [pc, #108]	; (8006174 <HAL_TIM_PWM_Start_IT+0x1f0>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d013      	beq.n	8006132 <HAL_TIM_PWM_Start_IT+0x1ae>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006112:	d00e      	beq.n	8006132 <HAL_TIM_PWM_Start_IT+0x1ae>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a17      	ldr	r2, [pc, #92]	; (8006178 <HAL_TIM_PWM_Start_IT+0x1f4>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d009      	beq.n	8006132 <HAL_TIM_PWM_Start_IT+0x1ae>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a16      	ldr	r2, [pc, #88]	; (800617c <HAL_TIM_PWM_Start_IT+0x1f8>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d004      	beq.n	8006132 <HAL_TIM_PWM_Start_IT+0x1ae>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a14      	ldr	r2, [pc, #80]	; (8006180 <HAL_TIM_PWM_Start_IT+0x1fc>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d111      	bne.n	8006156 <HAL_TIM_PWM_Start_IT+0x1d2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	f003 0307 	and.w	r3, r3, #7
 800613c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2b06      	cmp	r3, #6
 8006142:	d010      	beq.n	8006166 <HAL_TIM_PWM_Start_IT+0x1e2>
    {
      __HAL_TIM_ENABLE(htim);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f042 0201 	orr.w	r2, r2, #1
 8006152:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006154:	e007      	b.n	8006166 <HAL_TIM_PWM_Start_IT+0x1e2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f042 0201 	orr.w	r2, r2, #1
 8006164:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006166:	2300      	movs	r3, #0
}
 8006168:	4618      	mov	r0, r3
 800616a:	3710      	adds	r7, #16
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}
 8006170:	40012c00 	.word	0x40012c00
 8006174:	40013400 	.word	0x40013400
 8006178:	40000400 	.word	0x40000400
 800617c:	40000800 	.word	0x40000800
 8006180:	40000c00 	.word	0x40000c00

08006184 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b082      	sub	sp, #8
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	f003 0302 	and.w	r3, r3, #2
 8006196:	2b02      	cmp	r3, #2
 8006198:	d122      	bne.n	80061e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	f003 0302 	and.w	r3, r3, #2
 80061a4:	2b02      	cmp	r3, #2
 80061a6:	d11b      	bne.n	80061e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f06f 0202 	mvn.w	r2, #2
 80061b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2201      	movs	r2, #1
 80061b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	699b      	ldr	r3, [r3, #24]
 80061be:	f003 0303 	and.w	r3, r3, #3
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d003      	beq.n	80061ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 f9b4 	bl	8006534 <HAL_TIM_IC_CaptureCallback>
 80061cc:	e005      	b.n	80061da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 f9a7 	bl	8006522 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f000 f9b6 	bl	8006546 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2200      	movs	r2, #0
 80061de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	691b      	ldr	r3, [r3, #16]
 80061e6:	f003 0304 	and.w	r3, r3, #4
 80061ea:	2b04      	cmp	r3, #4
 80061ec:	d122      	bne.n	8006234 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	f003 0304 	and.w	r3, r3, #4
 80061f8:	2b04      	cmp	r3, #4
 80061fa:	d11b      	bne.n	8006234 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f06f 0204 	mvn.w	r2, #4
 8006204:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2202      	movs	r2, #2
 800620a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	699b      	ldr	r3, [r3, #24]
 8006212:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006216:	2b00      	cmp	r3, #0
 8006218:	d003      	beq.n	8006222 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 f98a 	bl	8006534 <HAL_TIM_IC_CaptureCallback>
 8006220:	e005      	b.n	800622e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 f97d 	bl	8006522 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f000 f98c 	bl	8006546 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2200      	movs	r2, #0
 8006232:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	f003 0308 	and.w	r3, r3, #8
 800623e:	2b08      	cmp	r3, #8
 8006240:	d122      	bne.n	8006288 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	f003 0308 	and.w	r3, r3, #8
 800624c:	2b08      	cmp	r3, #8
 800624e:	d11b      	bne.n	8006288 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f06f 0208 	mvn.w	r2, #8
 8006258:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2204      	movs	r2, #4
 800625e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	69db      	ldr	r3, [r3, #28]
 8006266:	f003 0303 	and.w	r3, r3, #3
 800626a:	2b00      	cmp	r3, #0
 800626c:	d003      	beq.n	8006276 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 f960 	bl	8006534 <HAL_TIM_IC_CaptureCallback>
 8006274:	e005      	b.n	8006282 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 f953 	bl	8006522 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f000 f962 	bl	8006546 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2200      	movs	r2, #0
 8006286:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	691b      	ldr	r3, [r3, #16]
 800628e:	f003 0310 	and.w	r3, r3, #16
 8006292:	2b10      	cmp	r3, #16
 8006294:	d122      	bne.n	80062dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	68db      	ldr	r3, [r3, #12]
 800629c:	f003 0310 	and.w	r3, r3, #16
 80062a0:	2b10      	cmp	r3, #16
 80062a2:	d11b      	bne.n	80062dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f06f 0210 	mvn.w	r2, #16
 80062ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2208      	movs	r2, #8
 80062b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	69db      	ldr	r3, [r3, #28]
 80062ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d003      	beq.n	80062ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 f936 	bl	8006534 <HAL_TIM_IC_CaptureCallback>
 80062c8:	e005      	b.n	80062d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 f929 	bl	8006522 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f000 f938 	bl	8006546 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	691b      	ldr	r3, [r3, #16]
 80062e2:	f003 0301 	and.w	r3, r3, #1
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d10e      	bne.n	8006308 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	f003 0301 	and.w	r3, r3, #1
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d107      	bne.n	8006308 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f06f 0201 	mvn.w	r2, #1
 8006300:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f000 f904 	bl	8006510 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006312:	2b80      	cmp	r3, #128	; 0x80
 8006314:	d10e      	bne.n	8006334 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006320:	2b80      	cmp	r3, #128	; 0x80
 8006322:	d107      	bne.n	8006334 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800632c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 fbdb 	bl	8006aea <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	691b      	ldr	r3, [r3, #16]
 800633a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800633e:	2b40      	cmp	r3, #64	; 0x40
 8006340:	d10e      	bne.n	8006360 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800634c:	2b40      	cmp	r3, #64	; 0x40
 800634e:	d107      	bne.n	8006360 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 f8fc 	bl	8006558 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	691b      	ldr	r3, [r3, #16]
 8006366:	f003 0320 	and.w	r3, r3, #32
 800636a:	2b20      	cmp	r3, #32
 800636c:	d10e      	bne.n	800638c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	f003 0320 	and.w	r3, r3, #32
 8006378:	2b20      	cmp	r3, #32
 800637a:	d107      	bne.n	800638c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f06f 0220 	mvn.w	r2, #32
 8006384:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 fba6 	bl	8006ad8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800638c:	bf00      	nop
 800638e:	3708      	adds	r7, #8
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b084      	sub	sp, #16
 8006398:	af00      	add	r7, sp, #0
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	d101      	bne.n	80063ae <HAL_TIM_PWM_ConfigChannel+0x1a>
 80063aa:	2302      	movs	r3, #2
 80063ac:	e0ac      	b.n	8006508 <HAL_TIM_PWM_ConfigChannel+0x174>
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2201      	movs	r2, #1
 80063b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2b0c      	cmp	r3, #12
 80063ba:	f200 809f 	bhi.w	80064fc <HAL_TIM_PWM_ConfigChannel+0x168>
 80063be:	a201      	add	r2, pc, #4	; (adr r2, 80063c4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80063c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063c4:	080063f9 	.word	0x080063f9
 80063c8:	080064fd 	.word	0x080064fd
 80063cc:	080064fd 	.word	0x080064fd
 80063d0:	080064fd 	.word	0x080064fd
 80063d4:	08006439 	.word	0x08006439
 80063d8:	080064fd 	.word	0x080064fd
 80063dc:	080064fd 	.word	0x080064fd
 80063e0:	080064fd 	.word	0x080064fd
 80063e4:	0800647b 	.word	0x0800647b
 80063e8:	080064fd 	.word	0x080064fd
 80063ec:	080064fd 	.word	0x080064fd
 80063f0:	080064fd 	.word	0x080064fd
 80063f4:	080064bb 	.word	0x080064bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	68b9      	ldr	r1, [r7, #8]
 80063fe:	4618      	mov	r0, r3
 8006400:	f000 f92e 	bl	8006660 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	699a      	ldr	r2, [r3, #24]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f042 0208 	orr.w	r2, r2, #8
 8006412:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	699a      	ldr	r2, [r3, #24]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f022 0204 	bic.w	r2, r2, #4
 8006422:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	6999      	ldr	r1, [r3, #24]
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	691a      	ldr	r2, [r3, #16]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	430a      	orrs	r2, r1
 8006434:	619a      	str	r2, [r3, #24]
      break;
 8006436:	e062      	b.n	80064fe <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	68b9      	ldr	r1, [r7, #8]
 800643e:	4618      	mov	r0, r3
 8006440:	f000 f97e 	bl	8006740 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	699a      	ldr	r2, [r3, #24]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006452:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	699a      	ldr	r2, [r3, #24]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006462:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	6999      	ldr	r1, [r3, #24]
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	021a      	lsls	r2, r3, #8
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	430a      	orrs	r2, r1
 8006476:	619a      	str	r2, [r3, #24]
      break;
 8006478:	e041      	b.n	80064fe <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	68b9      	ldr	r1, [r7, #8]
 8006480:	4618      	mov	r0, r3
 8006482:	f000 f9d1 	bl	8006828 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	69da      	ldr	r2, [r3, #28]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f042 0208 	orr.w	r2, r2, #8
 8006494:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	69da      	ldr	r2, [r3, #28]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f022 0204 	bic.w	r2, r2, #4
 80064a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	69d9      	ldr	r1, [r3, #28]
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	691a      	ldr	r2, [r3, #16]
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	430a      	orrs	r2, r1
 80064b6:	61da      	str	r2, [r3, #28]
      break;
 80064b8:	e021      	b.n	80064fe <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	68b9      	ldr	r1, [r7, #8]
 80064c0:	4618      	mov	r0, r3
 80064c2:	f000 fa25 	bl	8006910 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	69da      	ldr	r2, [r3, #28]
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	69da      	ldr	r2, [r3, #28]
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	69d9      	ldr	r1, [r3, #28]
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	691b      	ldr	r3, [r3, #16]
 80064f0:	021a      	lsls	r2, r3, #8
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	430a      	orrs	r2, r1
 80064f8:	61da      	str	r2, [r3, #28]
      break;
 80064fa:	e000      	b.n	80064fe <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80064fc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2200      	movs	r2, #0
 8006502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006506:	2300      	movs	r3, #0
}
 8006508:	4618      	mov	r0, r3
 800650a:	3710      	adds	r7, #16
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}

08006510 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006510:	b480      	push	{r7}
 8006512:	b083      	sub	sp, #12
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006518:	bf00      	nop
 800651a:	370c      	adds	r7, #12
 800651c:	46bd      	mov	sp, r7
 800651e:	bc80      	pop	{r7}
 8006520:	4770      	bx	lr

08006522 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006522:	b480      	push	{r7}
 8006524:	b083      	sub	sp, #12
 8006526:	af00      	add	r7, sp, #0
 8006528:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800652a:	bf00      	nop
 800652c:	370c      	adds	r7, #12
 800652e:	46bd      	mov	sp, r7
 8006530:	bc80      	pop	{r7}
 8006532:	4770      	bx	lr

08006534 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800653c:	bf00      	nop
 800653e:	370c      	adds	r7, #12
 8006540:	46bd      	mov	sp, r7
 8006542:	bc80      	pop	{r7}
 8006544:	4770      	bx	lr

08006546 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006546:	b480      	push	{r7}
 8006548:	b083      	sub	sp, #12
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800654e:	bf00      	nop
 8006550:	370c      	adds	r7, #12
 8006552:	46bd      	mov	sp, r7
 8006554:	bc80      	pop	{r7}
 8006556:	4770      	bx	lr

08006558 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006558:	b480      	push	{r7}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006560:	bf00      	nop
 8006562:	370c      	adds	r7, #12
 8006564:	46bd      	mov	sp, r7
 8006566:	bc80      	pop	{r7}
 8006568:	4770      	bx	lr
	...

0800656c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800656c:	b480      	push	{r7}
 800656e:	b085      	sub	sp, #20
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	4a33      	ldr	r2, [pc, #204]	; (800664c <TIM_Base_SetConfig+0xe0>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d013      	beq.n	80065ac <TIM_Base_SetConfig+0x40>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	4a32      	ldr	r2, [pc, #200]	; (8006650 <TIM_Base_SetConfig+0xe4>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d00f      	beq.n	80065ac <TIM_Base_SetConfig+0x40>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006592:	d00b      	beq.n	80065ac <TIM_Base_SetConfig+0x40>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	4a2f      	ldr	r2, [pc, #188]	; (8006654 <TIM_Base_SetConfig+0xe8>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d007      	beq.n	80065ac <TIM_Base_SetConfig+0x40>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	4a2e      	ldr	r2, [pc, #184]	; (8006658 <TIM_Base_SetConfig+0xec>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d003      	beq.n	80065ac <TIM_Base_SetConfig+0x40>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	4a2d      	ldr	r2, [pc, #180]	; (800665c <TIM_Base_SetConfig+0xf0>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d108      	bne.n	80065be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	68fa      	ldr	r2, [r7, #12]
 80065ba:	4313      	orrs	r3, r2
 80065bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	4a22      	ldr	r2, [pc, #136]	; (800664c <TIM_Base_SetConfig+0xe0>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d013      	beq.n	80065ee <TIM_Base_SetConfig+0x82>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	4a21      	ldr	r2, [pc, #132]	; (8006650 <TIM_Base_SetConfig+0xe4>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d00f      	beq.n	80065ee <TIM_Base_SetConfig+0x82>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065d4:	d00b      	beq.n	80065ee <TIM_Base_SetConfig+0x82>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	4a1e      	ldr	r2, [pc, #120]	; (8006654 <TIM_Base_SetConfig+0xe8>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d007      	beq.n	80065ee <TIM_Base_SetConfig+0x82>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	4a1d      	ldr	r2, [pc, #116]	; (8006658 <TIM_Base_SetConfig+0xec>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d003      	beq.n	80065ee <TIM_Base_SetConfig+0x82>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	4a1c      	ldr	r2, [pc, #112]	; (800665c <TIM_Base_SetConfig+0xf0>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d108      	bne.n	8006600 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	68fa      	ldr	r2, [r7, #12]
 80065fc:	4313      	orrs	r3, r2
 80065fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	695b      	ldr	r3, [r3, #20]
 800660a:	4313      	orrs	r3, r2
 800660c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	68fa      	ldr	r2, [r7, #12]
 8006612:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	689a      	ldr	r2, [r3, #8]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	4a09      	ldr	r2, [pc, #36]	; (800664c <TIM_Base_SetConfig+0xe0>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d003      	beq.n	8006634 <TIM_Base_SetConfig+0xc8>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	4a08      	ldr	r2, [pc, #32]	; (8006650 <TIM_Base_SetConfig+0xe4>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d103      	bne.n	800663c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	691a      	ldr	r2, [r3, #16]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2201      	movs	r2, #1
 8006640:	615a      	str	r2, [r3, #20]
}
 8006642:	bf00      	nop
 8006644:	3714      	adds	r7, #20
 8006646:	46bd      	mov	sp, r7
 8006648:	bc80      	pop	{r7}
 800664a:	4770      	bx	lr
 800664c:	40012c00 	.word	0x40012c00
 8006650:	40013400 	.word	0x40013400
 8006654:	40000400 	.word	0x40000400
 8006658:	40000800 	.word	0x40000800
 800665c:	40000c00 	.word	0x40000c00

08006660 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006660:	b480      	push	{r7}
 8006662:	b087      	sub	sp, #28
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6a1b      	ldr	r3, [r3, #32]
 800666e:	f023 0201 	bic.w	r2, r3, #1
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6a1b      	ldr	r3, [r3, #32]
 800667a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	699b      	ldr	r3, [r3, #24]
 8006686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800668e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f023 0303 	bic.w	r3, r3, #3
 8006696:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	68fa      	ldr	r2, [r7, #12]
 800669e:	4313      	orrs	r3, r2
 80066a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	f023 0302 	bic.w	r3, r3, #2
 80066a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	697a      	ldr	r2, [r7, #20]
 80066b0:	4313      	orrs	r3, r2
 80066b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	4a20      	ldr	r2, [pc, #128]	; (8006738 <TIM_OC1_SetConfig+0xd8>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d003      	beq.n	80066c4 <TIM_OC1_SetConfig+0x64>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	4a1f      	ldr	r2, [pc, #124]	; (800673c <TIM_OC1_SetConfig+0xdc>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d10c      	bne.n	80066de <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	f023 0308 	bic.w	r3, r3, #8
 80066ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	68db      	ldr	r3, [r3, #12]
 80066d0:	697a      	ldr	r2, [r7, #20]
 80066d2:	4313      	orrs	r3, r2
 80066d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	f023 0304 	bic.w	r3, r3, #4
 80066dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	4a15      	ldr	r2, [pc, #84]	; (8006738 <TIM_OC1_SetConfig+0xd8>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d003      	beq.n	80066ee <TIM_OC1_SetConfig+0x8e>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	4a14      	ldr	r2, [pc, #80]	; (800673c <TIM_OC1_SetConfig+0xdc>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d111      	bne.n	8006712 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80066fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	695b      	ldr	r3, [r3, #20]
 8006702:	693a      	ldr	r2, [r7, #16]
 8006704:	4313      	orrs	r3, r2
 8006706:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	699b      	ldr	r3, [r3, #24]
 800670c:	693a      	ldr	r2, [r7, #16]
 800670e:	4313      	orrs	r3, r2
 8006710:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	693a      	ldr	r2, [r7, #16]
 8006716:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	68fa      	ldr	r2, [r7, #12]
 800671c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	685a      	ldr	r2, [r3, #4]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	697a      	ldr	r2, [r7, #20]
 800672a:	621a      	str	r2, [r3, #32]
}
 800672c:	bf00      	nop
 800672e:	371c      	adds	r7, #28
 8006730:	46bd      	mov	sp, r7
 8006732:	bc80      	pop	{r7}
 8006734:	4770      	bx	lr
 8006736:	bf00      	nop
 8006738:	40012c00 	.word	0x40012c00
 800673c:	40013400 	.word	0x40013400

08006740 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006740:	b480      	push	{r7}
 8006742:	b087      	sub	sp, #28
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6a1b      	ldr	r3, [r3, #32]
 800674e:	f023 0210 	bic.w	r2, r3, #16
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6a1b      	ldr	r3, [r3, #32]
 800675a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	699b      	ldr	r3, [r3, #24]
 8006766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800676e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006776:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	021b      	lsls	r3, r3, #8
 800677e:	68fa      	ldr	r2, [r7, #12]
 8006780:	4313      	orrs	r3, r2
 8006782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	f023 0320 	bic.w	r3, r3, #32
 800678a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	011b      	lsls	r3, r3, #4
 8006792:	697a      	ldr	r2, [r7, #20]
 8006794:	4313      	orrs	r3, r2
 8006796:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	4a21      	ldr	r2, [pc, #132]	; (8006820 <TIM_OC2_SetConfig+0xe0>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d003      	beq.n	80067a8 <TIM_OC2_SetConfig+0x68>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	4a20      	ldr	r2, [pc, #128]	; (8006824 <TIM_OC2_SetConfig+0xe4>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d10d      	bne.n	80067c4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	68db      	ldr	r3, [r3, #12]
 80067b4:	011b      	lsls	r3, r3, #4
 80067b6:	697a      	ldr	r2, [r7, #20]
 80067b8:	4313      	orrs	r3, r2
 80067ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	4a16      	ldr	r2, [pc, #88]	; (8006820 <TIM_OC2_SetConfig+0xe0>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d003      	beq.n	80067d4 <TIM_OC2_SetConfig+0x94>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	4a15      	ldr	r2, [pc, #84]	; (8006824 <TIM_OC2_SetConfig+0xe4>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d113      	bne.n	80067fc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80067da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80067e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	695b      	ldr	r3, [r3, #20]
 80067e8:	009b      	lsls	r3, r3, #2
 80067ea:	693a      	ldr	r2, [r7, #16]
 80067ec:	4313      	orrs	r3, r2
 80067ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	699b      	ldr	r3, [r3, #24]
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	693a      	ldr	r2, [r7, #16]
 80067f8:	4313      	orrs	r3, r2
 80067fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	693a      	ldr	r2, [r7, #16]
 8006800:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	68fa      	ldr	r2, [r7, #12]
 8006806:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	685a      	ldr	r2, [r3, #4]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	697a      	ldr	r2, [r7, #20]
 8006814:	621a      	str	r2, [r3, #32]
}
 8006816:	bf00      	nop
 8006818:	371c      	adds	r7, #28
 800681a:	46bd      	mov	sp, r7
 800681c:	bc80      	pop	{r7}
 800681e:	4770      	bx	lr
 8006820:	40012c00 	.word	0x40012c00
 8006824:	40013400 	.word	0x40013400

08006828 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006828:	b480      	push	{r7}
 800682a:	b087      	sub	sp, #28
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6a1b      	ldr	r3, [r3, #32]
 8006836:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6a1b      	ldr	r3, [r3, #32]
 8006842:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	69db      	ldr	r3, [r3, #28]
 800684e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006856:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f023 0303 	bic.w	r3, r3, #3
 800685e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	68fa      	ldr	r2, [r7, #12]
 8006866:	4313      	orrs	r3, r2
 8006868:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006870:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	021b      	lsls	r3, r3, #8
 8006878:	697a      	ldr	r2, [r7, #20]
 800687a:	4313      	orrs	r3, r2
 800687c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	4a21      	ldr	r2, [pc, #132]	; (8006908 <TIM_OC3_SetConfig+0xe0>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d003      	beq.n	800688e <TIM_OC3_SetConfig+0x66>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	4a20      	ldr	r2, [pc, #128]	; (800690c <TIM_OC3_SetConfig+0xe4>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d10d      	bne.n	80068aa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006894:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	68db      	ldr	r3, [r3, #12]
 800689a:	021b      	lsls	r3, r3, #8
 800689c:	697a      	ldr	r2, [r7, #20]
 800689e:	4313      	orrs	r3, r2
 80068a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80068a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	4a16      	ldr	r2, [pc, #88]	; (8006908 <TIM_OC3_SetConfig+0xe0>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d003      	beq.n	80068ba <TIM_OC3_SetConfig+0x92>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	4a15      	ldr	r2, [pc, #84]	; (800690c <TIM_OC3_SetConfig+0xe4>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d113      	bne.n	80068e2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80068c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	695b      	ldr	r3, [r3, #20]
 80068ce:	011b      	lsls	r3, r3, #4
 80068d0:	693a      	ldr	r2, [r7, #16]
 80068d2:	4313      	orrs	r3, r2
 80068d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	699b      	ldr	r3, [r3, #24]
 80068da:	011b      	lsls	r3, r3, #4
 80068dc:	693a      	ldr	r2, [r7, #16]
 80068de:	4313      	orrs	r3, r2
 80068e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	693a      	ldr	r2, [r7, #16]
 80068e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	68fa      	ldr	r2, [r7, #12]
 80068ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	685a      	ldr	r2, [r3, #4]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	697a      	ldr	r2, [r7, #20]
 80068fa:	621a      	str	r2, [r3, #32]
}
 80068fc:	bf00      	nop
 80068fe:	371c      	adds	r7, #28
 8006900:	46bd      	mov	sp, r7
 8006902:	bc80      	pop	{r7}
 8006904:	4770      	bx	lr
 8006906:	bf00      	nop
 8006908:	40012c00 	.word	0x40012c00
 800690c:	40013400 	.word	0x40013400

08006910 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006910:	b480      	push	{r7}
 8006912:	b087      	sub	sp, #28
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6a1b      	ldr	r3, [r3, #32]
 800691e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6a1b      	ldr	r3, [r3, #32]
 800692a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	69db      	ldr	r3, [r3, #28]
 8006936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800693e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006946:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	021b      	lsls	r3, r3, #8
 800694e:	68fa      	ldr	r2, [r7, #12]
 8006950:	4313      	orrs	r3, r2
 8006952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800695a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	031b      	lsls	r3, r3, #12
 8006962:	693a      	ldr	r2, [r7, #16]
 8006964:	4313      	orrs	r3, r2
 8006966:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	4a11      	ldr	r2, [pc, #68]	; (80069b0 <TIM_OC4_SetConfig+0xa0>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d003      	beq.n	8006978 <TIM_OC4_SetConfig+0x68>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	4a10      	ldr	r2, [pc, #64]	; (80069b4 <TIM_OC4_SetConfig+0xa4>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d109      	bne.n	800698c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800697e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	695b      	ldr	r3, [r3, #20]
 8006984:	019b      	lsls	r3, r3, #6
 8006986:	697a      	ldr	r2, [r7, #20]
 8006988:	4313      	orrs	r3, r2
 800698a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	697a      	ldr	r2, [r7, #20]
 8006990:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	68fa      	ldr	r2, [r7, #12]
 8006996:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	685a      	ldr	r2, [r3, #4]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	693a      	ldr	r2, [r7, #16]
 80069a4:	621a      	str	r2, [r3, #32]
}
 80069a6:	bf00      	nop
 80069a8:	371c      	adds	r7, #28
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bc80      	pop	{r7}
 80069ae:	4770      	bx	lr
 80069b0:	40012c00 	.word	0x40012c00
 80069b4:	40013400 	.word	0x40013400

080069b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b087      	sub	sp, #28
 80069bc:	af00      	add	r7, sp, #0
 80069be:	60f8      	str	r0, [r7, #12]
 80069c0:	60b9      	str	r1, [r7, #8]
 80069c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	f003 031f 	and.w	r3, r3, #31
 80069ca:	2201      	movs	r2, #1
 80069cc:	fa02 f303 	lsl.w	r3, r2, r3
 80069d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	6a1a      	ldr	r2, [r3, #32]
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	43db      	mvns	r3, r3
 80069da:	401a      	ands	r2, r3
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	6a1a      	ldr	r2, [r3, #32]
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	f003 031f 	and.w	r3, r3, #31
 80069ea:	6879      	ldr	r1, [r7, #4]
 80069ec:	fa01 f303 	lsl.w	r3, r1, r3
 80069f0:	431a      	orrs	r2, r3
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	621a      	str	r2, [r3, #32]
}
 80069f6:	bf00      	nop
 80069f8:	371c      	adds	r7, #28
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bc80      	pop	{r7}
 80069fe:	4770      	bx	lr

08006a00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b085      	sub	sp, #20
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d101      	bne.n	8006a18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a14:	2302      	movs	r3, #2
 8006a16:	e050      	b.n	8006aba <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2202      	movs	r2, #2
 8006a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	68fa      	ldr	r2, [r7, #12]
 8006a46:	4313      	orrs	r3, r2
 8006a48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	68fa      	ldr	r2, [r7, #12]
 8006a50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a1b      	ldr	r2, [pc, #108]	; (8006ac4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d018      	beq.n	8006a8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a19      	ldr	r2, [pc, #100]	; (8006ac8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d013      	beq.n	8006a8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a6e:	d00e      	beq.n	8006a8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a15      	ldr	r2, [pc, #84]	; (8006acc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d009      	beq.n	8006a8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a14      	ldr	r2, [pc, #80]	; (8006ad0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d004      	beq.n	8006a8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a12      	ldr	r2, [pc, #72]	; (8006ad4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d10c      	bne.n	8006aa8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	68ba      	ldr	r2, [r7, #8]
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	68ba      	ldr	r2, [r7, #8]
 8006aa6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ab8:	2300      	movs	r3, #0
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3714      	adds	r7, #20
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bc80      	pop	{r7}
 8006ac2:	4770      	bx	lr
 8006ac4:	40012c00 	.word	0x40012c00
 8006ac8:	40013400 	.word	0x40013400
 8006acc:	40000400 	.word	0x40000400
 8006ad0:	40000800 	.word	0x40000800
 8006ad4:	40000c00 	.word	0x40000c00

08006ad8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b083      	sub	sp, #12
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ae0:	bf00      	nop
 8006ae2:	370c      	adds	r7, #12
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bc80      	pop	{r7}
 8006ae8:	4770      	bx	lr

08006aea <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006aea:	b480      	push	{r7}
 8006aec:	b083      	sub	sp, #12
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006af2:	bf00      	nop
 8006af4:	370c      	adds	r7, #12
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bc80      	pop	{r7}
 8006afa:	4770      	bx	lr

08006afc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b082      	sub	sp, #8
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d101      	bne.n	8006b0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	e03f      	b.n	8006b8e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b14:	b2db      	uxtb	r3, r3
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d106      	bne.n	8006b28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f7fc fa74 	bl	8003010 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2224      	movs	r2, #36	; 0x24
 8006b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	68da      	ldr	r2, [r3, #12]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f000 fbe5 	bl	8007310 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	691a      	ldr	r2, [r3, #16]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	695a      	ldr	r2, [r3, #20]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	68da      	ldr	r2, [r3, #12]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2220      	movs	r2, #32
 8006b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2220      	movs	r2, #32
 8006b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006b8c:	2300      	movs	r3, #0
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3708      	adds	r7, #8
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}

08006b96 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b96:	b480      	push	{r7}
 8006b98:	b085      	sub	sp, #20
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	60f8      	str	r0, [r7, #12]
 8006b9e:	60b9      	str	r1, [r7, #8]
 8006ba0:	4613      	mov	r3, r2
 8006ba2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	2b20      	cmp	r3, #32
 8006bae:	d130      	bne.n	8006c12 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d002      	beq.n	8006bbc <HAL_UART_Transmit_IT+0x26>
 8006bb6:	88fb      	ldrh	r3, [r7, #6]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d101      	bne.n	8006bc0 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	e029      	b.n	8006c14 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	d101      	bne.n	8006bce <HAL_UART_Transmit_IT+0x38>
 8006bca:	2302      	movs	r3, #2
 8006bcc:	e022      	b.n	8006c14 <HAL_UART_Transmit_IT+0x7e>
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	68ba      	ldr	r2, [r7, #8]
 8006bda:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	88fa      	ldrh	r2, [r7, #6]
 8006be0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	88fa      	ldrh	r2, [r7, #6]
 8006be6:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2200      	movs	r2, #0
 8006bec:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2221      	movs	r2, #33	; 0x21
 8006bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	68da      	ldr	r2, [r3, #12]
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006c0c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	e000      	b.n	8006c14 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8006c12:	2302      	movs	r3, #2
  }
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3714      	adds	r7, #20
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bc80      	pop	{r7}
 8006c1c:	4770      	bx	lr

08006c1e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c1e:	b580      	push	{r7, lr}
 8006c20:	b084      	sub	sp, #16
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	60f8      	str	r0, [r7, #12]
 8006c26:	60b9      	str	r1, [r7, #8]
 8006c28:	4613      	mov	r3, r2
 8006c2a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	2b20      	cmp	r3, #32
 8006c36:	d11d      	bne.n	8006c74 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d002      	beq.n	8006c44 <HAL_UART_Receive_IT+0x26>
 8006c3e:	88fb      	ldrh	r3, [r7, #6]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d101      	bne.n	8006c48 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006c44:	2301      	movs	r3, #1
 8006c46:	e016      	b.n	8006c76 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d101      	bne.n	8006c56 <HAL_UART_Receive_IT+0x38>
 8006c52:	2302      	movs	r3, #2
 8006c54:	e00f      	b.n	8006c76 <HAL_UART_Receive_IT+0x58>
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2201      	movs	r2, #1
 8006c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2200      	movs	r2, #0
 8006c62:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8006c64:	88fb      	ldrh	r3, [r7, #6]
 8006c66:	461a      	mov	r2, r3
 8006c68:	68b9      	ldr	r1, [r7, #8]
 8006c6a:	68f8      	ldr	r0, [r7, #12]
 8006c6c:	f000 f9c6 	bl	8006ffc <UART_Start_Receive_IT>
 8006c70:	4603      	mov	r3, r0
 8006c72:	e000      	b.n	8006c76 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006c74:	2302      	movs	r3, #2
  }
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3710      	adds	r7, #16
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
	...

08006c80 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b08a      	sub	sp, #40	; 0x28
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	68db      	ldr	r3, [r3, #12]
 8006c96:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	695b      	ldr	r3, [r3, #20]
 8006c9e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006caa:	f003 030f 	and.w	r3, r3, #15
 8006cae:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8006cb0:	69bb      	ldr	r3, [r7, #24]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d10d      	bne.n	8006cd2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb8:	f003 0320 	and.w	r3, r3, #32
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d008      	beq.n	8006cd2 <HAL_UART_IRQHandler+0x52>
 8006cc0:	6a3b      	ldr	r3, [r7, #32]
 8006cc2:	f003 0320 	and.w	r3, r3, #32
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d003      	beq.n	8006cd2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f000 fa76 	bl	80071bc <UART_Receive_IT>
      return;
 8006cd0:	e17b      	b.n	8006fca <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006cd2:	69bb      	ldr	r3, [r7, #24]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	f000 80b1 	beq.w	8006e3c <HAL_UART_IRQHandler+0x1bc>
 8006cda:	69fb      	ldr	r3, [r7, #28]
 8006cdc:	f003 0301 	and.w	r3, r3, #1
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d105      	bne.n	8006cf0 <HAL_UART_IRQHandler+0x70>
 8006ce4:	6a3b      	ldr	r3, [r7, #32]
 8006ce6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	f000 80a6 	beq.w	8006e3c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf2:	f003 0301 	and.w	r3, r3, #1
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d00a      	beq.n	8006d10 <HAL_UART_IRQHandler+0x90>
 8006cfa:	6a3b      	ldr	r3, [r7, #32]
 8006cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d005      	beq.n	8006d10 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d08:	f043 0201 	orr.w	r2, r3, #1
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d12:	f003 0304 	and.w	r3, r3, #4
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d00a      	beq.n	8006d30 <HAL_UART_IRQHandler+0xb0>
 8006d1a:	69fb      	ldr	r3, [r7, #28]
 8006d1c:	f003 0301 	and.w	r3, r3, #1
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d005      	beq.n	8006d30 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d28:	f043 0202 	orr.w	r2, r3, #2
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d32:	f003 0302 	and.w	r3, r3, #2
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d00a      	beq.n	8006d50 <HAL_UART_IRQHandler+0xd0>
 8006d3a:	69fb      	ldr	r3, [r7, #28]
 8006d3c:	f003 0301 	and.w	r3, r3, #1
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d005      	beq.n	8006d50 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d48:	f043 0204 	orr.w	r2, r3, #4
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d52:	f003 0308 	and.w	r3, r3, #8
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d00f      	beq.n	8006d7a <HAL_UART_IRQHandler+0xfa>
 8006d5a:	6a3b      	ldr	r3, [r7, #32]
 8006d5c:	f003 0320 	and.w	r3, r3, #32
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d104      	bne.n	8006d6e <HAL_UART_IRQHandler+0xee>
 8006d64:	69fb      	ldr	r3, [r7, #28]
 8006d66:	f003 0301 	and.w	r3, r3, #1
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d005      	beq.n	8006d7a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d72:	f043 0208 	orr.w	r2, r3, #8
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	f000 811e 	beq.w	8006fc0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d86:	f003 0320 	and.w	r3, r3, #32
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d007      	beq.n	8006d9e <HAL_UART_IRQHandler+0x11e>
 8006d8e:	6a3b      	ldr	r3, [r7, #32]
 8006d90:	f003 0320 	and.w	r3, r3, #32
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d002      	beq.n	8006d9e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f000 fa0f 	bl	80071bc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	695b      	ldr	r3, [r3, #20]
 8006da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	bf14      	ite	ne
 8006dac:	2301      	movne	r3, #1
 8006dae:	2300      	moveq	r3, #0
 8006db0:	b2db      	uxtb	r3, r3
 8006db2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db8:	f003 0308 	and.w	r3, r3, #8
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d102      	bne.n	8006dc6 <HAL_UART_IRQHandler+0x146>
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d031      	beq.n	8006e2a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 f951 	bl	800706e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	695b      	ldr	r3, [r3, #20]
 8006dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d023      	beq.n	8006e22 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	695a      	ldr	r2, [r3, #20]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006de8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d013      	beq.n	8006e1a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006df6:	4a76      	ldr	r2, [pc, #472]	; (8006fd0 <HAL_UART_IRQHandler+0x350>)
 8006df8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f7fd f8e2 	bl	8003fc8 <HAL_DMA_Abort_IT>
 8006e04:	4603      	mov	r3, r0
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d016      	beq.n	8006e38 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e10:	687a      	ldr	r2, [r7, #4]
 8006e12:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006e14:	4610      	mov	r0, r2
 8006e16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e18:	e00e      	b.n	8006e38 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f000 f8da 	bl	8006fd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e20:	e00a      	b.n	8006e38 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f000 f8d6 	bl	8006fd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e28:	e006      	b.n	8006e38 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 f8d2 	bl	8006fd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006e36:	e0c3      	b.n	8006fc0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e38:	bf00      	nop
    return;
 8006e3a:	e0c1      	b.n	8006fc0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	f040 80a1 	bne.w	8006f88 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8006e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e48:	f003 0310 	and.w	r3, r3, #16
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	f000 809b 	beq.w	8006f88 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8006e52:	6a3b      	ldr	r3, [r7, #32]
 8006e54:	f003 0310 	and.w	r3, r3, #16
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	f000 8095 	beq.w	8006f88 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006e5e:	2300      	movs	r3, #0
 8006e60:	60fb      	str	r3, [r7, #12]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	60fb      	str	r3, [r7, #12]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	60fb      	str	r3, [r7, #12]
 8006e72:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	695b      	ldr	r3, [r3, #20]
 8006e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d04e      	beq.n	8006f20 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8006e8c:	8a3b      	ldrh	r3, [r7, #16]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	f000 8098 	beq.w	8006fc4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006e98:	8a3a      	ldrh	r2, [r7, #16]
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	f080 8092 	bcs.w	8006fc4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	8a3a      	ldrh	r2, [r7, #16]
 8006ea4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eaa:	699b      	ldr	r3, [r3, #24]
 8006eac:	2b20      	cmp	r3, #32
 8006eae:	d02b      	beq.n	8006f08 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	68da      	ldr	r2, [r3, #12]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ebe:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	695a      	ldr	r2, [r3, #20]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f022 0201 	bic.w	r2, r2, #1
 8006ece:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	695a      	ldr	r2, [r3, #20]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ede:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2220      	movs	r2, #32
 8006ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2200      	movs	r2, #0
 8006eec:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	68da      	ldr	r2, [r3, #12]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f022 0210 	bic.w	r2, r2, #16
 8006efc:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f02:	4618      	mov	r0, r3
 8006f04:	f7fd f825 	bl	8003f52 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	1ad3      	subs	r3, r2, r3
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	4619      	mov	r1, r3
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f000 f864 	bl	8006fe6 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006f1e:	e051      	b.n	8006fc4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	1ad3      	subs	r3, r2, r3
 8006f2c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d047      	beq.n	8006fc8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8006f38:	8a7b      	ldrh	r3, [r7, #18]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d044      	beq.n	8006fc8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	68da      	ldr	r2, [r3, #12]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006f4c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	695a      	ldr	r2, [r3, #20]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f022 0201 	bic.w	r2, r2, #1
 8006f5c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2220      	movs	r2, #32
 8006f62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	68da      	ldr	r2, [r3, #12]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f022 0210 	bic.w	r2, r2, #16
 8006f7a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006f7c:	8a7b      	ldrh	r3, [r7, #18]
 8006f7e:	4619      	mov	r1, r3
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f000 f830 	bl	8006fe6 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006f86:	e01f      	b.n	8006fc8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d008      	beq.n	8006fa4 <HAL_UART_IRQHandler+0x324>
 8006f92:	6a3b      	ldr	r3, [r7, #32]
 8006f94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d003      	beq.n	8006fa4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f000 f8a6 	bl	80070ee <UART_Transmit_IT>
    return;
 8006fa2:	e012      	b.n	8006fca <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d00d      	beq.n	8006fca <HAL_UART_IRQHandler+0x34a>
 8006fae:	6a3b      	ldr	r3, [r7, #32]
 8006fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d008      	beq.n	8006fca <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f000 f8e7 	bl	800718c <UART_EndTransmit_IT>
    return;
 8006fbe:	e004      	b.n	8006fca <HAL_UART_IRQHandler+0x34a>
    return;
 8006fc0:	bf00      	nop
 8006fc2:	e002      	b.n	8006fca <HAL_UART_IRQHandler+0x34a>
      return;
 8006fc4:	bf00      	nop
 8006fc6:	e000      	b.n	8006fca <HAL_UART_IRQHandler+0x34a>
      return;
 8006fc8:	bf00      	nop
  }
}
 8006fca:	3728      	adds	r7, #40	; 0x28
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}
 8006fd0:	080070c7 	.word	0x080070c7

08006fd4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b083      	sub	sp, #12
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006fdc:	bf00      	nop
 8006fde:	370c      	adds	r7, #12
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bc80      	pop	{r7}
 8006fe4:	4770      	bx	lr

08006fe6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006fe6:	b480      	push	{r7}
 8006fe8:	b083      	sub	sp, #12
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
 8006fee:	460b      	mov	r3, r1
 8006ff0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006ff2:	bf00      	nop
 8006ff4:	370c      	adds	r7, #12
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bc80      	pop	{r7}
 8006ffa:	4770      	bx	lr

08006ffc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b085      	sub	sp, #20
 8007000:	af00      	add	r7, sp, #0
 8007002:	60f8      	str	r0, [r7, #12]
 8007004:	60b9      	str	r1, [r7, #8]
 8007006:	4613      	mov	r3, r2
 8007008:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	68ba      	ldr	r2, [r7, #8]
 800700e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	88fa      	ldrh	r2, [r7, #6]
 8007014:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	88fa      	ldrh	r2, [r7, #6]
 800701a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2200      	movs	r2, #0
 8007020:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2222      	movs	r2, #34	; 0x22
 8007026:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2200      	movs	r2, #0
 800702e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	68da      	ldr	r2, [r3, #12]
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007040:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	695a      	ldr	r2, [r3, #20]
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f042 0201 	orr.w	r2, r2, #1
 8007050:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	68da      	ldr	r2, [r3, #12]
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f042 0220 	orr.w	r2, r2, #32
 8007060:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007062:	2300      	movs	r3, #0
}
 8007064:	4618      	mov	r0, r3
 8007066:	3714      	adds	r7, #20
 8007068:	46bd      	mov	sp, r7
 800706a:	bc80      	pop	{r7}
 800706c:	4770      	bx	lr

0800706e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800706e:	b480      	push	{r7}
 8007070:	b083      	sub	sp, #12
 8007072:	af00      	add	r7, sp, #0
 8007074:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	68da      	ldr	r2, [r3, #12]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007084:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	695a      	ldr	r2, [r3, #20]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f022 0201 	bic.w	r2, r2, #1
 8007094:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800709a:	2b01      	cmp	r3, #1
 800709c:	d107      	bne.n	80070ae <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	68da      	ldr	r2, [r3, #12]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f022 0210 	bic.w	r2, r2, #16
 80070ac:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2220      	movs	r2, #32
 80070b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2200      	movs	r2, #0
 80070ba:	631a      	str	r2, [r3, #48]	; 0x30
}
 80070bc:	bf00      	nop
 80070be:	370c      	adds	r7, #12
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bc80      	pop	{r7}
 80070c4:	4770      	bx	lr

080070c6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80070c6:	b580      	push	{r7, lr}
 80070c8:	b084      	sub	sp, #16
 80070ca:	af00      	add	r7, sp, #0
 80070cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2200      	movs	r2, #0
 80070d8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2200      	movs	r2, #0
 80070de:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80070e0:	68f8      	ldr	r0, [r7, #12]
 80070e2:	f7ff ff77 	bl	8006fd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070e6:	bf00      	nop
 80070e8:	3710      	adds	r7, #16
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}

080070ee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80070ee:	b480      	push	{r7}
 80070f0:	b085      	sub	sp, #20
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070fc:	b2db      	uxtb	r3, r3
 80070fe:	2b21      	cmp	r3, #33	; 0x21
 8007100:	d13e      	bne.n	8007180 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800710a:	d114      	bne.n	8007136 <UART_Transmit_IT+0x48>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	691b      	ldr	r3, [r3, #16]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d110      	bne.n	8007136 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6a1b      	ldr	r3, [r3, #32]
 8007118:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	881b      	ldrh	r3, [r3, #0]
 800711e:	461a      	mov	r2, r3
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007128:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6a1b      	ldr	r3, [r3, #32]
 800712e:	1c9a      	adds	r2, r3, #2
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	621a      	str	r2, [r3, #32]
 8007134:	e008      	b.n	8007148 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6a1b      	ldr	r3, [r3, #32]
 800713a:	1c59      	adds	r1, r3, #1
 800713c:	687a      	ldr	r2, [r7, #4]
 800713e:	6211      	str	r1, [r2, #32]
 8007140:	781a      	ldrb	r2, [r3, #0]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800714c:	b29b      	uxth	r3, r3
 800714e:	3b01      	subs	r3, #1
 8007150:	b29b      	uxth	r3, r3
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	4619      	mov	r1, r3
 8007156:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007158:	2b00      	cmp	r3, #0
 800715a:	d10f      	bne.n	800717c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	68da      	ldr	r2, [r3, #12]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800716a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	68da      	ldr	r2, [r3, #12]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800717a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800717c:	2300      	movs	r3, #0
 800717e:	e000      	b.n	8007182 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007180:	2302      	movs	r3, #2
  }
}
 8007182:	4618      	mov	r0, r3
 8007184:	3714      	adds	r7, #20
 8007186:	46bd      	mov	sp, r7
 8007188:	bc80      	pop	{r7}
 800718a:	4770      	bx	lr

0800718c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b082      	sub	sp, #8
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	68da      	ldr	r2, [r3, #12]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071a2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2220      	movs	r2, #32
 80071a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f7fc fb37 	bl	8003820 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80071b2:	2300      	movs	r3, #0
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3708      	adds	r7, #8
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}

080071bc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b086      	sub	sp, #24
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80071ca:	b2db      	uxtb	r3, r3
 80071cc:	2b22      	cmp	r3, #34	; 0x22
 80071ce:	f040 8099 	bne.w	8007304 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	689b      	ldr	r3, [r3, #8]
 80071d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071da:	d117      	bne.n	800720c <UART_Receive_IT+0x50>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	691b      	ldr	r3, [r3, #16]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d113      	bne.n	800720c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80071e4:	2300      	movs	r3, #0
 80071e6:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ec:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071fa:	b29a      	uxth	r2, r3
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007204:	1c9a      	adds	r2, r3, #2
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	629a      	str	r2, [r3, #40]	; 0x28
 800720a:	e026      	b.n	800725a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007210:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8007212:	2300      	movs	r3, #0
 8007214:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800721e:	d007      	beq.n	8007230 <UART_Receive_IT+0x74>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d10a      	bne.n	800723e <UART_Receive_IT+0x82>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	691b      	ldr	r3, [r3, #16]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d106      	bne.n	800723e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	b2da      	uxtb	r2, r3
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	701a      	strb	r2, [r3, #0]
 800723c:	e008      	b.n	8007250 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	b2db      	uxtb	r3, r3
 8007246:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800724a:	b2da      	uxtb	r2, r3
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007254:	1c5a      	adds	r2, r3, #1
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800725e:	b29b      	uxth	r3, r3
 8007260:	3b01      	subs	r3, #1
 8007262:	b29b      	uxth	r3, r3
 8007264:	687a      	ldr	r2, [r7, #4]
 8007266:	4619      	mov	r1, r3
 8007268:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800726a:	2b00      	cmp	r3, #0
 800726c:	d148      	bne.n	8007300 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	68da      	ldr	r2, [r3, #12]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f022 0220 	bic.w	r2, r2, #32
 800727c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	68da      	ldr	r2, [r3, #12]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800728c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	695a      	ldr	r2, [r3, #20]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f022 0201 	bic.w	r2, r2, #1
 800729c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2220      	movs	r2, #32
 80072a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d123      	bne.n	80072f6 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2200      	movs	r2, #0
 80072b2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	68da      	ldr	r2, [r3, #12]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f022 0210 	bic.w	r2, r2, #16
 80072c2:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f003 0310 	and.w	r3, r3, #16
 80072ce:	2b10      	cmp	r3, #16
 80072d0:	d10a      	bne.n	80072e8 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80072d2:	2300      	movs	r3, #0
 80072d4:	60fb      	str	r3, [r7, #12]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	60fb      	str	r3, [r7, #12]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	60fb      	str	r3, [r7, #12]
 80072e6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80072ec:	4619      	mov	r1, r3
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f7ff fe79 	bl	8006fe6 <HAL_UARTEx_RxEventCallback>
 80072f4:	e002      	b.n	80072fc <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f7fc fba0 	bl	8003a3c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80072fc:	2300      	movs	r3, #0
 80072fe:	e002      	b.n	8007306 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8007300:	2300      	movs	r3, #0
 8007302:	e000      	b.n	8007306 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8007304:	2302      	movs	r3, #2
  }
}
 8007306:	4618      	mov	r0, r3
 8007308:	3718      	adds	r7, #24
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
	...

08007310 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b084      	sub	sp, #16
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	691b      	ldr	r3, [r3, #16]
 800731e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	68da      	ldr	r2, [r3, #12]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	430a      	orrs	r2, r1
 800732c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	689a      	ldr	r2, [r3, #8]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	691b      	ldr	r3, [r3, #16]
 8007336:	431a      	orrs	r2, r3
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	695b      	ldr	r3, [r3, #20]
 800733c:	4313      	orrs	r3, r2
 800733e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	68db      	ldr	r3, [r3, #12]
 8007346:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800734a:	f023 030c 	bic.w	r3, r3, #12
 800734e:	687a      	ldr	r2, [r7, #4]
 8007350:	6812      	ldr	r2, [r2, #0]
 8007352:	68b9      	ldr	r1, [r7, #8]
 8007354:	430b      	orrs	r3, r1
 8007356:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	695b      	ldr	r3, [r3, #20]
 800735e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	699a      	ldr	r2, [r3, #24]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	430a      	orrs	r2, r1
 800736c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a2c      	ldr	r2, [pc, #176]	; (8007424 <UART_SetConfig+0x114>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d103      	bne.n	8007380 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007378:	f7fd fcf2 	bl	8004d60 <HAL_RCC_GetPCLK2Freq>
 800737c:	60f8      	str	r0, [r7, #12]
 800737e:	e002      	b.n	8007386 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007380:	f7fd fcda 	bl	8004d38 <HAL_RCC_GetPCLK1Freq>
 8007384:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007386:	68fa      	ldr	r2, [r7, #12]
 8007388:	4613      	mov	r3, r2
 800738a:	009b      	lsls	r3, r3, #2
 800738c:	4413      	add	r3, r2
 800738e:	009a      	lsls	r2, r3, #2
 8007390:	441a      	add	r2, r3
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	009b      	lsls	r3, r3, #2
 8007398:	fbb2 f3f3 	udiv	r3, r2, r3
 800739c:	4a22      	ldr	r2, [pc, #136]	; (8007428 <UART_SetConfig+0x118>)
 800739e:	fba2 2303 	umull	r2, r3, r2, r3
 80073a2:	095b      	lsrs	r3, r3, #5
 80073a4:	0119      	lsls	r1, r3, #4
 80073a6:	68fa      	ldr	r2, [r7, #12]
 80073a8:	4613      	mov	r3, r2
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	4413      	add	r3, r2
 80073ae:	009a      	lsls	r2, r3, #2
 80073b0:	441a      	add	r2, r3
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	009b      	lsls	r3, r3, #2
 80073b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80073bc:	4b1a      	ldr	r3, [pc, #104]	; (8007428 <UART_SetConfig+0x118>)
 80073be:	fba3 0302 	umull	r0, r3, r3, r2
 80073c2:	095b      	lsrs	r3, r3, #5
 80073c4:	2064      	movs	r0, #100	; 0x64
 80073c6:	fb00 f303 	mul.w	r3, r0, r3
 80073ca:	1ad3      	subs	r3, r2, r3
 80073cc:	011b      	lsls	r3, r3, #4
 80073ce:	3332      	adds	r3, #50	; 0x32
 80073d0:	4a15      	ldr	r2, [pc, #84]	; (8007428 <UART_SetConfig+0x118>)
 80073d2:	fba2 2303 	umull	r2, r3, r2, r3
 80073d6:	095b      	lsrs	r3, r3, #5
 80073d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80073dc:	4419      	add	r1, r3
 80073de:	68fa      	ldr	r2, [r7, #12]
 80073e0:	4613      	mov	r3, r2
 80073e2:	009b      	lsls	r3, r3, #2
 80073e4:	4413      	add	r3, r2
 80073e6:	009a      	lsls	r2, r3, #2
 80073e8:	441a      	add	r2, r3
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	009b      	lsls	r3, r3, #2
 80073f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80073f4:	4b0c      	ldr	r3, [pc, #48]	; (8007428 <UART_SetConfig+0x118>)
 80073f6:	fba3 0302 	umull	r0, r3, r3, r2
 80073fa:	095b      	lsrs	r3, r3, #5
 80073fc:	2064      	movs	r0, #100	; 0x64
 80073fe:	fb00 f303 	mul.w	r3, r0, r3
 8007402:	1ad3      	subs	r3, r2, r3
 8007404:	011b      	lsls	r3, r3, #4
 8007406:	3332      	adds	r3, #50	; 0x32
 8007408:	4a07      	ldr	r2, [pc, #28]	; (8007428 <UART_SetConfig+0x118>)
 800740a:	fba2 2303 	umull	r2, r3, r2, r3
 800740e:	095b      	lsrs	r3, r3, #5
 8007410:	f003 020f 	and.w	r2, r3, #15
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	440a      	add	r2, r1
 800741a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800741c:	bf00      	nop
 800741e:	3710      	adds	r7, #16
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}
 8007424:	40013800 	.word	0x40013800
 8007428:	51eb851f 	.word	0x51eb851f

0800742c <__errno>:
 800742c:	4b01      	ldr	r3, [pc, #4]	; (8007434 <__errno+0x8>)
 800742e:	6818      	ldr	r0, [r3, #0]
 8007430:	4770      	bx	lr
 8007432:	bf00      	nop
 8007434:	2000010c 	.word	0x2000010c

08007438 <__libc_init_array>:
 8007438:	b570      	push	{r4, r5, r6, lr}
 800743a:	2600      	movs	r6, #0
 800743c:	4d0c      	ldr	r5, [pc, #48]	; (8007470 <__libc_init_array+0x38>)
 800743e:	4c0d      	ldr	r4, [pc, #52]	; (8007474 <__libc_init_array+0x3c>)
 8007440:	1b64      	subs	r4, r4, r5
 8007442:	10a4      	asrs	r4, r4, #2
 8007444:	42a6      	cmp	r6, r4
 8007446:	d109      	bne.n	800745c <__libc_init_array+0x24>
 8007448:	f003 f826 	bl	800a498 <_init>
 800744c:	2600      	movs	r6, #0
 800744e:	4d0a      	ldr	r5, [pc, #40]	; (8007478 <__libc_init_array+0x40>)
 8007450:	4c0a      	ldr	r4, [pc, #40]	; (800747c <__libc_init_array+0x44>)
 8007452:	1b64      	subs	r4, r4, r5
 8007454:	10a4      	asrs	r4, r4, #2
 8007456:	42a6      	cmp	r6, r4
 8007458:	d105      	bne.n	8007466 <__libc_init_array+0x2e>
 800745a:	bd70      	pop	{r4, r5, r6, pc}
 800745c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007460:	4798      	blx	r3
 8007462:	3601      	adds	r6, #1
 8007464:	e7ee      	b.n	8007444 <__libc_init_array+0xc>
 8007466:	f855 3b04 	ldr.w	r3, [r5], #4
 800746a:	4798      	blx	r3
 800746c:	3601      	adds	r6, #1
 800746e:	e7f2      	b.n	8007456 <__libc_init_array+0x1e>
 8007470:	0800ad3c 	.word	0x0800ad3c
 8007474:	0800ad3c 	.word	0x0800ad3c
 8007478:	0800ad3c 	.word	0x0800ad3c
 800747c:	0800ad40 	.word	0x0800ad40

08007480 <memcpy>:
 8007480:	440a      	add	r2, r1
 8007482:	4291      	cmp	r1, r2
 8007484:	f100 33ff 	add.w	r3, r0, #4294967295
 8007488:	d100      	bne.n	800748c <memcpy+0xc>
 800748a:	4770      	bx	lr
 800748c:	b510      	push	{r4, lr}
 800748e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007492:	4291      	cmp	r1, r2
 8007494:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007498:	d1f9      	bne.n	800748e <memcpy+0xe>
 800749a:	bd10      	pop	{r4, pc}

0800749c <memset>:
 800749c:	4603      	mov	r3, r0
 800749e:	4402      	add	r2, r0
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d100      	bne.n	80074a6 <memset+0xa>
 80074a4:	4770      	bx	lr
 80074a6:	f803 1b01 	strb.w	r1, [r3], #1
 80074aa:	e7f9      	b.n	80074a0 <memset+0x4>

080074ac <__cvt>:
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074b2:	461f      	mov	r7, r3
 80074b4:	bfbb      	ittet	lt
 80074b6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80074ba:	461f      	movlt	r7, r3
 80074bc:	2300      	movge	r3, #0
 80074be:	232d      	movlt	r3, #45	; 0x2d
 80074c0:	b088      	sub	sp, #32
 80074c2:	4614      	mov	r4, r2
 80074c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80074c6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80074c8:	7013      	strb	r3, [r2, #0]
 80074ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80074cc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80074d0:	f023 0820 	bic.w	r8, r3, #32
 80074d4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80074d8:	d005      	beq.n	80074e6 <__cvt+0x3a>
 80074da:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80074de:	d100      	bne.n	80074e2 <__cvt+0x36>
 80074e0:	3501      	adds	r5, #1
 80074e2:	2302      	movs	r3, #2
 80074e4:	e000      	b.n	80074e8 <__cvt+0x3c>
 80074e6:	2303      	movs	r3, #3
 80074e8:	aa07      	add	r2, sp, #28
 80074ea:	9204      	str	r2, [sp, #16]
 80074ec:	aa06      	add	r2, sp, #24
 80074ee:	e9cd a202 	strd	sl, r2, [sp, #8]
 80074f2:	e9cd 3500 	strd	r3, r5, [sp]
 80074f6:	4622      	mov	r2, r4
 80074f8:	463b      	mov	r3, r7
 80074fa:	f000 ff11 	bl	8008320 <_dtoa_r>
 80074fe:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007502:	4606      	mov	r6, r0
 8007504:	d102      	bne.n	800750c <__cvt+0x60>
 8007506:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007508:	07db      	lsls	r3, r3, #31
 800750a:	d522      	bpl.n	8007552 <__cvt+0xa6>
 800750c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007510:	eb06 0905 	add.w	r9, r6, r5
 8007514:	d110      	bne.n	8007538 <__cvt+0x8c>
 8007516:	7833      	ldrb	r3, [r6, #0]
 8007518:	2b30      	cmp	r3, #48	; 0x30
 800751a:	d10a      	bne.n	8007532 <__cvt+0x86>
 800751c:	2200      	movs	r2, #0
 800751e:	2300      	movs	r3, #0
 8007520:	4620      	mov	r0, r4
 8007522:	4639      	mov	r1, r7
 8007524:	f7f9 fab6 	bl	8000a94 <__aeabi_dcmpeq>
 8007528:	b918      	cbnz	r0, 8007532 <__cvt+0x86>
 800752a:	f1c5 0501 	rsb	r5, r5, #1
 800752e:	f8ca 5000 	str.w	r5, [sl]
 8007532:	f8da 3000 	ldr.w	r3, [sl]
 8007536:	4499      	add	r9, r3
 8007538:	2200      	movs	r2, #0
 800753a:	2300      	movs	r3, #0
 800753c:	4620      	mov	r0, r4
 800753e:	4639      	mov	r1, r7
 8007540:	f7f9 faa8 	bl	8000a94 <__aeabi_dcmpeq>
 8007544:	b108      	cbz	r0, 800754a <__cvt+0x9e>
 8007546:	f8cd 901c 	str.w	r9, [sp, #28]
 800754a:	2230      	movs	r2, #48	; 0x30
 800754c:	9b07      	ldr	r3, [sp, #28]
 800754e:	454b      	cmp	r3, r9
 8007550:	d307      	bcc.n	8007562 <__cvt+0xb6>
 8007552:	4630      	mov	r0, r6
 8007554:	9b07      	ldr	r3, [sp, #28]
 8007556:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007558:	1b9b      	subs	r3, r3, r6
 800755a:	6013      	str	r3, [r2, #0]
 800755c:	b008      	add	sp, #32
 800755e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007562:	1c59      	adds	r1, r3, #1
 8007564:	9107      	str	r1, [sp, #28]
 8007566:	701a      	strb	r2, [r3, #0]
 8007568:	e7f0      	b.n	800754c <__cvt+0xa0>

0800756a <__exponent>:
 800756a:	4603      	mov	r3, r0
 800756c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800756e:	2900      	cmp	r1, #0
 8007570:	f803 2b02 	strb.w	r2, [r3], #2
 8007574:	bfb6      	itet	lt
 8007576:	222d      	movlt	r2, #45	; 0x2d
 8007578:	222b      	movge	r2, #43	; 0x2b
 800757a:	4249      	neglt	r1, r1
 800757c:	2909      	cmp	r1, #9
 800757e:	7042      	strb	r2, [r0, #1]
 8007580:	dd2b      	ble.n	80075da <__exponent+0x70>
 8007582:	f10d 0407 	add.w	r4, sp, #7
 8007586:	46a4      	mov	ip, r4
 8007588:	270a      	movs	r7, #10
 800758a:	fb91 f6f7 	sdiv	r6, r1, r7
 800758e:	460a      	mov	r2, r1
 8007590:	46a6      	mov	lr, r4
 8007592:	fb07 1516 	mls	r5, r7, r6, r1
 8007596:	2a63      	cmp	r2, #99	; 0x63
 8007598:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800759c:	4631      	mov	r1, r6
 800759e:	f104 34ff 	add.w	r4, r4, #4294967295
 80075a2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80075a6:	dcf0      	bgt.n	800758a <__exponent+0x20>
 80075a8:	3130      	adds	r1, #48	; 0x30
 80075aa:	f1ae 0502 	sub.w	r5, lr, #2
 80075ae:	f804 1c01 	strb.w	r1, [r4, #-1]
 80075b2:	4629      	mov	r1, r5
 80075b4:	1c44      	adds	r4, r0, #1
 80075b6:	4561      	cmp	r1, ip
 80075b8:	d30a      	bcc.n	80075d0 <__exponent+0x66>
 80075ba:	f10d 0209 	add.w	r2, sp, #9
 80075be:	eba2 020e 	sub.w	r2, r2, lr
 80075c2:	4565      	cmp	r5, ip
 80075c4:	bf88      	it	hi
 80075c6:	2200      	movhi	r2, #0
 80075c8:	4413      	add	r3, r2
 80075ca:	1a18      	subs	r0, r3, r0
 80075cc:	b003      	add	sp, #12
 80075ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075d0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80075d4:	f804 2f01 	strb.w	r2, [r4, #1]!
 80075d8:	e7ed      	b.n	80075b6 <__exponent+0x4c>
 80075da:	2330      	movs	r3, #48	; 0x30
 80075dc:	3130      	adds	r1, #48	; 0x30
 80075de:	7083      	strb	r3, [r0, #2]
 80075e0:	70c1      	strb	r1, [r0, #3]
 80075e2:	1d03      	adds	r3, r0, #4
 80075e4:	e7f1      	b.n	80075ca <__exponent+0x60>
	...

080075e8 <_printf_float>:
 80075e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075ec:	b091      	sub	sp, #68	; 0x44
 80075ee:	460c      	mov	r4, r1
 80075f0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80075f4:	4616      	mov	r6, r2
 80075f6:	461f      	mov	r7, r3
 80075f8:	4605      	mov	r5, r0
 80075fa:	f001 fe37 	bl	800926c <_localeconv_r>
 80075fe:	6803      	ldr	r3, [r0, #0]
 8007600:	4618      	mov	r0, r3
 8007602:	9309      	str	r3, [sp, #36]	; 0x24
 8007604:	f7f8 fe1a 	bl	800023c <strlen>
 8007608:	2300      	movs	r3, #0
 800760a:	930e      	str	r3, [sp, #56]	; 0x38
 800760c:	f8d8 3000 	ldr.w	r3, [r8]
 8007610:	900a      	str	r0, [sp, #40]	; 0x28
 8007612:	3307      	adds	r3, #7
 8007614:	f023 0307 	bic.w	r3, r3, #7
 8007618:	f103 0208 	add.w	r2, r3, #8
 800761c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007620:	f8d4 b000 	ldr.w	fp, [r4]
 8007624:	f8c8 2000 	str.w	r2, [r8]
 8007628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800762c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007630:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8007634:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8007638:	930b      	str	r3, [sp, #44]	; 0x2c
 800763a:	f04f 32ff 	mov.w	r2, #4294967295
 800763e:	4640      	mov	r0, r8
 8007640:	4b9c      	ldr	r3, [pc, #624]	; (80078b4 <_printf_float+0x2cc>)
 8007642:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007644:	f7f9 fa58 	bl	8000af8 <__aeabi_dcmpun>
 8007648:	bb70      	cbnz	r0, 80076a8 <_printf_float+0xc0>
 800764a:	f04f 32ff 	mov.w	r2, #4294967295
 800764e:	4640      	mov	r0, r8
 8007650:	4b98      	ldr	r3, [pc, #608]	; (80078b4 <_printf_float+0x2cc>)
 8007652:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007654:	f7f9 fa32 	bl	8000abc <__aeabi_dcmple>
 8007658:	bb30      	cbnz	r0, 80076a8 <_printf_float+0xc0>
 800765a:	2200      	movs	r2, #0
 800765c:	2300      	movs	r3, #0
 800765e:	4640      	mov	r0, r8
 8007660:	4651      	mov	r1, sl
 8007662:	f7f9 fa21 	bl	8000aa8 <__aeabi_dcmplt>
 8007666:	b110      	cbz	r0, 800766e <_printf_float+0x86>
 8007668:	232d      	movs	r3, #45	; 0x2d
 800766a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800766e:	4b92      	ldr	r3, [pc, #584]	; (80078b8 <_printf_float+0x2d0>)
 8007670:	4892      	ldr	r0, [pc, #584]	; (80078bc <_printf_float+0x2d4>)
 8007672:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007676:	bf94      	ite	ls
 8007678:	4698      	movls	r8, r3
 800767a:	4680      	movhi	r8, r0
 800767c:	2303      	movs	r3, #3
 800767e:	f04f 0a00 	mov.w	sl, #0
 8007682:	6123      	str	r3, [r4, #16]
 8007684:	f02b 0304 	bic.w	r3, fp, #4
 8007688:	6023      	str	r3, [r4, #0]
 800768a:	4633      	mov	r3, r6
 800768c:	4621      	mov	r1, r4
 800768e:	4628      	mov	r0, r5
 8007690:	9700      	str	r7, [sp, #0]
 8007692:	aa0f      	add	r2, sp, #60	; 0x3c
 8007694:	f000 f9d4 	bl	8007a40 <_printf_common>
 8007698:	3001      	adds	r0, #1
 800769a:	f040 8090 	bne.w	80077be <_printf_float+0x1d6>
 800769e:	f04f 30ff 	mov.w	r0, #4294967295
 80076a2:	b011      	add	sp, #68	; 0x44
 80076a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076a8:	4642      	mov	r2, r8
 80076aa:	4653      	mov	r3, sl
 80076ac:	4640      	mov	r0, r8
 80076ae:	4651      	mov	r1, sl
 80076b0:	f7f9 fa22 	bl	8000af8 <__aeabi_dcmpun>
 80076b4:	b148      	cbz	r0, 80076ca <_printf_float+0xe2>
 80076b6:	f1ba 0f00 	cmp.w	sl, #0
 80076ba:	bfb8      	it	lt
 80076bc:	232d      	movlt	r3, #45	; 0x2d
 80076be:	4880      	ldr	r0, [pc, #512]	; (80078c0 <_printf_float+0x2d8>)
 80076c0:	bfb8      	it	lt
 80076c2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80076c6:	4b7f      	ldr	r3, [pc, #508]	; (80078c4 <_printf_float+0x2dc>)
 80076c8:	e7d3      	b.n	8007672 <_printf_float+0x8a>
 80076ca:	6863      	ldr	r3, [r4, #4]
 80076cc:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80076d0:	1c5a      	adds	r2, r3, #1
 80076d2:	d142      	bne.n	800775a <_printf_float+0x172>
 80076d4:	2306      	movs	r3, #6
 80076d6:	6063      	str	r3, [r4, #4]
 80076d8:	2200      	movs	r2, #0
 80076da:	9206      	str	r2, [sp, #24]
 80076dc:	aa0e      	add	r2, sp, #56	; 0x38
 80076de:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80076e2:	aa0d      	add	r2, sp, #52	; 0x34
 80076e4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80076e8:	9203      	str	r2, [sp, #12]
 80076ea:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80076ee:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80076f2:	6023      	str	r3, [r4, #0]
 80076f4:	6863      	ldr	r3, [r4, #4]
 80076f6:	4642      	mov	r2, r8
 80076f8:	9300      	str	r3, [sp, #0]
 80076fa:	4628      	mov	r0, r5
 80076fc:	4653      	mov	r3, sl
 80076fe:	910b      	str	r1, [sp, #44]	; 0x2c
 8007700:	f7ff fed4 	bl	80074ac <__cvt>
 8007704:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007706:	4680      	mov	r8, r0
 8007708:	2947      	cmp	r1, #71	; 0x47
 800770a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800770c:	d108      	bne.n	8007720 <_printf_float+0x138>
 800770e:	1cc8      	adds	r0, r1, #3
 8007710:	db02      	blt.n	8007718 <_printf_float+0x130>
 8007712:	6863      	ldr	r3, [r4, #4]
 8007714:	4299      	cmp	r1, r3
 8007716:	dd40      	ble.n	800779a <_printf_float+0x1b2>
 8007718:	f1a9 0902 	sub.w	r9, r9, #2
 800771c:	fa5f f989 	uxtb.w	r9, r9
 8007720:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007724:	d81f      	bhi.n	8007766 <_printf_float+0x17e>
 8007726:	464a      	mov	r2, r9
 8007728:	3901      	subs	r1, #1
 800772a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800772e:	910d      	str	r1, [sp, #52]	; 0x34
 8007730:	f7ff ff1b 	bl	800756a <__exponent>
 8007734:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007736:	4682      	mov	sl, r0
 8007738:	1813      	adds	r3, r2, r0
 800773a:	2a01      	cmp	r2, #1
 800773c:	6123      	str	r3, [r4, #16]
 800773e:	dc02      	bgt.n	8007746 <_printf_float+0x15e>
 8007740:	6822      	ldr	r2, [r4, #0]
 8007742:	07d2      	lsls	r2, r2, #31
 8007744:	d501      	bpl.n	800774a <_printf_float+0x162>
 8007746:	3301      	adds	r3, #1
 8007748:	6123      	str	r3, [r4, #16]
 800774a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800774e:	2b00      	cmp	r3, #0
 8007750:	d09b      	beq.n	800768a <_printf_float+0xa2>
 8007752:	232d      	movs	r3, #45	; 0x2d
 8007754:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007758:	e797      	b.n	800768a <_printf_float+0xa2>
 800775a:	2947      	cmp	r1, #71	; 0x47
 800775c:	d1bc      	bne.n	80076d8 <_printf_float+0xf0>
 800775e:	2b00      	cmp	r3, #0
 8007760:	d1ba      	bne.n	80076d8 <_printf_float+0xf0>
 8007762:	2301      	movs	r3, #1
 8007764:	e7b7      	b.n	80076d6 <_printf_float+0xee>
 8007766:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800776a:	d118      	bne.n	800779e <_printf_float+0x1b6>
 800776c:	2900      	cmp	r1, #0
 800776e:	6863      	ldr	r3, [r4, #4]
 8007770:	dd0b      	ble.n	800778a <_printf_float+0x1a2>
 8007772:	6121      	str	r1, [r4, #16]
 8007774:	b913      	cbnz	r3, 800777c <_printf_float+0x194>
 8007776:	6822      	ldr	r2, [r4, #0]
 8007778:	07d0      	lsls	r0, r2, #31
 800777a:	d502      	bpl.n	8007782 <_printf_float+0x19a>
 800777c:	3301      	adds	r3, #1
 800777e:	440b      	add	r3, r1
 8007780:	6123      	str	r3, [r4, #16]
 8007782:	f04f 0a00 	mov.w	sl, #0
 8007786:	65a1      	str	r1, [r4, #88]	; 0x58
 8007788:	e7df      	b.n	800774a <_printf_float+0x162>
 800778a:	b913      	cbnz	r3, 8007792 <_printf_float+0x1aa>
 800778c:	6822      	ldr	r2, [r4, #0]
 800778e:	07d2      	lsls	r2, r2, #31
 8007790:	d501      	bpl.n	8007796 <_printf_float+0x1ae>
 8007792:	3302      	adds	r3, #2
 8007794:	e7f4      	b.n	8007780 <_printf_float+0x198>
 8007796:	2301      	movs	r3, #1
 8007798:	e7f2      	b.n	8007780 <_printf_float+0x198>
 800779a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800779e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80077a0:	4299      	cmp	r1, r3
 80077a2:	db05      	blt.n	80077b0 <_printf_float+0x1c8>
 80077a4:	6823      	ldr	r3, [r4, #0]
 80077a6:	6121      	str	r1, [r4, #16]
 80077a8:	07d8      	lsls	r0, r3, #31
 80077aa:	d5ea      	bpl.n	8007782 <_printf_float+0x19a>
 80077ac:	1c4b      	adds	r3, r1, #1
 80077ae:	e7e7      	b.n	8007780 <_printf_float+0x198>
 80077b0:	2900      	cmp	r1, #0
 80077b2:	bfcc      	ite	gt
 80077b4:	2201      	movgt	r2, #1
 80077b6:	f1c1 0202 	rsble	r2, r1, #2
 80077ba:	4413      	add	r3, r2
 80077bc:	e7e0      	b.n	8007780 <_printf_float+0x198>
 80077be:	6823      	ldr	r3, [r4, #0]
 80077c0:	055a      	lsls	r2, r3, #21
 80077c2:	d407      	bmi.n	80077d4 <_printf_float+0x1ec>
 80077c4:	6923      	ldr	r3, [r4, #16]
 80077c6:	4642      	mov	r2, r8
 80077c8:	4631      	mov	r1, r6
 80077ca:	4628      	mov	r0, r5
 80077cc:	47b8      	blx	r7
 80077ce:	3001      	adds	r0, #1
 80077d0:	d12b      	bne.n	800782a <_printf_float+0x242>
 80077d2:	e764      	b.n	800769e <_printf_float+0xb6>
 80077d4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80077d8:	f240 80dd 	bls.w	8007996 <_printf_float+0x3ae>
 80077dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80077e0:	2200      	movs	r2, #0
 80077e2:	2300      	movs	r3, #0
 80077e4:	f7f9 f956 	bl	8000a94 <__aeabi_dcmpeq>
 80077e8:	2800      	cmp	r0, #0
 80077ea:	d033      	beq.n	8007854 <_printf_float+0x26c>
 80077ec:	2301      	movs	r3, #1
 80077ee:	4631      	mov	r1, r6
 80077f0:	4628      	mov	r0, r5
 80077f2:	4a35      	ldr	r2, [pc, #212]	; (80078c8 <_printf_float+0x2e0>)
 80077f4:	47b8      	blx	r7
 80077f6:	3001      	adds	r0, #1
 80077f8:	f43f af51 	beq.w	800769e <_printf_float+0xb6>
 80077fc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007800:	429a      	cmp	r2, r3
 8007802:	db02      	blt.n	800780a <_printf_float+0x222>
 8007804:	6823      	ldr	r3, [r4, #0]
 8007806:	07d8      	lsls	r0, r3, #31
 8007808:	d50f      	bpl.n	800782a <_printf_float+0x242>
 800780a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800780e:	4631      	mov	r1, r6
 8007810:	4628      	mov	r0, r5
 8007812:	47b8      	blx	r7
 8007814:	3001      	adds	r0, #1
 8007816:	f43f af42 	beq.w	800769e <_printf_float+0xb6>
 800781a:	f04f 0800 	mov.w	r8, #0
 800781e:	f104 091a 	add.w	r9, r4, #26
 8007822:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007824:	3b01      	subs	r3, #1
 8007826:	4543      	cmp	r3, r8
 8007828:	dc09      	bgt.n	800783e <_printf_float+0x256>
 800782a:	6823      	ldr	r3, [r4, #0]
 800782c:	079b      	lsls	r3, r3, #30
 800782e:	f100 8102 	bmi.w	8007a36 <_printf_float+0x44e>
 8007832:	68e0      	ldr	r0, [r4, #12]
 8007834:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007836:	4298      	cmp	r0, r3
 8007838:	bfb8      	it	lt
 800783a:	4618      	movlt	r0, r3
 800783c:	e731      	b.n	80076a2 <_printf_float+0xba>
 800783e:	2301      	movs	r3, #1
 8007840:	464a      	mov	r2, r9
 8007842:	4631      	mov	r1, r6
 8007844:	4628      	mov	r0, r5
 8007846:	47b8      	blx	r7
 8007848:	3001      	adds	r0, #1
 800784a:	f43f af28 	beq.w	800769e <_printf_float+0xb6>
 800784e:	f108 0801 	add.w	r8, r8, #1
 8007852:	e7e6      	b.n	8007822 <_printf_float+0x23a>
 8007854:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007856:	2b00      	cmp	r3, #0
 8007858:	dc38      	bgt.n	80078cc <_printf_float+0x2e4>
 800785a:	2301      	movs	r3, #1
 800785c:	4631      	mov	r1, r6
 800785e:	4628      	mov	r0, r5
 8007860:	4a19      	ldr	r2, [pc, #100]	; (80078c8 <_printf_float+0x2e0>)
 8007862:	47b8      	blx	r7
 8007864:	3001      	adds	r0, #1
 8007866:	f43f af1a 	beq.w	800769e <_printf_float+0xb6>
 800786a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800786e:	4313      	orrs	r3, r2
 8007870:	d102      	bne.n	8007878 <_printf_float+0x290>
 8007872:	6823      	ldr	r3, [r4, #0]
 8007874:	07d9      	lsls	r1, r3, #31
 8007876:	d5d8      	bpl.n	800782a <_printf_float+0x242>
 8007878:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800787c:	4631      	mov	r1, r6
 800787e:	4628      	mov	r0, r5
 8007880:	47b8      	blx	r7
 8007882:	3001      	adds	r0, #1
 8007884:	f43f af0b 	beq.w	800769e <_printf_float+0xb6>
 8007888:	f04f 0900 	mov.w	r9, #0
 800788c:	f104 0a1a 	add.w	sl, r4, #26
 8007890:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007892:	425b      	negs	r3, r3
 8007894:	454b      	cmp	r3, r9
 8007896:	dc01      	bgt.n	800789c <_printf_float+0x2b4>
 8007898:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800789a:	e794      	b.n	80077c6 <_printf_float+0x1de>
 800789c:	2301      	movs	r3, #1
 800789e:	4652      	mov	r2, sl
 80078a0:	4631      	mov	r1, r6
 80078a2:	4628      	mov	r0, r5
 80078a4:	47b8      	blx	r7
 80078a6:	3001      	adds	r0, #1
 80078a8:	f43f aef9 	beq.w	800769e <_printf_float+0xb6>
 80078ac:	f109 0901 	add.w	r9, r9, #1
 80078b0:	e7ee      	b.n	8007890 <_printf_float+0x2a8>
 80078b2:	bf00      	nop
 80078b4:	7fefffff 	.word	0x7fefffff
 80078b8:	0800a960 	.word	0x0800a960
 80078bc:	0800a964 	.word	0x0800a964
 80078c0:	0800a96c 	.word	0x0800a96c
 80078c4:	0800a968 	.word	0x0800a968
 80078c8:	0800a970 	.word	0x0800a970
 80078cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80078ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80078d0:	429a      	cmp	r2, r3
 80078d2:	bfa8      	it	ge
 80078d4:	461a      	movge	r2, r3
 80078d6:	2a00      	cmp	r2, #0
 80078d8:	4691      	mov	r9, r2
 80078da:	dc37      	bgt.n	800794c <_printf_float+0x364>
 80078dc:	f04f 0b00 	mov.w	fp, #0
 80078e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80078e4:	f104 021a 	add.w	r2, r4, #26
 80078e8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80078ec:	ebaa 0309 	sub.w	r3, sl, r9
 80078f0:	455b      	cmp	r3, fp
 80078f2:	dc33      	bgt.n	800795c <_printf_float+0x374>
 80078f4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80078f8:	429a      	cmp	r2, r3
 80078fa:	db3b      	blt.n	8007974 <_printf_float+0x38c>
 80078fc:	6823      	ldr	r3, [r4, #0]
 80078fe:	07da      	lsls	r2, r3, #31
 8007900:	d438      	bmi.n	8007974 <_printf_float+0x38c>
 8007902:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007904:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007906:	eba2 030a 	sub.w	r3, r2, sl
 800790a:	eba2 0901 	sub.w	r9, r2, r1
 800790e:	4599      	cmp	r9, r3
 8007910:	bfa8      	it	ge
 8007912:	4699      	movge	r9, r3
 8007914:	f1b9 0f00 	cmp.w	r9, #0
 8007918:	dc34      	bgt.n	8007984 <_printf_float+0x39c>
 800791a:	f04f 0800 	mov.w	r8, #0
 800791e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007922:	f104 0a1a 	add.w	sl, r4, #26
 8007926:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800792a:	1a9b      	subs	r3, r3, r2
 800792c:	eba3 0309 	sub.w	r3, r3, r9
 8007930:	4543      	cmp	r3, r8
 8007932:	f77f af7a 	ble.w	800782a <_printf_float+0x242>
 8007936:	2301      	movs	r3, #1
 8007938:	4652      	mov	r2, sl
 800793a:	4631      	mov	r1, r6
 800793c:	4628      	mov	r0, r5
 800793e:	47b8      	blx	r7
 8007940:	3001      	adds	r0, #1
 8007942:	f43f aeac 	beq.w	800769e <_printf_float+0xb6>
 8007946:	f108 0801 	add.w	r8, r8, #1
 800794a:	e7ec      	b.n	8007926 <_printf_float+0x33e>
 800794c:	4613      	mov	r3, r2
 800794e:	4631      	mov	r1, r6
 8007950:	4642      	mov	r2, r8
 8007952:	4628      	mov	r0, r5
 8007954:	47b8      	blx	r7
 8007956:	3001      	adds	r0, #1
 8007958:	d1c0      	bne.n	80078dc <_printf_float+0x2f4>
 800795a:	e6a0      	b.n	800769e <_printf_float+0xb6>
 800795c:	2301      	movs	r3, #1
 800795e:	4631      	mov	r1, r6
 8007960:	4628      	mov	r0, r5
 8007962:	920b      	str	r2, [sp, #44]	; 0x2c
 8007964:	47b8      	blx	r7
 8007966:	3001      	adds	r0, #1
 8007968:	f43f ae99 	beq.w	800769e <_printf_float+0xb6>
 800796c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800796e:	f10b 0b01 	add.w	fp, fp, #1
 8007972:	e7b9      	b.n	80078e8 <_printf_float+0x300>
 8007974:	4631      	mov	r1, r6
 8007976:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800797a:	4628      	mov	r0, r5
 800797c:	47b8      	blx	r7
 800797e:	3001      	adds	r0, #1
 8007980:	d1bf      	bne.n	8007902 <_printf_float+0x31a>
 8007982:	e68c      	b.n	800769e <_printf_float+0xb6>
 8007984:	464b      	mov	r3, r9
 8007986:	4631      	mov	r1, r6
 8007988:	4628      	mov	r0, r5
 800798a:	eb08 020a 	add.w	r2, r8, sl
 800798e:	47b8      	blx	r7
 8007990:	3001      	adds	r0, #1
 8007992:	d1c2      	bne.n	800791a <_printf_float+0x332>
 8007994:	e683      	b.n	800769e <_printf_float+0xb6>
 8007996:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007998:	2a01      	cmp	r2, #1
 800799a:	dc01      	bgt.n	80079a0 <_printf_float+0x3b8>
 800799c:	07db      	lsls	r3, r3, #31
 800799e:	d537      	bpl.n	8007a10 <_printf_float+0x428>
 80079a0:	2301      	movs	r3, #1
 80079a2:	4642      	mov	r2, r8
 80079a4:	4631      	mov	r1, r6
 80079a6:	4628      	mov	r0, r5
 80079a8:	47b8      	blx	r7
 80079aa:	3001      	adds	r0, #1
 80079ac:	f43f ae77 	beq.w	800769e <_printf_float+0xb6>
 80079b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80079b4:	4631      	mov	r1, r6
 80079b6:	4628      	mov	r0, r5
 80079b8:	47b8      	blx	r7
 80079ba:	3001      	adds	r0, #1
 80079bc:	f43f ae6f 	beq.w	800769e <_printf_float+0xb6>
 80079c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80079c4:	2200      	movs	r2, #0
 80079c6:	2300      	movs	r3, #0
 80079c8:	f7f9 f864 	bl	8000a94 <__aeabi_dcmpeq>
 80079cc:	b9d8      	cbnz	r0, 8007a06 <_printf_float+0x41e>
 80079ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80079d0:	f108 0201 	add.w	r2, r8, #1
 80079d4:	3b01      	subs	r3, #1
 80079d6:	4631      	mov	r1, r6
 80079d8:	4628      	mov	r0, r5
 80079da:	47b8      	blx	r7
 80079dc:	3001      	adds	r0, #1
 80079de:	d10e      	bne.n	80079fe <_printf_float+0x416>
 80079e0:	e65d      	b.n	800769e <_printf_float+0xb6>
 80079e2:	2301      	movs	r3, #1
 80079e4:	464a      	mov	r2, r9
 80079e6:	4631      	mov	r1, r6
 80079e8:	4628      	mov	r0, r5
 80079ea:	47b8      	blx	r7
 80079ec:	3001      	adds	r0, #1
 80079ee:	f43f ae56 	beq.w	800769e <_printf_float+0xb6>
 80079f2:	f108 0801 	add.w	r8, r8, #1
 80079f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80079f8:	3b01      	subs	r3, #1
 80079fa:	4543      	cmp	r3, r8
 80079fc:	dcf1      	bgt.n	80079e2 <_printf_float+0x3fa>
 80079fe:	4653      	mov	r3, sl
 8007a00:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007a04:	e6e0      	b.n	80077c8 <_printf_float+0x1e0>
 8007a06:	f04f 0800 	mov.w	r8, #0
 8007a0a:	f104 091a 	add.w	r9, r4, #26
 8007a0e:	e7f2      	b.n	80079f6 <_printf_float+0x40e>
 8007a10:	2301      	movs	r3, #1
 8007a12:	4642      	mov	r2, r8
 8007a14:	e7df      	b.n	80079d6 <_printf_float+0x3ee>
 8007a16:	2301      	movs	r3, #1
 8007a18:	464a      	mov	r2, r9
 8007a1a:	4631      	mov	r1, r6
 8007a1c:	4628      	mov	r0, r5
 8007a1e:	47b8      	blx	r7
 8007a20:	3001      	adds	r0, #1
 8007a22:	f43f ae3c 	beq.w	800769e <_printf_float+0xb6>
 8007a26:	f108 0801 	add.w	r8, r8, #1
 8007a2a:	68e3      	ldr	r3, [r4, #12]
 8007a2c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007a2e:	1a5b      	subs	r3, r3, r1
 8007a30:	4543      	cmp	r3, r8
 8007a32:	dcf0      	bgt.n	8007a16 <_printf_float+0x42e>
 8007a34:	e6fd      	b.n	8007832 <_printf_float+0x24a>
 8007a36:	f04f 0800 	mov.w	r8, #0
 8007a3a:	f104 0919 	add.w	r9, r4, #25
 8007a3e:	e7f4      	b.n	8007a2a <_printf_float+0x442>

08007a40 <_printf_common>:
 8007a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a44:	4616      	mov	r6, r2
 8007a46:	4699      	mov	r9, r3
 8007a48:	688a      	ldr	r2, [r1, #8]
 8007a4a:	690b      	ldr	r3, [r1, #16]
 8007a4c:	4607      	mov	r7, r0
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	bfb8      	it	lt
 8007a52:	4613      	movlt	r3, r2
 8007a54:	6033      	str	r3, [r6, #0]
 8007a56:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007a5a:	460c      	mov	r4, r1
 8007a5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007a60:	b10a      	cbz	r2, 8007a66 <_printf_common+0x26>
 8007a62:	3301      	adds	r3, #1
 8007a64:	6033      	str	r3, [r6, #0]
 8007a66:	6823      	ldr	r3, [r4, #0]
 8007a68:	0699      	lsls	r1, r3, #26
 8007a6a:	bf42      	ittt	mi
 8007a6c:	6833      	ldrmi	r3, [r6, #0]
 8007a6e:	3302      	addmi	r3, #2
 8007a70:	6033      	strmi	r3, [r6, #0]
 8007a72:	6825      	ldr	r5, [r4, #0]
 8007a74:	f015 0506 	ands.w	r5, r5, #6
 8007a78:	d106      	bne.n	8007a88 <_printf_common+0x48>
 8007a7a:	f104 0a19 	add.w	sl, r4, #25
 8007a7e:	68e3      	ldr	r3, [r4, #12]
 8007a80:	6832      	ldr	r2, [r6, #0]
 8007a82:	1a9b      	subs	r3, r3, r2
 8007a84:	42ab      	cmp	r3, r5
 8007a86:	dc28      	bgt.n	8007ada <_printf_common+0x9a>
 8007a88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007a8c:	1e13      	subs	r3, r2, #0
 8007a8e:	6822      	ldr	r2, [r4, #0]
 8007a90:	bf18      	it	ne
 8007a92:	2301      	movne	r3, #1
 8007a94:	0692      	lsls	r2, r2, #26
 8007a96:	d42d      	bmi.n	8007af4 <_printf_common+0xb4>
 8007a98:	4649      	mov	r1, r9
 8007a9a:	4638      	mov	r0, r7
 8007a9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007aa0:	47c0      	blx	r8
 8007aa2:	3001      	adds	r0, #1
 8007aa4:	d020      	beq.n	8007ae8 <_printf_common+0xa8>
 8007aa6:	6823      	ldr	r3, [r4, #0]
 8007aa8:	68e5      	ldr	r5, [r4, #12]
 8007aaa:	f003 0306 	and.w	r3, r3, #6
 8007aae:	2b04      	cmp	r3, #4
 8007ab0:	bf18      	it	ne
 8007ab2:	2500      	movne	r5, #0
 8007ab4:	6832      	ldr	r2, [r6, #0]
 8007ab6:	f04f 0600 	mov.w	r6, #0
 8007aba:	68a3      	ldr	r3, [r4, #8]
 8007abc:	bf08      	it	eq
 8007abe:	1aad      	subeq	r5, r5, r2
 8007ac0:	6922      	ldr	r2, [r4, #16]
 8007ac2:	bf08      	it	eq
 8007ac4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	bfc4      	itt	gt
 8007acc:	1a9b      	subgt	r3, r3, r2
 8007ace:	18ed      	addgt	r5, r5, r3
 8007ad0:	341a      	adds	r4, #26
 8007ad2:	42b5      	cmp	r5, r6
 8007ad4:	d11a      	bne.n	8007b0c <_printf_common+0xcc>
 8007ad6:	2000      	movs	r0, #0
 8007ad8:	e008      	b.n	8007aec <_printf_common+0xac>
 8007ada:	2301      	movs	r3, #1
 8007adc:	4652      	mov	r2, sl
 8007ade:	4649      	mov	r1, r9
 8007ae0:	4638      	mov	r0, r7
 8007ae2:	47c0      	blx	r8
 8007ae4:	3001      	adds	r0, #1
 8007ae6:	d103      	bne.n	8007af0 <_printf_common+0xb0>
 8007ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8007aec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007af0:	3501      	adds	r5, #1
 8007af2:	e7c4      	b.n	8007a7e <_printf_common+0x3e>
 8007af4:	2030      	movs	r0, #48	; 0x30
 8007af6:	18e1      	adds	r1, r4, r3
 8007af8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007afc:	1c5a      	adds	r2, r3, #1
 8007afe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007b02:	4422      	add	r2, r4
 8007b04:	3302      	adds	r3, #2
 8007b06:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007b0a:	e7c5      	b.n	8007a98 <_printf_common+0x58>
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	4622      	mov	r2, r4
 8007b10:	4649      	mov	r1, r9
 8007b12:	4638      	mov	r0, r7
 8007b14:	47c0      	blx	r8
 8007b16:	3001      	adds	r0, #1
 8007b18:	d0e6      	beq.n	8007ae8 <_printf_common+0xa8>
 8007b1a:	3601      	adds	r6, #1
 8007b1c:	e7d9      	b.n	8007ad2 <_printf_common+0x92>
	...

08007b20 <_printf_i>:
 8007b20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b24:	460c      	mov	r4, r1
 8007b26:	7e27      	ldrb	r7, [r4, #24]
 8007b28:	4691      	mov	r9, r2
 8007b2a:	2f78      	cmp	r7, #120	; 0x78
 8007b2c:	4680      	mov	r8, r0
 8007b2e:	469a      	mov	sl, r3
 8007b30:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007b32:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b36:	d807      	bhi.n	8007b48 <_printf_i+0x28>
 8007b38:	2f62      	cmp	r7, #98	; 0x62
 8007b3a:	d80a      	bhi.n	8007b52 <_printf_i+0x32>
 8007b3c:	2f00      	cmp	r7, #0
 8007b3e:	f000 80d9 	beq.w	8007cf4 <_printf_i+0x1d4>
 8007b42:	2f58      	cmp	r7, #88	; 0x58
 8007b44:	f000 80a4 	beq.w	8007c90 <_printf_i+0x170>
 8007b48:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007b4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007b50:	e03a      	b.n	8007bc8 <_printf_i+0xa8>
 8007b52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007b56:	2b15      	cmp	r3, #21
 8007b58:	d8f6      	bhi.n	8007b48 <_printf_i+0x28>
 8007b5a:	a001      	add	r0, pc, #4	; (adr r0, 8007b60 <_printf_i+0x40>)
 8007b5c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007b60:	08007bb9 	.word	0x08007bb9
 8007b64:	08007bcd 	.word	0x08007bcd
 8007b68:	08007b49 	.word	0x08007b49
 8007b6c:	08007b49 	.word	0x08007b49
 8007b70:	08007b49 	.word	0x08007b49
 8007b74:	08007b49 	.word	0x08007b49
 8007b78:	08007bcd 	.word	0x08007bcd
 8007b7c:	08007b49 	.word	0x08007b49
 8007b80:	08007b49 	.word	0x08007b49
 8007b84:	08007b49 	.word	0x08007b49
 8007b88:	08007b49 	.word	0x08007b49
 8007b8c:	08007cdb 	.word	0x08007cdb
 8007b90:	08007bfd 	.word	0x08007bfd
 8007b94:	08007cbd 	.word	0x08007cbd
 8007b98:	08007b49 	.word	0x08007b49
 8007b9c:	08007b49 	.word	0x08007b49
 8007ba0:	08007cfd 	.word	0x08007cfd
 8007ba4:	08007b49 	.word	0x08007b49
 8007ba8:	08007bfd 	.word	0x08007bfd
 8007bac:	08007b49 	.word	0x08007b49
 8007bb0:	08007b49 	.word	0x08007b49
 8007bb4:	08007cc5 	.word	0x08007cc5
 8007bb8:	680b      	ldr	r3, [r1, #0]
 8007bba:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007bbe:	1d1a      	adds	r2, r3, #4
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	600a      	str	r2, [r1, #0]
 8007bc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007bc8:	2301      	movs	r3, #1
 8007bca:	e0a4      	b.n	8007d16 <_printf_i+0x1f6>
 8007bcc:	6825      	ldr	r5, [r4, #0]
 8007bce:	6808      	ldr	r0, [r1, #0]
 8007bd0:	062e      	lsls	r6, r5, #24
 8007bd2:	f100 0304 	add.w	r3, r0, #4
 8007bd6:	d50a      	bpl.n	8007bee <_printf_i+0xce>
 8007bd8:	6805      	ldr	r5, [r0, #0]
 8007bda:	600b      	str	r3, [r1, #0]
 8007bdc:	2d00      	cmp	r5, #0
 8007bde:	da03      	bge.n	8007be8 <_printf_i+0xc8>
 8007be0:	232d      	movs	r3, #45	; 0x2d
 8007be2:	426d      	negs	r5, r5
 8007be4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007be8:	230a      	movs	r3, #10
 8007bea:	485e      	ldr	r0, [pc, #376]	; (8007d64 <_printf_i+0x244>)
 8007bec:	e019      	b.n	8007c22 <_printf_i+0x102>
 8007bee:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007bf2:	6805      	ldr	r5, [r0, #0]
 8007bf4:	600b      	str	r3, [r1, #0]
 8007bf6:	bf18      	it	ne
 8007bf8:	b22d      	sxthne	r5, r5
 8007bfa:	e7ef      	b.n	8007bdc <_printf_i+0xbc>
 8007bfc:	680b      	ldr	r3, [r1, #0]
 8007bfe:	6825      	ldr	r5, [r4, #0]
 8007c00:	1d18      	adds	r0, r3, #4
 8007c02:	6008      	str	r0, [r1, #0]
 8007c04:	0628      	lsls	r0, r5, #24
 8007c06:	d501      	bpl.n	8007c0c <_printf_i+0xec>
 8007c08:	681d      	ldr	r5, [r3, #0]
 8007c0a:	e002      	b.n	8007c12 <_printf_i+0xf2>
 8007c0c:	0669      	lsls	r1, r5, #25
 8007c0e:	d5fb      	bpl.n	8007c08 <_printf_i+0xe8>
 8007c10:	881d      	ldrh	r5, [r3, #0]
 8007c12:	2f6f      	cmp	r7, #111	; 0x6f
 8007c14:	bf0c      	ite	eq
 8007c16:	2308      	moveq	r3, #8
 8007c18:	230a      	movne	r3, #10
 8007c1a:	4852      	ldr	r0, [pc, #328]	; (8007d64 <_printf_i+0x244>)
 8007c1c:	2100      	movs	r1, #0
 8007c1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007c22:	6866      	ldr	r6, [r4, #4]
 8007c24:	2e00      	cmp	r6, #0
 8007c26:	bfa8      	it	ge
 8007c28:	6821      	ldrge	r1, [r4, #0]
 8007c2a:	60a6      	str	r6, [r4, #8]
 8007c2c:	bfa4      	itt	ge
 8007c2e:	f021 0104 	bicge.w	r1, r1, #4
 8007c32:	6021      	strge	r1, [r4, #0]
 8007c34:	b90d      	cbnz	r5, 8007c3a <_printf_i+0x11a>
 8007c36:	2e00      	cmp	r6, #0
 8007c38:	d04d      	beq.n	8007cd6 <_printf_i+0x1b6>
 8007c3a:	4616      	mov	r6, r2
 8007c3c:	fbb5 f1f3 	udiv	r1, r5, r3
 8007c40:	fb03 5711 	mls	r7, r3, r1, r5
 8007c44:	5dc7      	ldrb	r7, [r0, r7]
 8007c46:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007c4a:	462f      	mov	r7, r5
 8007c4c:	42bb      	cmp	r3, r7
 8007c4e:	460d      	mov	r5, r1
 8007c50:	d9f4      	bls.n	8007c3c <_printf_i+0x11c>
 8007c52:	2b08      	cmp	r3, #8
 8007c54:	d10b      	bne.n	8007c6e <_printf_i+0x14e>
 8007c56:	6823      	ldr	r3, [r4, #0]
 8007c58:	07df      	lsls	r7, r3, #31
 8007c5a:	d508      	bpl.n	8007c6e <_printf_i+0x14e>
 8007c5c:	6923      	ldr	r3, [r4, #16]
 8007c5e:	6861      	ldr	r1, [r4, #4]
 8007c60:	4299      	cmp	r1, r3
 8007c62:	bfde      	ittt	le
 8007c64:	2330      	movle	r3, #48	; 0x30
 8007c66:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007c6a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007c6e:	1b92      	subs	r2, r2, r6
 8007c70:	6122      	str	r2, [r4, #16]
 8007c72:	464b      	mov	r3, r9
 8007c74:	4621      	mov	r1, r4
 8007c76:	4640      	mov	r0, r8
 8007c78:	f8cd a000 	str.w	sl, [sp]
 8007c7c:	aa03      	add	r2, sp, #12
 8007c7e:	f7ff fedf 	bl	8007a40 <_printf_common>
 8007c82:	3001      	adds	r0, #1
 8007c84:	d14c      	bne.n	8007d20 <_printf_i+0x200>
 8007c86:	f04f 30ff 	mov.w	r0, #4294967295
 8007c8a:	b004      	add	sp, #16
 8007c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c90:	4834      	ldr	r0, [pc, #208]	; (8007d64 <_printf_i+0x244>)
 8007c92:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007c96:	680e      	ldr	r6, [r1, #0]
 8007c98:	6823      	ldr	r3, [r4, #0]
 8007c9a:	f856 5b04 	ldr.w	r5, [r6], #4
 8007c9e:	061f      	lsls	r7, r3, #24
 8007ca0:	600e      	str	r6, [r1, #0]
 8007ca2:	d514      	bpl.n	8007cce <_printf_i+0x1ae>
 8007ca4:	07d9      	lsls	r1, r3, #31
 8007ca6:	bf44      	itt	mi
 8007ca8:	f043 0320 	orrmi.w	r3, r3, #32
 8007cac:	6023      	strmi	r3, [r4, #0]
 8007cae:	b91d      	cbnz	r5, 8007cb8 <_printf_i+0x198>
 8007cb0:	6823      	ldr	r3, [r4, #0]
 8007cb2:	f023 0320 	bic.w	r3, r3, #32
 8007cb6:	6023      	str	r3, [r4, #0]
 8007cb8:	2310      	movs	r3, #16
 8007cba:	e7af      	b.n	8007c1c <_printf_i+0xfc>
 8007cbc:	6823      	ldr	r3, [r4, #0]
 8007cbe:	f043 0320 	orr.w	r3, r3, #32
 8007cc2:	6023      	str	r3, [r4, #0]
 8007cc4:	2378      	movs	r3, #120	; 0x78
 8007cc6:	4828      	ldr	r0, [pc, #160]	; (8007d68 <_printf_i+0x248>)
 8007cc8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007ccc:	e7e3      	b.n	8007c96 <_printf_i+0x176>
 8007cce:	065e      	lsls	r6, r3, #25
 8007cd0:	bf48      	it	mi
 8007cd2:	b2ad      	uxthmi	r5, r5
 8007cd4:	e7e6      	b.n	8007ca4 <_printf_i+0x184>
 8007cd6:	4616      	mov	r6, r2
 8007cd8:	e7bb      	b.n	8007c52 <_printf_i+0x132>
 8007cda:	680b      	ldr	r3, [r1, #0]
 8007cdc:	6826      	ldr	r6, [r4, #0]
 8007cde:	1d1d      	adds	r5, r3, #4
 8007ce0:	6960      	ldr	r0, [r4, #20]
 8007ce2:	600d      	str	r5, [r1, #0]
 8007ce4:	0635      	lsls	r5, r6, #24
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	d501      	bpl.n	8007cee <_printf_i+0x1ce>
 8007cea:	6018      	str	r0, [r3, #0]
 8007cec:	e002      	b.n	8007cf4 <_printf_i+0x1d4>
 8007cee:	0671      	lsls	r1, r6, #25
 8007cf0:	d5fb      	bpl.n	8007cea <_printf_i+0x1ca>
 8007cf2:	8018      	strh	r0, [r3, #0]
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	4616      	mov	r6, r2
 8007cf8:	6123      	str	r3, [r4, #16]
 8007cfa:	e7ba      	b.n	8007c72 <_printf_i+0x152>
 8007cfc:	680b      	ldr	r3, [r1, #0]
 8007cfe:	1d1a      	adds	r2, r3, #4
 8007d00:	600a      	str	r2, [r1, #0]
 8007d02:	681e      	ldr	r6, [r3, #0]
 8007d04:	2100      	movs	r1, #0
 8007d06:	4630      	mov	r0, r6
 8007d08:	6862      	ldr	r2, [r4, #4]
 8007d0a:	f001 fb23 	bl	8009354 <memchr>
 8007d0e:	b108      	cbz	r0, 8007d14 <_printf_i+0x1f4>
 8007d10:	1b80      	subs	r0, r0, r6
 8007d12:	6060      	str	r0, [r4, #4]
 8007d14:	6863      	ldr	r3, [r4, #4]
 8007d16:	6123      	str	r3, [r4, #16]
 8007d18:	2300      	movs	r3, #0
 8007d1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d1e:	e7a8      	b.n	8007c72 <_printf_i+0x152>
 8007d20:	4632      	mov	r2, r6
 8007d22:	4649      	mov	r1, r9
 8007d24:	4640      	mov	r0, r8
 8007d26:	6923      	ldr	r3, [r4, #16]
 8007d28:	47d0      	blx	sl
 8007d2a:	3001      	adds	r0, #1
 8007d2c:	d0ab      	beq.n	8007c86 <_printf_i+0x166>
 8007d2e:	6823      	ldr	r3, [r4, #0]
 8007d30:	079b      	lsls	r3, r3, #30
 8007d32:	d413      	bmi.n	8007d5c <_printf_i+0x23c>
 8007d34:	68e0      	ldr	r0, [r4, #12]
 8007d36:	9b03      	ldr	r3, [sp, #12]
 8007d38:	4298      	cmp	r0, r3
 8007d3a:	bfb8      	it	lt
 8007d3c:	4618      	movlt	r0, r3
 8007d3e:	e7a4      	b.n	8007c8a <_printf_i+0x16a>
 8007d40:	2301      	movs	r3, #1
 8007d42:	4632      	mov	r2, r6
 8007d44:	4649      	mov	r1, r9
 8007d46:	4640      	mov	r0, r8
 8007d48:	47d0      	blx	sl
 8007d4a:	3001      	adds	r0, #1
 8007d4c:	d09b      	beq.n	8007c86 <_printf_i+0x166>
 8007d4e:	3501      	adds	r5, #1
 8007d50:	68e3      	ldr	r3, [r4, #12]
 8007d52:	9903      	ldr	r1, [sp, #12]
 8007d54:	1a5b      	subs	r3, r3, r1
 8007d56:	42ab      	cmp	r3, r5
 8007d58:	dcf2      	bgt.n	8007d40 <_printf_i+0x220>
 8007d5a:	e7eb      	b.n	8007d34 <_printf_i+0x214>
 8007d5c:	2500      	movs	r5, #0
 8007d5e:	f104 0619 	add.w	r6, r4, #25
 8007d62:	e7f5      	b.n	8007d50 <_printf_i+0x230>
 8007d64:	0800a972 	.word	0x0800a972
 8007d68:	0800a983 	.word	0x0800a983

08007d6c <iprintf>:
 8007d6c:	b40f      	push	{r0, r1, r2, r3}
 8007d6e:	4b0a      	ldr	r3, [pc, #40]	; (8007d98 <iprintf+0x2c>)
 8007d70:	b513      	push	{r0, r1, r4, lr}
 8007d72:	681c      	ldr	r4, [r3, #0]
 8007d74:	b124      	cbz	r4, 8007d80 <iprintf+0x14>
 8007d76:	69a3      	ldr	r3, [r4, #24]
 8007d78:	b913      	cbnz	r3, 8007d80 <iprintf+0x14>
 8007d7a:	4620      	mov	r0, r4
 8007d7c:	f001 f9d8 	bl	8009130 <__sinit>
 8007d80:	ab05      	add	r3, sp, #20
 8007d82:	4620      	mov	r0, r4
 8007d84:	9a04      	ldr	r2, [sp, #16]
 8007d86:	68a1      	ldr	r1, [r4, #8]
 8007d88:	9301      	str	r3, [sp, #4]
 8007d8a:	f002 f8ab 	bl	8009ee4 <_vfiprintf_r>
 8007d8e:	b002      	add	sp, #8
 8007d90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d94:	b004      	add	sp, #16
 8007d96:	4770      	bx	lr
 8007d98:	2000010c 	.word	0x2000010c

08007d9c <_puts_r>:
 8007d9c:	b570      	push	{r4, r5, r6, lr}
 8007d9e:	460e      	mov	r6, r1
 8007da0:	4605      	mov	r5, r0
 8007da2:	b118      	cbz	r0, 8007dac <_puts_r+0x10>
 8007da4:	6983      	ldr	r3, [r0, #24]
 8007da6:	b90b      	cbnz	r3, 8007dac <_puts_r+0x10>
 8007da8:	f001 f9c2 	bl	8009130 <__sinit>
 8007dac:	69ab      	ldr	r3, [r5, #24]
 8007dae:	68ac      	ldr	r4, [r5, #8]
 8007db0:	b913      	cbnz	r3, 8007db8 <_puts_r+0x1c>
 8007db2:	4628      	mov	r0, r5
 8007db4:	f001 f9bc 	bl	8009130 <__sinit>
 8007db8:	4b2c      	ldr	r3, [pc, #176]	; (8007e6c <_puts_r+0xd0>)
 8007dba:	429c      	cmp	r4, r3
 8007dbc:	d120      	bne.n	8007e00 <_puts_r+0x64>
 8007dbe:	686c      	ldr	r4, [r5, #4]
 8007dc0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007dc2:	07db      	lsls	r3, r3, #31
 8007dc4:	d405      	bmi.n	8007dd2 <_puts_r+0x36>
 8007dc6:	89a3      	ldrh	r3, [r4, #12]
 8007dc8:	0598      	lsls	r0, r3, #22
 8007dca:	d402      	bmi.n	8007dd2 <_puts_r+0x36>
 8007dcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007dce:	f001 fa52 	bl	8009276 <__retarget_lock_acquire_recursive>
 8007dd2:	89a3      	ldrh	r3, [r4, #12]
 8007dd4:	0719      	lsls	r1, r3, #28
 8007dd6:	d51d      	bpl.n	8007e14 <_puts_r+0x78>
 8007dd8:	6923      	ldr	r3, [r4, #16]
 8007dda:	b1db      	cbz	r3, 8007e14 <_puts_r+0x78>
 8007ddc:	3e01      	subs	r6, #1
 8007dde:	68a3      	ldr	r3, [r4, #8]
 8007de0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007de4:	3b01      	subs	r3, #1
 8007de6:	60a3      	str	r3, [r4, #8]
 8007de8:	bb39      	cbnz	r1, 8007e3a <_puts_r+0x9e>
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	da38      	bge.n	8007e60 <_puts_r+0xc4>
 8007dee:	4622      	mov	r2, r4
 8007df0:	210a      	movs	r1, #10
 8007df2:	4628      	mov	r0, r5
 8007df4:	f000 f946 	bl	8008084 <__swbuf_r>
 8007df8:	3001      	adds	r0, #1
 8007dfa:	d011      	beq.n	8007e20 <_puts_r+0x84>
 8007dfc:	250a      	movs	r5, #10
 8007dfe:	e011      	b.n	8007e24 <_puts_r+0x88>
 8007e00:	4b1b      	ldr	r3, [pc, #108]	; (8007e70 <_puts_r+0xd4>)
 8007e02:	429c      	cmp	r4, r3
 8007e04:	d101      	bne.n	8007e0a <_puts_r+0x6e>
 8007e06:	68ac      	ldr	r4, [r5, #8]
 8007e08:	e7da      	b.n	8007dc0 <_puts_r+0x24>
 8007e0a:	4b1a      	ldr	r3, [pc, #104]	; (8007e74 <_puts_r+0xd8>)
 8007e0c:	429c      	cmp	r4, r3
 8007e0e:	bf08      	it	eq
 8007e10:	68ec      	ldreq	r4, [r5, #12]
 8007e12:	e7d5      	b.n	8007dc0 <_puts_r+0x24>
 8007e14:	4621      	mov	r1, r4
 8007e16:	4628      	mov	r0, r5
 8007e18:	f000 f986 	bl	8008128 <__swsetup_r>
 8007e1c:	2800      	cmp	r0, #0
 8007e1e:	d0dd      	beq.n	8007ddc <_puts_r+0x40>
 8007e20:	f04f 35ff 	mov.w	r5, #4294967295
 8007e24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e26:	07da      	lsls	r2, r3, #31
 8007e28:	d405      	bmi.n	8007e36 <_puts_r+0x9a>
 8007e2a:	89a3      	ldrh	r3, [r4, #12]
 8007e2c:	059b      	lsls	r3, r3, #22
 8007e2e:	d402      	bmi.n	8007e36 <_puts_r+0x9a>
 8007e30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e32:	f001 fa21 	bl	8009278 <__retarget_lock_release_recursive>
 8007e36:	4628      	mov	r0, r5
 8007e38:	bd70      	pop	{r4, r5, r6, pc}
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	da04      	bge.n	8007e48 <_puts_r+0xac>
 8007e3e:	69a2      	ldr	r2, [r4, #24]
 8007e40:	429a      	cmp	r2, r3
 8007e42:	dc06      	bgt.n	8007e52 <_puts_r+0xb6>
 8007e44:	290a      	cmp	r1, #10
 8007e46:	d004      	beq.n	8007e52 <_puts_r+0xb6>
 8007e48:	6823      	ldr	r3, [r4, #0]
 8007e4a:	1c5a      	adds	r2, r3, #1
 8007e4c:	6022      	str	r2, [r4, #0]
 8007e4e:	7019      	strb	r1, [r3, #0]
 8007e50:	e7c5      	b.n	8007dde <_puts_r+0x42>
 8007e52:	4622      	mov	r2, r4
 8007e54:	4628      	mov	r0, r5
 8007e56:	f000 f915 	bl	8008084 <__swbuf_r>
 8007e5a:	3001      	adds	r0, #1
 8007e5c:	d1bf      	bne.n	8007dde <_puts_r+0x42>
 8007e5e:	e7df      	b.n	8007e20 <_puts_r+0x84>
 8007e60:	250a      	movs	r5, #10
 8007e62:	6823      	ldr	r3, [r4, #0]
 8007e64:	1c5a      	adds	r2, r3, #1
 8007e66:	6022      	str	r2, [r4, #0]
 8007e68:	701d      	strb	r5, [r3, #0]
 8007e6a:	e7db      	b.n	8007e24 <_puts_r+0x88>
 8007e6c:	0800aa48 	.word	0x0800aa48
 8007e70:	0800aa68 	.word	0x0800aa68
 8007e74:	0800aa28 	.word	0x0800aa28

08007e78 <puts>:
 8007e78:	4b02      	ldr	r3, [pc, #8]	; (8007e84 <puts+0xc>)
 8007e7a:	4601      	mov	r1, r0
 8007e7c:	6818      	ldr	r0, [r3, #0]
 8007e7e:	f7ff bf8d 	b.w	8007d9c <_puts_r>
 8007e82:	bf00      	nop
 8007e84:	2000010c 	.word	0x2000010c

08007e88 <setvbuf>:
 8007e88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007e8c:	461d      	mov	r5, r3
 8007e8e:	4b5d      	ldr	r3, [pc, #372]	; (8008004 <setvbuf+0x17c>)
 8007e90:	4604      	mov	r4, r0
 8007e92:	681f      	ldr	r7, [r3, #0]
 8007e94:	460e      	mov	r6, r1
 8007e96:	4690      	mov	r8, r2
 8007e98:	b127      	cbz	r7, 8007ea4 <setvbuf+0x1c>
 8007e9a:	69bb      	ldr	r3, [r7, #24]
 8007e9c:	b913      	cbnz	r3, 8007ea4 <setvbuf+0x1c>
 8007e9e:	4638      	mov	r0, r7
 8007ea0:	f001 f946 	bl	8009130 <__sinit>
 8007ea4:	4b58      	ldr	r3, [pc, #352]	; (8008008 <setvbuf+0x180>)
 8007ea6:	429c      	cmp	r4, r3
 8007ea8:	d167      	bne.n	8007f7a <setvbuf+0xf2>
 8007eaa:	687c      	ldr	r4, [r7, #4]
 8007eac:	f1b8 0f02 	cmp.w	r8, #2
 8007eb0:	d006      	beq.n	8007ec0 <setvbuf+0x38>
 8007eb2:	f1b8 0f01 	cmp.w	r8, #1
 8007eb6:	f200 809f 	bhi.w	8007ff8 <setvbuf+0x170>
 8007eba:	2d00      	cmp	r5, #0
 8007ebc:	f2c0 809c 	blt.w	8007ff8 <setvbuf+0x170>
 8007ec0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ec2:	07db      	lsls	r3, r3, #31
 8007ec4:	d405      	bmi.n	8007ed2 <setvbuf+0x4a>
 8007ec6:	89a3      	ldrh	r3, [r4, #12]
 8007ec8:	0598      	lsls	r0, r3, #22
 8007eca:	d402      	bmi.n	8007ed2 <setvbuf+0x4a>
 8007ecc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ece:	f001 f9d2 	bl	8009276 <__retarget_lock_acquire_recursive>
 8007ed2:	4621      	mov	r1, r4
 8007ed4:	4638      	mov	r0, r7
 8007ed6:	f001 f897 	bl	8009008 <_fflush_r>
 8007eda:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007edc:	b141      	cbz	r1, 8007ef0 <setvbuf+0x68>
 8007ede:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ee2:	4299      	cmp	r1, r3
 8007ee4:	d002      	beq.n	8007eec <setvbuf+0x64>
 8007ee6:	4638      	mov	r0, r7
 8007ee8:	f001 fdd2 	bl	8009a90 <_free_r>
 8007eec:	2300      	movs	r3, #0
 8007eee:	6363      	str	r3, [r4, #52]	; 0x34
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	61a3      	str	r3, [r4, #24]
 8007ef4:	6063      	str	r3, [r4, #4]
 8007ef6:	89a3      	ldrh	r3, [r4, #12]
 8007ef8:	0619      	lsls	r1, r3, #24
 8007efa:	d503      	bpl.n	8007f04 <setvbuf+0x7c>
 8007efc:	4638      	mov	r0, r7
 8007efe:	6921      	ldr	r1, [r4, #16]
 8007f00:	f001 fdc6 	bl	8009a90 <_free_r>
 8007f04:	89a3      	ldrh	r3, [r4, #12]
 8007f06:	f1b8 0f02 	cmp.w	r8, #2
 8007f0a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8007f0e:	f023 0303 	bic.w	r3, r3, #3
 8007f12:	81a3      	strh	r3, [r4, #12]
 8007f14:	d06c      	beq.n	8007ff0 <setvbuf+0x168>
 8007f16:	ab01      	add	r3, sp, #4
 8007f18:	466a      	mov	r2, sp
 8007f1a:	4621      	mov	r1, r4
 8007f1c:	4638      	mov	r0, r7
 8007f1e:	f001 f9ac 	bl	800927a <__swhatbuf_r>
 8007f22:	89a3      	ldrh	r3, [r4, #12]
 8007f24:	4318      	orrs	r0, r3
 8007f26:	81a0      	strh	r0, [r4, #12]
 8007f28:	2d00      	cmp	r5, #0
 8007f2a:	d130      	bne.n	8007f8e <setvbuf+0x106>
 8007f2c:	9d00      	ldr	r5, [sp, #0]
 8007f2e:	4628      	mov	r0, r5
 8007f30:	f001 fa08 	bl	8009344 <malloc>
 8007f34:	4606      	mov	r6, r0
 8007f36:	2800      	cmp	r0, #0
 8007f38:	d155      	bne.n	8007fe6 <setvbuf+0x15e>
 8007f3a:	f8dd 9000 	ldr.w	r9, [sp]
 8007f3e:	45a9      	cmp	r9, r5
 8007f40:	d14a      	bne.n	8007fd8 <setvbuf+0x150>
 8007f42:	f04f 35ff 	mov.w	r5, #4294967295
 8007f46:	2200      	movs	r2, #0
 8007f48:	60a2      	str	r2, [r4, #8]
 8007f4a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8007f4e:	6022      	str	r2, [r4, #0]
 8007f50:	6122      	str	r2, [r4, #16]
 8007f52:	2201      	movs	r2, #1
 8007f54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f58:	6162      	str	r2, [r4, #20]
 8007f5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007f5c:	f043 0302 	orr.w	r3, r3, #2
 8007f60:	07d2      	lsls	r2, r2, #31
 8007f62:	81a3      	strh	r3, [r4, #12]
 8007f64:	d405      	bmi.n	8007f72 <setvbuf+0xea>
 8007f66:	f413 7f00 	tst.w	r3, #512	; 0x200
 8007f6a:	d102      	bne.n	8007f72 <setvbuf+0xea>
 8007f6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f6e:	f001 f983 	bl	8009278 <__retarget_lock_release_recursive>
 8007f72:	4628      	mov	r0, r5
 8007f74:	b003      	add	sp, #12
 8007f76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f7a:	4b24      	ldr	r3, [pc, #144]	; (800800c <setvbuf+0x184>)
 8007f7c:	429c      	cmp	r4, r3
 8007f7e:	d101      	bne.n	8007f84 <setvbuf+0xfc>
 8007f80:	68bc      	ldr	r4, [r7, #8]
 8007f82:	e793      	b.n	8007eac <setvbuf+0x24>
 8007f84:	4b22      	ldr	r3, [pc, #136]	; (8008010 <setvbuf+0x188>)
 8007f86:	429c      	cmp	r4, r3
 8007f88:	bf08      	it	eq
 8007f8a:	68fc      	ldreq	r4, [r7, #12]
 8007f8c:	e78e      	b.n	8007eac <setvbuf+0x24>
 8007f8e:	2e00      	cmp	r6, #0
 8007f90:	d0cd      	beq.n	8007f2e <setvbuf+0xa6>
 8007f92:	69bb      	ldr	r3, [r7, #24]
 8007f94:	b913      	cbnz	r3, 8007f9c <setvbuf+0x114>
 8007f96:	4638      	mov	r0, r7
 8007f98:	f001 f8ca 	bl	8009130 <__sinit>
 8007f9c:	f1b8 0f01 	cmp.w	r8, #1
 8007fa0:	bf08      	it	eq
 8007fa2:	89a3      	ldrheq	r3, [r4, #12]
 8007fa4:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8007fa8:	bf04      	itt	eq
 8007faa:	f043 0301 	orreq.w	r3, r3, #1
 8007fae:	81a3      	strheq	r3, [r4, #12]
 8007fb0:	89a2      	ldrh	r2, [r4, #12]
 8007fb2:	6026      	str	r6, [r4, #0]
 8007fb4:	f012 0308 	ands.w	r3, r2, #8
 8007fb8:	d01c      	beq.n	8007ff4 <setvbuf+0x16c>
 8007fba:	07d3      	lsls	r3, r2, #31
 8007fbc:	bf41      	itttt	mi
 8007fbe:	2300      	movmi	r3, #0
 8007fc0:	426d      	negmi	r5, r5
 8007fc2:	60a3      	strmi	r3, [r4, #8]
 8007fc4:	61a5      	strmi	r5, [r4, #24]
 8007fc6:	bf58      	it	pl
 8007fc8:	60a5      	strpl	r5, [r4, #8]
 8007fca:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8007fcc:	f015 0501 	ands.w	r5, r5, #1
 8007fd0:	d115      	bne.n	8007ffe <setvbuf+0x176>
 8007fd2:	f412 7f00 	tst.w	r2, #512	; 0x200
 8007fd6:	e7c8      	b.n	8007f6a <setvbuf+0xe2>
 8007fd8:	4648      	mov	r0, r9
 8007fda:	f001 f9b3 	bl	8009344 <malloc>
 8007fde:	4606      	mov	r6, r0
 8007fe0:	2800      	cmp	r0, #0
 8007fe2:	d0ae      	beq.n	8007f42 <setvbuf+0xba>
 8007fe4:	464d      	mov	r5, r9
 8007fe6:	89a3      	ldrh	r3, [r4, #12]
 8007fe8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fec:	81a3      	strh	r3, [r4, #12]
 8007fee:	e7d0      	b.n	8007f92 <setvbuf+0x10a>
 8007ff0:	2500      	movs	r5, #0
 8007ff2:	e7a8      	b.n	8007f46 <setvbuf+0xbe>
 8007ff4:	60a3      	str	r3, [r4, #8]
 8007ff6:	e7e8      	b.n	8007fca <setvbuf+0x142>
 8007ff8:	f04f 35ff 	mov.w	r5, #4294967295
 8007ffc:	e7b9      	b.n	8007f72 <setvbuf+0xea>
 8007ffe:	2500      	movs	r5, #0
 8008000:	e7b7      	b.n	8007f72 <setvbuf+0xea>
 8008002:	bf00      	nop
 8008004:	2000010c 	.word	0x2000010c
 8008008:	0800aa48 	.word	0x0800aa48
 800800c:	0800aa68 	.word	0x0800aa68
 8008010:	0800aa28 	.word	0x0800aa28

08008014 <siprintf>:
 8008014:	b40e      	push	{r1, r2, r3}
 8008016:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800801a:	b500      	push	{lr}
 800801c:	b09c      	sub	sp, #112	; 0x70
 800801e:	ab1d      	add	r3, sp, #116	; 0x74
 8008020:	9002      	str	r0, [sp, #8]
 8008022:	9006      	str	r0, [sp, #24]
 8008024:	9107      	str	r1, [sp, #28]
 8008026:	9104      	str	r1, [sp, #16]
 8008028:	4808      	ldr	r0, [pc, #32]	; (800804c <siprintf+0x38>)
 800802a:	4909      	ldr	r1, [pc, #36]	; (8008050 <siprintf+0x3c>)
 800802c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008030:	9105      	str	r1, [sp, #20]
 8008032:	6800      	ldr	r0, [r0, #0]
 8008034:	a902      	add	r1, sp, #8
 8008036:	9301      	str	r3, [sp, #4]
 8008038:	f001 fe2c 	bl	8009c94 <_svfiprintf_r>
 800803c:	2200      	movs	r2, #0
 800803e:	9b02      	ldr	r3, [sp, #8]
 8008040:	701a      	strb	r2, [r3, #0]
 8008042:	b01c      	add	sp, #112	; 0x70
 8008044:	f85d eb04 	ldr.w	lr, [sp], #4
 8008048:	b003      	add	sp, #12
 800804a:	4770      	bx	lr
 800804c:	2000010c 	.word	0x2000010c
 8008050:	ffff0208 	.word	0xffff0208

08008054 <strstr>:
 8008054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008056:	780c      	ldrb	r4, [r1, #0]
 8008058:	b164      	cbz	r4, 8008074 <strstr+0x20>
 800805a:	4603      	mov	r3, r0
 800805c:	781a      	ldrb	r2, [r3, #0]
 800805e:	4618      	mov	r0, r3
 8008060:	1c5e      	adds	r6, r3, #1
 8008062:	b90a      	cbnz	r2, 8008068 <strstr+0x14>
 8008064:	4610      	mov	r0, r2
 8008066:	e005      	b.n	8008074 <strstr+0x20>
 8008068:	4294      	cmp	r4, r2
 800806a:	d108      	bne.n	800807e <strstr+0x2a>
 800806c:	460d      	mov	r5, r1
 800806e:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8008072:	b902      	cbnz	r2, 8008076 <strstr+0x22>
 8008074:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008076:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800807a:	4297      	cmp	r7, r2
 800807c:	d0f7      	beq.n	800806e <strstr+0x1a>
 800807e:	4633      	mov	r3, r6
 8008080:	e7ec      	b.n	800805c <strstr+0x8>
	...

08008084 <__swbuf_r>:
 8008084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008086:	460e      	mov	r6, r1
 8008088:	4614      	mov	r4, r2
 800808a:	4605      	mov	r5, r0
 800808c:	b118      	cbz	r0, 8008096 <__swbuf_r+0x12>
 800808e:	6983      	ldr	r3, [r0, #24]
 8008090:	b90b      	cbnz	r3, 8008096 <__swbuf_r+0x12>
 8008092:	f001 f84d 	bl	8009130 <__sinit>
 8008096:	4b21      	ldr	r3, [pc, #132]	; (800811c <__swbuf_r+0x98>)
 8008098:	429c      	cmp	r4, r3
 800809a:	d12b      	bne.n	80080f4 <__swbuf_r+0x70>
 800809c:	686c      	ldr	r4, [r5, #4]
 800809e:	69a3      	ldr	r3, [r4, #24]
 80080a0:	60a3      	str	r3, [r4, #8]
 80080a2:	89a3      	ldrh	r3, [r4, #12]
 80080a4:	071a      	lsls	r2, r3, #28
 80080a6:	d52f      	bpl.n	8008108 <__swbuf_r+0x84>
 80080a8:	6923      	ldr	r3, [r4, #16]
 80080aa:	b36b      	cbz	r3, 8008108 <__swbuf_r+0x84>
 80080ac:	6923      	ldr	r3, [r4, #16]
 80080ae:	6820      	ldr	r0, [r4, #0]
 80080b0:	b2f6      	uxtb	r6, r6
 80080b2:	1ac0      	subs	r0, r0, r3
 80080b4:	6963      	ldr	r3, [r4, #20]
 80080b6:	4637      	mov	r7, r6
 80080b8:	4283      	cmp	r3, r0
 80080ba:	dc04      	bgt.n	80080c6 <__swbuf_r+0x42>
 80080bc:	4621      	mov	r1, r4
 80080be:	4628      	mov	r0, r5
 80080c0:	f000 ffa2 	bl	8009008 <_fflush_r>
 80080c4:	bb30      	cbnz	r0, 8008114 <__swbuf_r+0x90>
 80080c6:	68a3      	ldr	r3, [r4, #8]
 80080c8:	3001      	adds	r0, #1
 80080ca:	3b01      	subs	r3, #1
 80080cc:	60a3      	str	r3, [r4, #8]
 80080ce:	6823      	ldr	r3, [r4, #0]
 80080d0:	1c5a      	adds	r2, r3, #1
 80080d2:	6022      	str	r2, [r4, #0]
 80080d4:	701e      	strb	r6, [r3, #0]
 80080d6:	6963      	ldr	r3, [r4, #20]
 80080d8:	4283      	cmp	r3, r0
 80080da:	d004      	beq.n	80080e6 <__swbuf_r+0x62>
 80080dc:	89a3      	ldrh	r3, [r4, #12]
 80080de:	07db      	lsls	r3, r3, #31
 80080e0:	d506      	bpl.n	80080f0 <__swbuf_r+0x6c>
 80080e2:	2e0a      	cmp	r6, #10
 80080e4:	d104      	bne.n	80080f0 <__swbuf_r+0x6c>
 80080e6:	4621      	mov	r1, r4
 80080e8:	4628      	mov	r0, r5
 80080ea:	f000 ff8d 	bl	8009008 <_fflush_r>
 80080ee:	b988      	cbnz	r0, 8008114 <__swbuf_r+0x90>
 80080f0:	4638      	mov	r0, r7
 80080f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080f4:	4b0a      	ldr	r3, [pc, #40]	; (8008120 <__swbuf_r+0x9c>)
 80080f6:	429c      	cmp	r4, r3
 80080f8:	d101      	bne.n	80080fe <__swbuf_r+0x7a>
 80080fa:	68ac      	ldr	r4, [r5, #8]
 80080fc:	e7cf      	b.n	800809e <__swbuf_r+0x1a>
 80080fe:	4b09      	ldr	r3, [pc, #36]	; (8008124 <__swbuf_r+0xa0>)
 8008100:	429c      	cmp	r4, r3
 8008102:	bf08      	it	eq
 8008104:	68ec      	ldreq	r4, [r5, #12]
 8008106:	e7ca      	b.n	800809e <__swbuf_r+0x1a>
 8008108:	4621      	mov	r1, r4
 800810a:	4628      	mov	r0, r5
 800810c:	f000 f80c 	bl	8008128 <__swsetup_r>
 8008110:	2800      	cmp	r0, #0
 8008112:	d0cb      	beq.n	80080ac <__swbuf_r+0x28>
 8008114:	f04f 37ff 	mov.w	r7, #4294967295
 8008118:	e7ea      	b.n	80080f0 <__swbuf_r+0x6c>
 800811a:	bf00      	nop
 800811c:	0800aa48 	.word	0x0800aa48
 8008120:	0800aa68 	.word	0x0800aa68
 8008124:	0800aa28 	.word	0x0800aa28

08008128 <__swsetup_r>:
 8008128:	4b32      	ldr	r3, [pc, #200]	; (80081f4 <__swsetup_r+0xcc>)
 800812a:	b570      	push	{r4, r5, r6, lr}
 800812c:	681d      	ldr	r5, [r3, #0]
 800812e:	4606      	mov	r6, r0
 8008130:	460c      	mov	r4, r1
 8008132:	b125      	cbz	r5, 800813e <__swsetup_r+0x16>
 8008134:	69ab      	ldr	r3, [r5, #24]
 8008136:	b913      	cbnz	r3, 800813e <__swsetup_r+0x16>
 8008138:	4628      	mov	r0, r5
 800813a:	f000 fff9 	bl	8009130 <__sinit>
 800813e:	4b2e      	ldr	r3, [pc, #184]	; (80081f8 <__swsetup_r+0xd0>)
 8008140:	429c      	cmp	r4, r3
 8008142:	d10f      	bne.n	8008164 <__swsetup_r+0x3c>
 8008144:	686c      	ldr	r4, [r5, #4]
 8008146:	89a3      	ldrh	r3, [r4, #12]
 8008148:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800814c:	0719      	lsls	r1, r3, #28
 800814e:	d42c      	bmi.n	80081aa <__swsetup_r+0x82>
 8008150:	06dd      	lsls	r5, r3, #27
 8008152:	d411      	bmi.n	8008178 <__swsetup_r+0x50>
 8008154:	2309      	movs	r3, #9
 8008156:	6033      	str	r3, [r6, #0]
 8008158:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800815c:	f04f 30ff 	mov.w	r0, #4294967295
 8008160:	81a3      	strh	r3, [r4, #12]
 8008162:	e03e      	b.n	80081e2 <__swsetup_r+0xba>
 8008164:	4b25      	ldr	r3, [pc, #148]	; (80081fc <__swsetup_r+0xd4>)
 8008166:	429c      	cmp	r4, r3
 8008168:	d101      	bne.n	800816e <__swsetup_r+0x46>
 800816a:	68ac      	ldr	r4, [r5, #8]
 800816c:	e7eb      	b.n	8008146 <__swsetup_r+0x1e>
 800816e:	4b24      	ldr	r3, [pc, #144]	; (8008200 <__swsetup_r+0xd8>)
 8008170:	429c      	cmp	r4, r3
 8008172:	bf08      	it	eq
 8008174:	68ec      	ldreq	r4, [r5, #12]
 8008176:	e7e6      	b.n	8008146 <__swsetup_r+0x1e>
 8008178:	0758      	lsls	r0, r3, #29
 800817a:	d512      	bpl.n	80081a2 <__swsetup_r+0x7a>
 800817c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800817e:	b141      	cbz	r1, 8008192 <__swsetup_r+0x6a>
 8008180:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008184:	4299      	cmp	r1, r3
 8008186:	d002      	beq.n	800818e <__swsetup_r+0x66>
 8008188:	4630      	mov	r0, r6
 800818a:	f001 fc81 	bl	8009a90 <_free_r>
 800818e:	2300      	movs	r3, #0
 8008190:	6363      	str	r3, [r4, #52]	; 0x34
 8008192:	89a3      	ldrh	r3, [r4, #12]
 8008194:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008198:	81a3      	strh	r3, [r4, #12]
 800819a:	2300      	movs	r3, #0
 800819c:	6063      	str	r3, [r4, #4]
 800819e:	6923      	ldr	r3, [r4, #16]
 80081a0:	6023      	str	r3, [r4, #0]
 80081a2:	89a3      	ldrh	r3, [r4, #12]
 80081a4:	f043 0308 	orr.w	r3, r3, #8
 80081a8:	81a3      	strh	r3, [r4, #12]
 80081aa:	6923      	ldr	r3, [r4, #16]
 80081ac:	b94b      	cbnz	r3, 80081c2 <__swsetup_r+0x9a>
 80081ae:	89a3      	ldrh	r3, [r4, #12]
 80081b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80081b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081b8:	d003      	beq.n	80081c2 <__swsetup_r+0x9a>
 80081ba:	4621      	mov	r1, r4
 80081bc:	4630      	mov	r0, r6
 80081be:	f001 f881 	bl	80092c4 <__smakebuf_r>
 80081c2:	89a0      	ldrh	r0, [r4, #12]
 80081c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80081c8:	f010 0301 	ands.w	r3, r0, #1
 80081cc:	d00a      	beq.n	80081e4 <__swsetup_r+0xbc>
 80081ce:	2300      	movs	r3, #0
 80081d0:	60a3      	str	r3, [r4, #8]
 80081d2:	6963      	ldr	r3, [r4, #20]
 80081d4:	425b      	negs	r3, r3
 80081d6:	61a3      	str	r3, [r4, #24]
 80081d8:	6923      	ldr	r3, [r4, #16]
 80081da:	b943      	cbnz	r3, 80081ee <__swsetup_r+0xc6>
 80081dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80081e0:	d1ba      	bne.n	8008158 <__swsetup_r+0x30>
 80081e2:	bd70      	pop	{r4, r5, r6, pc}
 80081e4:	0781      	lsls	r1, r0, #30
 80081e6:	bf58      	it	pl
 80081e8:	6963      	ldrpl	r3, [r4, #20]
 80081ea:	60a3      	str	r3, [r4, #8]
 80081ec:	e7f4      	b.n	80081d8 <__swsetup_r+0xb0>
 80081ee:	2000      	movs	r0, #0
 80081f0:	e7f7      	b.n	80081e2 <__swsetup_r+0xba>
 80081f2:	bf00      	nop
 80081f4:	2000010c 	.word	0x2000010c
 80081f8:	0800aa48 	.word	0x0800aa48
 80081fc:	0800aa68 	.word	0x0800aa68
 8008200:	0800aa28 	.word	0x0800aa28

08008204 <quorem>:
 8008204:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008208:	6903      	ldr	r3, [r0, #16]
 800820a:	690c      	ldr	r4, [r1, #16]
 800820c:	4607      	mov	r7, r0
 800820e:	42a3      	cmp	r3, r4
 8008210:	f2c0 8083 	blt.w	800831a <quorem+0x116>
 8008214:	3c01      	subs	r4, #1
 8008216:	f100 0514 	add.w	r5, r0, #20
 800821a:	f101 0814 	add.w	r8, r1, #20
 800821e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008222:	9301      	str	r3, [sp, #4]
 8008224:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008228:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800822c:	3301      	adds	r3, #1
 800822e:	429a      	cmp	r2, r3
 8008230:	fbb2 f6f3 	udiv	r6, r2, r3
 8008234:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008238:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800823c:	d332      	bcc.n	80082a4 <quorem+0xa0>
 800823e:	f04f 0e00 	mov.w	lr, #0
 8008242:	4640      	mov	r0, r8
 8008244:	46ac      	mov	ip, r5
 8008246:	46f2      	mov	sl, lr
 8008248:	f850 2b04 	ldr.w	r2, [r0], #4
 800824c:	b293      	uxth	r3, r2
 800824e:	fb06 e303 	mla	r3, r6, r3, lr
 8008252:	0c12      	lsrs	r2, r2, #16
 8008254:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008258:	fb06 e202 	mla	r2, r6, r2, lr
 800825c:	b29b      	uxth	r3, r3
 800825e:	ebaa 0303 	sub.w	r3, sl, r3
 8008262:	f8dc a000 	ldr.w	sl, [ip]
 8008266:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800826a:	fa1f fa8a 	uxth.w	sl, sl
 800826e:	4453      	add	r3, sl
 8008270:	fa1f fa82 	uxth.w	sl, r2
 8008274:	f8dc 2000 	ldr.w	r2, [ip]
 8008278:	4581      	cmp	r9, r0
 800827a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800827e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008282:	b29b      	uxth	r3, r3
 8008284:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008288:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800828c:	f84c 3b04 	str.w	r3, [ip], #4
 8008290:	d2da      	bcs.n	8008248 <quorem+0x44>
 8008292:	f855 300b 	ldr.w	r3, [r5, fp]
 8008296:	b92b      	cbnz	r3, 80082a4 <quorem+0xa0>
 8008298:	9b01      	ldr	r3, [sp, #4]
 800829a:	3b04      	subs	r3, #4
 800829c:	429d      	cmp	r5, r3
 800829e:	461a      	mov	r2, r3
 80082a0:	d32f      	bcc.n	8008302 <quorem+0xfe>
 80082a2:	613c      	str	r4, [r7, #16]
 80082a4:	4638      	mov	r0, r7
 80082a6:	f001 fadd 	bl	8009864 <__mcmp>
 80082aa:	2800      	cmp	r0, #0
 80082ac:	db25      	blt.n	80082fa <quorem+0xf6>
 80082ae:	4628      	mov	r0, r5
 80082b0:	f04f 0c00 	mov.w	ip, #0
 80082b4:	3601      	adds	r6, #1
 80082b6:	f858 1b04 	ldr.w	r1, [r8], #4
 80082ba:	f8d0 e000 	ldr.w	lr, [r0]
 80082be:	b28b      	uxth	r3, r1
 80082c0:	ebac 0303 	sub.w	r3, ip, r3
 80082c4:	fa1f f28e 	uxth.w	r2, lr
 80082c8:	4413      	add	r3, r2
 80082ca:	0c0a      	lsrs	r2, r1, #16
 80082cc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80082d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80082d4:	b29b      	uxth	r3, r3
 80082d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80082da:	45c1      	cmp	r9, r8
 80082dc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80082e0:	f840 3b04 	str.w	r3, [r0], #4
 80082e4:	d2e7      	bcs.n	80082b6 <quorem+0xb2>
 80082e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80082ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80082ee:	b922      	cbnz	r2, 80082fa <quorem+0xf6>
 80082f0:	3b04      	subs	r3, #4
 80082f2:	429d      	cmp	r5, r3
 80082f4:	461a      	mov	r2, r3
 80082f6:	d30a      	bcc.n	800830e <quorem+0x10a>
 80082f8:	613c      	str	r4, [r7, #16]
 80082fa:	4630      	mov	r0, r6
 80082fc:	b003      	add	sp, #12
 80082fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008302:	6812      	ldr	r2, [r2, #0]
 8008304:	3b04      	subs	r3, #4
 8008306:	2a00      	cmp	r2, #0
 8008308:	d1cb      	bne.n	80082a2 <quorem+0x9e>
 800830a:	3c01      	subs	r4, #1
 800830c:	e7c6      	b.n	800829c <quorem+0x98>
 800830e:	6812      	ldr	r2, [r2, #0]
 8008310:	3b04      	subs	r3, #4
 8008312:	2a00      	cmp	r2, #0
 8008314:	d1f0      	bne.n	80082f8 <quorem+0xf4>
 8008316:	3c01      	subs	r4, #1
 8008318:	e7eb      	b.n	80082f2 <quorem+0xee>
 800831a:	2000      	movs	r0, #0
 800831c:	e7ee      	b.n	80082fc <quorem+0xf8>
	...

08008320 <_dtoa_r>:
 8008320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008324:	4616      	mov	r6, r2
 8008326:	461f      	mov	r7, r3
 8008328:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800832a:	b099      	sub	sp, #100	; 0x64
 800832c:	4605      	mov	r5, r0
 800832e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008332:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8008336:	b974      	cbnz	r4, 8008356 <_dtoa_r+0x36>
 8008338:	2010      	movs	r0, #16
 800833a:	f001 f803 	bl	8009344 <malloc>
 800833e:	4602      	mov	r2, r0
 8008340:	6268      	str	r0, [r5, #36]	; 0x24
 8008342:	b920      	cbnz	r0, 800834e <_dtoa_r+0x2e>
 8008344:	21ea      	movs	r1, #234	; 0xea
 8008346:	4bae      	ldr	r3, [pc, #696]	; (8008600 <_dtoa_r+0x2e0>)
 8008348:	48ae      	ldr	r0, [pc, #696]	; (8008604 <_dtoa_r+0x2e4>)
 800834a:	f001 ff61 	bl	800a210 <__assert_func>
 800834e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008352:	6004      	str	r4, [r0, #0]
 8008354:	60c4      	str	r4, [r0, #12]
 8008356:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008358:	6819      	ldr	r1, [r3, #0]
 800835a:	b151      	cbz	r1, 8008372 <_dtoa_r+0x52>
 800835c:	685a      	ldr	r2, [r3, #4]
 800835e:	2301      	movs	r3, #1
 8008360:	4093      	lsls	r3, r2
 8008362:	604a      	str	r2, [r1, #4]
 8008364:	608b      	str	r3, [r1, #8]
 8008366:	4628      	mov	r0, r5
 8008368:	f001 f842 	bl	80093f0 <_Bfree>
 800836c:	2200      	movs	r2, #0
 800836e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008370:	601a      	str	r2, [r3, #0]
 8008372:	1e3b      	subs	r3, r7, #0
 8008374:	bfaf      	iteee	ge
 8008376:	2300      	movge	r3, #0
 8008378:	2201      	movlt	r2, #1
 800837a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800837e:	9305      	strlt	r3, [sp, #20]
 8008380:	bfa8      	it	ge
 8008382:	f8c8 3000 	strge.w	r3, [r8]
 8008386:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800838a:	4b9f      	ldr	r3, [pc, #636]	; (8008608 <_dtoa_r+0x2e8>)
 800838c:	bfb8      	it	lt
 800838e:	f8c8 2000 	strlt.w	r2, [r8]
 8008392:	ea33 0309 	bics.w	r3, r3, r9
 8008396:	d119      	bne.n	80083cc <_dtoa_r+0xac>
 8008398:	f242 730f 	movw	r3, #9999	; 0x270f
 800839c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800839e:	6013      	str	r3, [r2, #0]
 80083a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80083a4:	4333      	orrs	r3, r6
 80083a6:	f000 8580 	beq.w	8008eaa <_dtoa_r+0xb8a>
 80083aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80083ac:	b953      	cbnz	r3, 80083c4 <_dtoa_r+0xa4>
 80083ae:	4b97      	ldr	r3, [pc, #604]	; (800860c <_dtoa_r+0x2ec>)
 80083b0:	e022      	b.n	80083f8 <_dtoa_r+0xd8>
 80083b2:	4b97      	ldr	r3, [pc, #604]	; (8008610 <_dtoa_r+0x2f0>)
 80083b4:	9308      	str	r3, [sp, #32]
 80083b6:	3308      	adds	r3, #8
 80083b8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80083ba:	6013      	str	r3, [r2, #0]
 80083bc:	9808      	ldr	r0, [sp, #32]
 80083be:	b019      	add	sp, #100	; 0x64
 80083c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083c4:	4b91      	ldr	r3, [pc, #580]	; (800860c <_dtoa_r+0x2ec>)
 80083c6:	9308      	str	r3, [sp, #32]
 80083c8:	3303      	adds	r3, #3
 80083ca:	e7f5      	b.n	80083b8 <_dtoa_r+0x98>
 80083cc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80083d0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80083d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80083d8:	2200      	movs	r2, #0
 80083da:	2300      	movs	r3, #0
 80083dc:	f7f8 fb5a 	bl	8000a94 <__aeabi_dcmpeq>
 80083e0:	4680      	mov	r8, r0
 80083e2:	b158      	cbz	r0, 80083fc <_dtoa_r+0xdc>
 80083e4:	2301      	movs	r3, #1
 80083e6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80083e8:	6013      	str	r3, [r2, #0]
 80083ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	f000 8559 	beq.w	8008ea4 <_dtoa_r+0xb84>
 80083f2:	4888      	ldr	r0, [pc, #544]	; (8008614 <_dtoa_r+0x2f4>)
 80083f4:	6018      	str	r0, [r3, #0]
 80083f6:	1e43      	subs	r3, r0, #1
 80083f8:	9308      	str	r3, [sp, #32]
 80083fa:	e7df      	b.n	80083bc <_dtoa_r+0x9c>
 80083fc:	ab16      	add	r3, sp, #88	; 0x58
 80083fe:	9301      	str	r3, [sp, #4]
 8008400:	ab17      	add	r3, sp, #92	; 0x5c
 8008402:	9300      	str	r3, [sp, #0]
 8008404:	4628      	mov	r0, r5
 8008406:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800840a:	f001 fad7 	bl	80099bc <__d2b>
 800840e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008412:	4682      	mov	sl, r0
 8008414:	2c00      	cmp	r4, #0
 8008416:	d07e      	beq.n	8008516 <_dtoa_r+0x1f6>
 8008418:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800841c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800841e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8008422:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008426:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800842a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800842e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8008432:	2200      	movs	r2, #0
 8008434:	4b78      	ldr	r3, [pc, #480]	; (8008618 <_dtoa_r+0x2f8>)
 8008436:	f7f7 ff0d 	bl	8000254 <__aeabi_dsub>
 800843a:	a36b      	add	r3, pc, #428	; (adr r3, 80085e8 <_dtoa_r+0x2c8>)
 800843c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008440:	f7f8 f8c0 	bl	80005c4 <__aeabi_dmul>
 8008444:	a36a      	add	r3, pc, #424	; (adr r3, 80085f0 <_dtoa_r+0x2d0>)
 8008446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800844a:	f7f7 ff05 	bl	8000258 <__adddf3>
 800844e:	4606      	mov	r6, r0
 8008450:	4620      	mov	r0, r4
 8008452:	460f      	mov	r7, r1
 8008454:	f7f8 f84c 	bl	80004f0 <__aeabi_i2d>
 8008458:	a367      	add	r3, pc, #412	; (adr r3, 80085f8 <_dtoa_r+0x2d8>)
 800845a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800845e:	f7f8 f8b1 	bl	80005c4 <__aeabi_dmul>
 8008462:	4602      	mov	r2, r0
 8008464:	460b      	mov	r3, r1
 8008466:	4630      	mov	r0, r6
 8008468:	4639      	mov	r1, r7
 800846a:	f7f7 fef5 	bl	8000258 <__adddf3>
 800846e:	4606      	mov	r6, r0
 8008470:	460f      	mov	r7, r1
 8008472:	f7f8 fb57 	bl	8000b24 <__aeabi_d2iz>
 8008476:	2200      	movs	r2, #0
 8008478:	4681      	mov	r9, r0
 800847a:	2300      	movs	r3, #0
 800847c:	4630      	mov	r0, r6
 800847e:	4639      	mov	r1, r7
 8008480:	f7f8 fb12 	bl	8000aa8 <__aeabi_dcmplt>
 8008484:	b148      	cbz	r0, 800849a <_dtoa_r+0x17a>
 8008486:	4648      	mov	r0, r9
 8008488:	f7f8 f832 	bl	80004f0 <__aeabi_i2d>
 800848c:	4632      	mov	r2, r6
 800848e:	463b      	mov	r3, r7
 8008490:	f7f8 fb00 	bl	8000a94 <__aeabi_dcmpeq>
 8008494:	b908      	cbnz	r0, 800849a <_dtoa_r+0x17a>
 8008496:	f109 39ff 	add.w	r9, r9, #4294967295
 800849a:	f1b9 0f16 	cmp.w	r9, #22
 800849e:	d857      	bhi.n	8008550 <_dtoa_r+0x230>
 80084a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80084a4:	4b5d      	ldr	r3, [pc, #372]	; (800861c <_dtoa_r+0x2fc>)
 80084a6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80084aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ae:	f7f8 fafb 	bl	8000aa8 <__aeabi_dcmplt>
 80084b2:	2800      	cmp	r0, #0
 80084b4:	d04e      	beq.n	8008554 <_dtoa_r+0x234>
 80084b6:	2300      	movs	r3, #0
 80084b8:	f109 39ff 	add.w	r9, r9, #4294967295
 80084bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80084be:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80084c0:	1b1c      	subs	r4, r3, r4
 80084c2:	1e63      	subs	r3, r4, #1
 80084c4:	9309      	str	r3, [sp, #36]	; 0x24
 80084c6:	bf49      	itett	mi
 80084c8:	f1c4 0301 	rsbmi	r3, r4, #1
 80084cc:	2300      	movpl	r3, #0
 80084ce:	9306      	strmi	r3, [sp, #24]
 80084d0:	2300      	movmi	r3, #0
 80084d2:	bf54      	ite	pl
 80084d4:	9306      	strpl	r3, [sp, #24]
 80084d6:	9309      	strmi	r3, [sp, #36]	; 0x24
 80084d8:	f1b9 0f00 	cmp.w	r9, #0
 80084dc:	db3c      	blt.n	8008558 <_dtoa_r+0x238>
 80084de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084e0:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80084e4:	444b      	add	r3, r9
 80084e6:	9309      	str	r3, [sp, #36]	; 0x24
 80084e8:	2300      	movs	r3, #0
 80084ea:	930a      	str	r3, [sp, #40]	; 0x28
 80084ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80084ee:	2b09      	cmp	r3, #9
 80084f0:	d86c      	bhi.n	80085cc <_dtoa_r+0x2ac>
 80084f2:	2b05      	cmp	r3, #5
 80084f4:	bfc4      	itt	gt
 80084f6:	3b04      	subgt	r3, #4
 80084f8:	9322      	strgt	r3, [sp, #136]	; 0x88
 80084fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80084fc:	bfc8      	it	gt
 80084fe:	2400      	movgt	r4, #0
 8008500:	f1a3 0302 	sub.w	r3, r3, #2
 8008504:	bfd8      	it	le
 8008506:	2401      	movle	r4, #1
 8008508:	2b03      	cmp	r3, #3
 800850a:	f200 808b 	bhi.w	8008624 <_dtoa_r+0x304>
 800850e:	e8df f003 	tbb	[pc, r3]
 8008512:	4f2d      	.short	0x4f2d
 8008514:	5b4d      	.short	0x5b4d
 8008516:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800851a:	441c      	add	r4, r3
 800851c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8008520:	2b20      	cmp	r3, #32
 8008522:	bfc3      	ittte	gt
 8008524:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008528:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800852c:	fa09 f303 	lslgt.w	r3, r9, r3
 8008530:	f1c3 0320 	rsble	r3, r3, #32
 8008534:	bfc6      	itte	gt
 8008536:	fa26 f000 	lsrgt.w	r0, r6, r0
 800853a:	4318      	orrgt	r0, r3
 800853c:	fa06 f003 	lslle.w	r0, r6, r3
 8008540:	f7f7 ffc6 	bl	80004d0 <__aeabi_ui2d>
 8008544:	2301      	movs	r3, #1
 8008546:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800854a:	3c01      	subs	r4, #1
 800854c:	9313      	str	r3, [sp, #76]	; 0x4c
 800854e:	e770      	b.n	8008432 <_dtoa_r+0x112>
 8008550:	2301      	movs	r3, #1
 8008552:	e7b3      	b.n	80084bc <_dtoa_r+0x19c>
 8008554:	900f      	str	r0, [sp, #60]	; 0x3c
 8008556:	e7b2      	b.n	80084be <_dtoa_r+0x19e>
 8008558:	9b06      	ldr	r3, [sp, #24]
 800855a:	eba3 0309 	sub.w	r3, r3, r9
 800855e:	9306      	str	r3, [sp, #24]
 8008560:	f1c9 0300 	rsb	r3, r9, #0
 8008564:	930a      	str	r3, [sp, #40]	; 0x28
 8008566:	2300      	movs	r3, #0
 8008568:	930e      	str	r3, [sp, #56]	; 0x38
 800856a:	e7bf      	b.n	80084ec <_dtoa_r+0x1cc>
 800856c:	2300      	movs	r3, #0
 800856e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008570:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008572:	2b00      	cmp	r3, #0
 8008574:	dc59      	bgt.n	800862a <_dtoa_r+0x30a>
 8008576:	f04f 0b01 	mov.w	fp, #1
 800857a:	465b      	mov	r3, fp
 800857c:	f8cd b008 	str.w	fp, [sp, #8]
 8008580:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8008584:	2200      	movs	r2, #0
 8008586:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8008588:	6042      	str	r2, [r0, #4]
 800858a:	2204      	movs	r2, #4
 800858c:	f102 0614 	add.w	r6, r2, #20
 8008590:	429e      	cmp	r6, r3
 8008592:	6841      	ldr	r1, [r0, #4]
 8008594:	d94f      	bls.n	8008636 <_dtoa_r+0x316>
 8008596:	4628      	mov	r0, r5
 8008598:	f000 feea 	bl	8009370 <_Balloc>
 800859c:	9008      	str	r0, [sp, #32]
 800859e:	2800      	cmp	r0, #0
 80085a0:	d14d      	bne.n	800863e <_dtoa_r+0x31e>
 80085a2:	4602      	mov	r2, r0
 80085a4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80085a8:	4b1d      	ldr	r3, [pc, #116]	; (8008620 <_dtoa_r+0x300>)
 80085aa:	e6cd      	b.n	8008348 <_dtoa_r+0x28>
 80085ac:	2301      	movs	r3, #1
 80085ae:	e7de      	b.n	800856e <_dtoa_r+0x24e>
 80085b0:	2300      	movs	r3, #0
 80085b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80085b4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80085b6:	eb09 0b03 	add.w	fp, r9, r3
 80085ba:	f10b 0301 	add.w	r3, fp, #1
 80085be:	2b01      	cmp	r3, #1
 80085c0:	9302      	str	r3, [sp, #8]
 80085c2:	bfb8      	it	lt
 80085c4:	2301      	movlt	r3, #1
 80085c6:	e7dd      	b.n	8008584 <_dtoa_r+0x264>
 80085c8:	2301      	movs	r3, #1
 80085ca:	e7f2      	b.n	80085b2 <_dtoa_r+0x292>
 80085cc:	2401      	movs	r4, #1
 80085ce:	2300      	movs	r3, #0
 80085d0:	940b      	str	r4, [sp, #44]	; 0x2c
 80085d2:	9322      	str	r3, [sp, #136]	; 0x88
 80085d4:	f04f 3bff 	mov.w	fp, #4294967295
 80085d8:	2200      	movs	r2, #0
 80085da:	2312      	movs	r3, #18
 80085dc:	f8cd b008 	str.w	fp, [sp, #8]
 80085e0:	9223      	str	r2, [sp, #140]	; 0x8c
 80085e2:	e7cf      	b.n	8008584 <_dtoa_r+0x264>
 80085e4:	f3af 8000 	nop.w
 80085e8:	636f4361 	.word	0x636f4361
 80085ec:	3fd287a7 	.word	0x3fd287a7
 80085f0:	8b60c8b3 	.word	0x8b60c8b3
 80085f4:	3fc68a28 	.word	0x3fc68a28
 80085f8:	509f79fb 	.word	0x509f79fb
 80085fc:	3fd34413 	.word	0x3fd34413
 8008600:	0800a9a1 	.word	0x0800a9a1
 8008604:	0800a9b8 	.word	0x0800a9b8
 8008608:	7ff00000 	.word	0x7ff00000
 800860c:	0800a99d 	.word	0x0800a99d
 8008610:	0800a994 	.word	0x0800a994
 8008614:	0800a971 	.word	0x0800a971
 8008618:	3ff80000 	.word	0x3ff80000
 800861c:	0800ab10 	.word	0x0800ab10
 8008620:	0800aa17 	.word	0x0800aa17
 8008624:	2301      	movs	r3, #1
 8008626:	930b      	str	r3, [sp, #44]	; 0x2c
 8008628:	e7d4      	b.n	80085d4 <_dtoa_r+0x2b4>
 800862a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800862e:	465b      	mov	r3, fp
 8008630:	f8cd b008 	str.w	fp, [sp, #8]
 8008634:	e7a6      	b.n	8008584 <_dtoa_r+0x264>
 8008636:	3101      	adds	r1, #1
 8008638:	6041      	str	r1, [r0, #4]
 800863a:	0052      	lsls	r2, r2, #1
 800863c:	e7a6      	b.n	800858c <_dtoa_r+0x26c>
 800863e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008640:	9a08      	ldr	r2, [sp, #32]
 8008642:	601a      	str	r2, [r3, #0]
 8008644:	9b02      	ldr	r3, [sp, #8]
 8008646:	2b0e      	cmp	r3, #14
 8008648:	f200 80a8 	bhi.w	800879c <_dtoa_r+0x47c>
 800864c:	2c00      	cmp	r4, #0
 800864e:	f000 80a5 	beq.w	800879c <_dtoa_r+0x47c>
 8008652:	f1b9 0f00 	cmp.w	r9, #0
 8008656:	dd34      	ble.n	80086c2 <_dtoa_r+0x3a2>
 8008658:	4a9a      	ldr	r2, [pc, #616]	; (80088c4 <_dtoa_r+0x5a4>)
 800865a:	f009 030f 	and.w	r3, r9, #15
 800865e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008662:	f419 7f80 	tst.w	r9, #256	; 0x100
 8008666:	e9d3 3400 	ldrd	r3, r4, [r3]
 800866a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800866e:	ea4f 1429 	mov.w	r4, r9, asr #4
 8008672:	d016      	beq.n	80086a2 <_dtoa_r+0x382>
 8008674:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008678:	4b93      	ldr	r3, [pc, #588]	; (80088c8 <_dtoa_r+0x5a8>)
 800867a:	2703      	movs	r7, #3
 800867c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008680:	f7f8 f8ca 	bl	8000818 <__aeabi_ddiv>
 8008684:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008688:	f004 040f 	and.w	r4, r4, #15
 800868c:	4e8e      	ldr	r6, [pc, #568]	; (80088c8 <_dtoa_r+0x5a8>)
 800868e:	b954      	cbnz	r4, 80086a6 <_dtoa_r+0x386>
 8008690:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008694:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008698:	f7f8 f8be 	bl	8000818 <__aeabi_ddiv>
 800869c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80086a0:	e029      	b.n	80086f6 <_dtoa_r+0x3d6>
 80086a2:	2702      	movs	r7, #2
 80086a4:	e7f2      	b.n	800868c <_dtoa_r+0x36c>
 80086a6:	07e1      	lsls	r1, r4, #31
 80086a8:	d508      	bpl.n	80086bc <_dtoa_r+0x39c>
 80086aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80086ae:	e9d6 2300 	ldrd	r2, r3, [r6]
 80086b2:	f7f7 ff87 	bl	80005c4 <__aeabi_dmul>
 80086b6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80086ba:	3701      	adds	r7, #1
 80086bc:	1064      	asrs	r4, r4, #1
 80086be:	3608      	adds	r6, #8
 80086c0:	e7e5      	b.n	800868e <_dtoa_r+0x36e>
 80086c2:	f000 80a5 	beq.w	8008810 <_dtoa_r+0x4f0>
 80086c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80086ca:	f1c9 0400 	rsb	r4, r9, #0
 80086ce:	4b7d      	ldr	r3, [pc, #500]	; (80088c4 <_dtoa_r+0x5a4>)
 80086d0:	f004 020f 	and.w	r2, r4, #15
 80086d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80086d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086dc:	f7f7 ff72 	bl	80005c4 <__aeabi_dmul>
 80086e0:	2702      	movs	r7, #2
 80086e2:	2300      	movs	r3, #0
 80086e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80086e8:	4e77      	ldr	r6, [pc, #476]	; (80088c8 <_dtoa_r+0x5a8>)
 80086ea:	1124      	asrs	r4, r4, #4
 80086ec:	2c00      	cmp	r4, #0
 80086ee:	f040 8084 	bne.w	80087fa <_dtoa_r+0x4da>
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d1d2      	bne.n	800869c <_dtoa_r+0x37c>
 80086f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	f000 808b 	beq.w	8008814 <_dtoa_r+0x4f4>
 80086fe:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008702:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008706:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800870a:	2200      	movs	r2, #0
 800870c:	4b6f      	ldr	r3, [pc, #444]	; (80088cc <_dtoa_r+0x5ac>)
 800870e:	f7f8 f9cb 	bl	8000aa8 <__aeabi_dcmplt>
 8008712:	2800      	cmp	r0, #0
 8008714:	d07e      	beq.n	8008814 <_dtoa_r+0x4f4>
 8008716:	9b02      	ldr	r3, [sp, #8]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d07b      	beq.n	8008814 <_dtoa_r+0x4f4>
 800871c:	f1bb 0f00 	cmp.w	fp, #0
 8008720:	dd38      	ble.n	8008794 <_dtoa_r+0x474>
 8008722:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008726:	2200      	movs	r2, #0
 8008728:	4b69      	ldr	r3, [pc, #420]	; (80088d0 <_dtoa_r+0x5b0>)
 800872a:	f7f7 ff4b 	bl	80005c4 <__aeabi_dmul>
 800872e:	465c      	mov	r4, fp
 8008730:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008734:	f109 38ff 	add.w	r8, r9, #4294967295
 8008738:	3701      	adds	r7, #1
 800873a:	4638      	mov	r0, r7
 800873c:	f7f7 fed8 	bl	80004f0 <__aeabi_i2d>
 8008740:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008744:	f7f7 ff3e 	bl	80005c4 <__aeabi_dmul>
 8008748:	2200      	movs	r2, #0
 800874a:	4b62      	ldr	r3, [pc, #392]	; (80088d4 <_dtoa_r+0x5b4>)
 800874c:	f7f7 fd84 	bl	8000258 <__adddf3>
 8008750:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008754:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008758:	9611      	str	r6, [sp, #68]	; 0x44
 800875a:	2c00      	cmp	r4, #0
 800875c:	d15d      	bne.n	800881a <_dtoa_r+0x4fa>
 800875e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008762:	2200      	movs	r2, #0
 8008764:	4b5c      	ldr	r3, [pc, #368]	; (80088d8 <_dtoa_r+0x5b8>)
 8008766:	f7f7 fd75 	bl	8000254 <__aeabi_dsub>
 800876a:	4602      	mov	r2, r0
 800876c:	460b      	mov	r3, r1
 800876e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008772:	4633      	mov	r3, r6
 8008774:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008776:	f7f8 f9b5 	bl	8000ae4 <__aeabi_dcmpgt>
 800877a:	2800      	cmp	r0, #0
 800877c:	f040 829e 	bne.w	8008cbc <_dtoa_r+0x99c>
 8008780:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008784:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008786:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800878a:	f7f8 f98d 	bl	8000aa8 <__aeabi_dcmplt>
 800878e:	2800      	cmp	r0, #0
 8008790:	f040 8292 	bne.w	8008cb8 <_dtoa_r+0x998>
 8008794:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8008798:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800879c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800879e:	2b00      	cmp	r3, #0
 80087a0:	f2c0 8153 	blt.w	8008a4a <_dtoa_r+0x72a>
 80087a4:	f1b9 0f0e 	cmp.w	r9, #14
 80087a8:	f300 814f 	bgt.w	8008a4a <_dtoa_r+0x72a>
 80087ac:	4b45      	ldr	r3, [pc, #276]	; (80088c4 <_dtoa_r+0x5a4>)
 80087ae:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80087b2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80087b6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80087ba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80087bc:	2b00      	cmp	r3, #0
 80087be:	f280 80db 	bge.w	8008978 <_dtoa_r+0x658>
 80087c2:	9b02      	ldr	r3, [sp, #8]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	f300 80d7 	bgt.w	8008978 <_dtoa_r+0x658>
 80087ca:	f040 8274 	bne.w	8008cb6 <_dtoa_r+0x996>
 80087ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80087d2:	2200      	movs	r2, #0
 80087d4:	4b40      	ldr	r3, [pc, #256]	; (80088d8 <_dtoa_r+0x5b8>)
 80087d6:	f7f7 fef5 	bl	80005c4 <__aeabi_dmul>
 80087da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80087de:	f7f8 f977 	bl	8000ad0 <__aeabi_dcmpge>
 80087e2:	9c02      	ldr	r4, [sp, #8]
 80087e4:	4626      	mov	r6, r4
 80087e6:	2800      	cmp	r0, #0
 80087e8:	f040 824a 	bne.w	8008c80 <_dtoa_r+0x960>
 80087ec:	2331      	movs	r3, #49	; 0x31
 80087ee:	9f08      	ldr	r7, [sp, #32]
 80087f0:	f109 0901 	add.w	r9, r9, #1
 80087f4:	f807 3b01 	strb.w	r3, [r7], #1
 80087f8:	e246      	b.n	8008c88 <_dtoa_r+0x968>
 80087fa:	07e2      	lsls	r2, r4, #31
 80087fc:	d505      	bpl.n	800880a <_dtoa_r+0x4ea>
 80087fe:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008802:	f7f7 fedf 	bl	80005c4 <__aeabi_dmul>
 8008806:	2301      	movs	r3, #1
 8008808:	3701      	adds	r7, #1
 800880a:	1064      	asrs	r4, r4, #1
 800880c:	3608      	adds	r6, #8
 800880e:	e76d      	b.n	80086ec <_dtoa_r+0x3cc>
 8008810:	2702      	movs	r7, #2
 8008812:	e770      	b.n	80086f6 <_dtoa_r+0x3d6>
 8008814:	46c8      	mov	r8, r9
 8008816:	9c02      	ldr	r4, [sp, #8]
 8008818:	e78f      	b.n	800873a <_dtoa_r+0x41a>
 800881a:	9908      	ldr	r1, [sp, #32]
 800881c:	4b29      	ldr	r3, [pc, #164]	; (80088c4 <_dtoa_r+0x5a4>)
 800881e:	4421      	add	r1, r4
 8008820:	9112      	str	r1, [sp, #72]	; 0x48
 8008822:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008824:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008828:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800882c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008830:	2900      	cmp	r1, #0
 8008832:	d055      	beq.n	80088e0 <_dtoa_r+0x5c0>
 8008834:	2000      	movs	r0, #0
 8008836:	4929      	ldr	r1, [pc, #164]	; (80088dc <_dtoa_r+0x5bc>)
 8008838:	f7f7 ffee 	bl	8000818 <__aeabi_ddiv>
 800883c:	463b      	mov	r3, r7
 800883e:	4632      	mov	r2, r6
 8008840:	f7f7 fd08 	bl	8000254 <__aeabi_dsub>
 8008844:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008848:	9f08      	ldr	r7, [sp, #32]
 800884a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800884e:	f7f8 f969 	bl	8000b24 <__aeabi_d2iz>
 8008852:	4604      	mov	r4, r0
 8008854:	f7f7 fe4c 	bl	80004f0 <__aeabi_i2d>
 8008858:	4602      	mov	r2, r0
 800885a:	460b      	mov	r3, r1
 800885c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008860:	f7f7 fcf8 	bl	8000254 <__aeabi_dsub>
 8008864:	4602      	mov	r2, r0
 8008866:	460b      	mov	r3, r1
 8008868:	3430      	adds	r4, #48	; 0x30
 800886a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800886e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008872:	f807 4b01 	strb.w	r4, [r7], #1
 8008876:	f7f8 f917 	bl	8000aa8 <__aeabi_dcmplt>
 800887a:	2800      	cmp	r0, #0
 800887c:	d174      	bne.n	8008968 <_dtoa_r+0x648>
 800887e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008882:	2000      	movs	r0, #0
 8008884:	4911      	ldr	r1, [pc, #68]	; (80088cc <_dtoa_r+0x5ac>)
 8008886:	f7f7 fce5 	bl	8000254 <__aeabi_dsub>
 800888a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800888e:	f7f8 f90b 	bl	8000aa8 <__aeabi_dcmplt>
 8008892:	2800      	cmp	r0, #0
 8008894:	f040 80b6 	bne.w	8008a04 <_dtoa_r+0x6e4>
 8008898:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800889a:	429f      	cmp	r7, r3
 800889c:	f43f af7a 	beq.w	8008794 <_dtoa_r+0x474>
 80088a0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80088a4:	2200      	movs	r2, #0
 80088a6:	4b0a      	ldr	r3, [pc, #40]	; (80088d0 <_dtoa_r+0x5b0>)
 80088a8:	f7f7 fe8c 	bl	80005c4 <__aeabi_dmul>
 80088ac:	2200      	movs	r2, #0
 80088ae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80088b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80088b6:	4b06      	ldr	r3, [pc, #24]	; (80088d0 <_dtoa_r+0x5b0>)
 80088b8:	f7f7 fe84 	bl	80005c4 <__aeabi_dmul>
 80088bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80088c0:	e7c3      	b.n	800884a <_dtoa_r+0x52a>
 80088c2:	bf00      	nop
 80088c4:	0800ab10 	.word	0x0800ab10
 80088c8:	0800aae8 	.word	0x0800aae8
 80088cc:	3ff00000 	.word	0x3ff00000
 80088d0:	40240000 	.word	0x40240000
 80088d4:	401c0000 	.word	0x401c0000
 80088d8:	40140000 	.word	0x40140000
 80088dc:	3fe00000 	.word	0x3fe00000
 80088e0:	4630      	mov	r0, r6
 80088e2:	4639      	mov	r1, r7
 80088e4:	f7f7 fe6e 	bl	80005c4 <__aeabi_dmul>
 80088e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80088ea:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80088ee:	9c08      	ldr	r4, [sp, #32]
 80088f0:	9314      	str	r3, [sp, #80]	; 0x50
 80088f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80088f6:	f7f8 f915 	bl	8000b24 <__aeabi_d2iz>
 80088fa:	9015      	str	r0, [sp, #84]	; 0x54
 80088fc:	f7f7 fdf8 	bl	80004f0 <__aeabi_i2d>
 8008900:	4602      	mov	r2, r0
 8008902:	460b      	mov	r3, r1
 8008904:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008908:	f7f7 fca4 	bl	8000254 <__aeabi_dsub>
 800890c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800890e:	4606      	mov	r6, r0
 8008910:	3330      	adds	r3, #48	; 0x30
 8008912:	f804 3b01 	strb.w	r3, [r4], #1
 8008916:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008918:	460f      	mov	r7, r1
 800891a:	429c      	cmp	r4, r3
 800891c:	f04f 0200 	mov.w	r2, #0
 8008920:	d124      	bne.n	800896c <_dtoa_r+0x64c>
 8008922:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008926:	4bb3      	ldr	r3, [pc, #716]	; (8008bf4 <_dtoa_r+0x8d4>)
 8008928:	f7f7 fc96 	bl	8000258 <__adddf3>
 800892c:	4602      	mov	r2, r0
 800892e:	460b      	mov	r3, r1
 8008930:	4630      	mov	r0, r6
 8008932:	4639      	mov	r1, r7
 8008934:	f7f8 f8d6 	bl	8000ae4 <__aeabi_dcmpgt>
 8008938:	2800      	cmp	r0, #0
 800893a:	d162      	bne.n	8008a02 <_dtoa_r+0x6e2>
 800893c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008940:	2000      	movs	r0, #0
 8008942:	49ac      	ldr	r1, [pc, #688]	; (8008bf4 <_dtoa_r+0x8d4>)
 8008944:	f7f7 fc86 	bl	8000254 <__aeabi_dsub>
 8008948:	4602      	mov	r2, r0
 800894a:	460b      	mov	r3, r1
 800894c:	4630      	mov	r0, r6
 800894e:	4639      	mov	r1, r7
 8008950:	f7f8 f8aa 	bl	8000aa8 <__aeabi_dcmplt>
 8008954:	2800      	cmp	r0, #0
 8008956:	f43f af1d 	beq.w	8008794 <_dtoa_r+0x474>
 800895a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800895c:	1e7b      	subs	r3, r7, #1
 800895e:	9314      	str	r3, [sp, #80]	; 0x50
 8008960:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8008964:	2b30      	cmp	r3, #48	; 0x30
 8008966:	d0f8      	beq.n	800895a <_dtoa_r+0x63a>
 8008968:	46c1      	mov	r9, r8
 800896a:	e03a      	b.n	80089e2 <_dtoa_r+0x6c2>
 800896c:	4ba2      	ldr	r3, [pc, #648]	; (8008bf8 <_dtoa_r+0x8d8>)
 800896e:	f7f7 fe29 	bl	80005c4 <__aeabi_dmul>
 8008972:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008976:	e7bc      	b.n	80088f2 <_dtoa_r+0x5d2>
 8008978:	9f08      	ldr	r7, [sp, #32]
 800897a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800897e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008982:	f7f7 ff49 	bl	8000818 <__aeabi_ddiv>
 8008986:	f7f8 f8cd 	bl	8000b24 <__aeabi_d2iz>
 800898a:	4604      	mov	r4, r0
 800898c:	f7f7 fdb0 	bl	80004f0 <__aeabi_i2d>
 8008990:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008994:	f7f7 fe16 	bl	80005c4 <__aeabi_dmul>
 8008998:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800899c:	460b      	mov	r3, r1
 800899e:	4602      	mov	r2, r0
 80089a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80089a4:	f7f7 fc56 	bl	8000254 <__aeabi_dsub>
 80089a8:	f807 6b01 	strb.w	r6, [r7], #1
 80089ac:	9e08      	ldr	r6, [sp, #32]
 80089ae:	9b02      	ldr	r3, [sp, #8]
 80089b0:	1bbe      	subs	r6, r7, r6
 80089b2:	42b3      	cmp	r3, r6
 80089b4:	d13a      	bne.n	8008a2c <_dtoa_r+0x70c>
 80089b6:	4602      	mov	r2, r0
 80089b8:	460b      	mov	r3, r1
 80089ba:	f7f7 fc4d 	bl	8000258 <__adddf3>
 80089be:	4602      	mov	r2, r0
 80089c0:	460b      	mov	r3, r1
 80089c2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80089c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80089ca:	f7f8 f88b 	bl	8000ae4 <__aeabi_dcmpgt>
 80089ce:	bb58      	cbnz	r0, 8008a28 <_dtoa_r+0x708>
 80089d0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80089d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089d8:	f7f8 f85c 	bl	8000a94 <__aeabi_dcmpeq>
 80089dc:	b108      	cbz	r0, 80089e2 <_dtoa_r+0x6c2>
 80089de:	07e1      	lsls	r1, r4, #31
 80089e0:	d422      	bmi.n	8008a28 <_dtoa_r+0x708>
 80089e2:	4628      	mov	r0, r5
 80089e4:	4651      	mov	r1, sl
 80089e6:	f000 fd03 	bl	80093f0 <_Bfree>
 80089ea:	2300      	movs	r3, #0
 80089ec:	703b      	strb	r3, [r7, #0]
 80089ee:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80089f0:	f109 0001 	add.w	r0, r9, #1
 80089f4:	6018      	str	r0, [r3, #0]
 80089f6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	f43f acdf 	beq.w	80083bc <_dtoa_r+0x9c>
 80089fe:	601f      	str	r7, [r3, #0]
 8008a00:	e4dc      	b.n	80083bc <_dtoa_r+0x9c>
 8008a02:	4627      	mov	r7, r4
 8008a04:	463b      	mov	r3, r7
 8008a06:	461f      	mov	r7, r3
 8008a08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008a0c:	2a39      	cmp	r2, #57	; 0x39
 8008a0e:	d107      	bne.n	8008a20 <_dtoa_r+0x700>
 8008a10:	9a08      	ldr	r2, [sp, #32]
 8008a12:	429a      	cmp	r2, r3
 8008a14:	d1f7      	bne.n	8008a06 <_dtoa_r+0x6e6>
 8008a16:	2230      	movs	r2, #48	; 0x30
 8008a18:	9908      	ldr	r1, [sp, #32]
 8008a1a:	f108 0801 	add.w	r8, r8, #1
 8008a1e:	700a      	strb	r2, [r1, #0]
 8008a20:	781a      	ldrb	r2, [r3, #0]
 8008a22:	3201      	adds	r2, #1
 8008a24:	701a      	strb	r2, [r3, #0]
 8008a26:	e79f      	b.n	8008968 <_dtoa_r+0x648>
 8008a28:	46c8      	mov	r8, r9
 8008a2a:	e7eb      	b.n	8008a04 <_dtoa_r+0x6e4>
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	4b72      	ldr	r3, [pc, #456]	; (8008bf8 <_dtoa_r+0x8d8>)
 8008a30:	f7f7 fdc8 	bl	80005c4 <__aeabi_dmul>
 8008a34:	4602      	mov	r2, r0
 8008a36:	460b      	mov	r3, r1
 8008a38:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	2300      	movs	r3, #0
 8008a40:	f7f8 f828 	bl	8000a94 <__aeabi_dcmpeq>
 8008a44:	2800      	cmp	r0, #0
 8008a46:	d098      	beq.n	800897a <_dtoa_r+0x65a>
 8008a48:	e7cb      	b.n	80089e2 <_dtoa_r+0x6c2>
 8008a4a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008a4c:	2a00      	cmp	r2, #0
 8008a4e:	f000 80cd 	beq.w	8008bec <_dtoa_r+0x8cc>
 8008a52:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008a54:	2a01      	cmp	r2, #1
 8008a56:	f300 80af 	bgt.w	8008bb8 <_dtoa_r+0x898>
 8008a5a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008a5c:	2a00      	cmp	r2, #0
 8008a5e:	f000 80a7 	beq.w	8008bb0 <_dtoa_r+0x890>
 8008a62:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008a66:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008a68:	9f06      	ldr	r7, [sp, #24]
 8008a6a:	9a06      	ldr	r2, [sp, #24]
 8008a6c:	2101      	movs	r1, #1
 8008a6e:	441a      	add	r2, r3
 8008a70:	9206      	str	r2, [sp, #24]
 8008a72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a74:	4628      	mov	r0, r5
 8008a76:	441a      	add	r2, r3
 8008a78:	9209      	str	r2, [sp, #36]	; 0x24
 8008a7a:	f000 fd73 	bl	8009564 <__i2b>
 8008a7e:	4606      	mov	r6, r0
 8008a80:	2f00      	cmp	r7, #0
 8008a82:	dd0c      	ble.n	8008a9e <_dtoa_r+0x77e>
 8008a84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	dd09      	ble.n	8008a9e <_dtoa_r+0x77e>
 8008a8a:	42bb      	cmp	r3, r7
 8008a8c:	bfa8      	it	ge
 8008a8e:	463b      	movge	r3, r7
 8008a90:	9a06      	ldr	r2, [sp, #24]
 8008a92:	1aff      	subs	r7, r7, r3
 8008a94:	1ad2      	subs	r2, r2, r3
 8008a96:	9206      	str	r2, [sp, #24]
 8008a98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a9a:	1ad3      	subs	r3, r2, r3
 8008a9c:	9309      	str	r3, [sp, #36]	; 0x24
 8008a9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008aa0:	b1f3      	cbz	r3, 8008ae0 <_dtoa_r+0x7c0>
 8008aa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	f000 80a9 	beq.w	8008bfc <_dtoa_r+0x8dc>
 8008aaa:	2c00      	cmp	r4, #0
 8008aac:	dd10      	ble.n	8008ad0 <_dtoa_r+0x7b0>
 8008aae:	4631      	mov	r1, r6
 8008ab0:	4622      	mov	r2, r4
 8008ab2:	4628      	mov	r0, r5
 8008ab4:	f000 fe10 	bl	80096d8 <__pow5mult>
 8008ab8:	4652      	mov	r2, sl
 8008aba:	4601      	mov	r1, r0
 8008abc:	4606      	mov	r6, r0
 8008abe:	4628      	mov	r0, r5
 8008ac0:	f000 fd66 	bl	8009590 <__multiply>
 8008ac4:	4680      	mov	r8, r0
 8008ac6:	4651      	mov	r1, sl
 8008ac8:	4628      	mov	r0, r5
 8008aca:	f000 fc91 	bl	80093f0 <_Bfree>
 8008ace:	46c2      	mov	sl, r8
 8008ad0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ad2:	1b1a      	subs	r2, r3, r4
 8008ad4:	d004      	beq.n	8008ae0 <_dtoa_r+0x7c0>
 8008ad6:	4651      	mov	r1, sl
 8008ad8:	4628      	mov	r0, r5
 8008ada:	f000 fdfd 	bl	80096d8 <__pow5mult>
 8008ade:	4682      	mov	sl, r0
 8008ae0:	2101      	movs	r1, #1
 8008ae2:	4628      	mov	r0, r5
 8008ae4:	f000 fd3e 	bl	8009564 <__i2b>
 8008ae8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008aea:	4604      	mov	r4, r0
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	f340 8087 	ble.w	8008c00 <_dtoa_r+0x8e0>
 8008af2:	461a      	mov	r2, r3
 8008af4:	4601      	mov	r1, r0
 8008af6:	4628      	mov	r0, r5
 8008af8:	f000 fdee 	bl	80096d8 <__pow5mult>
 8008afc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008afe:	4604      	mov	r4, r0
 8008b00:	2b01      	cmp	r3, #1
 8008b02:	f340 8080 	ble.w	8008c06 <_dtoa_r+0x8e6>
 8008b06:	f04f 0800 	mov.w	r8, #0
 8008b0a:	6923      	ldr	r3, [r4, #16]
 8008b0c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008b10:	6918      	ldr	r0, [r3, #16]
 8008b12:	f000 fcd9 	bl	80094c8 <__hi0bits>
 8008b16:	f1c0 0020 	rsb	r0, r0, #32
 8008b1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b1c:	4418      	add	r0, r3
 8008b1e:	f010 001f 	ands.w	r0, r0, #31
 8008b22:	f000 8092 	beq.w	8008c4a <_dtoa_r+0x92a>
 8008b26:	f1c0 0320 	rsb	r3, r0, #32
 8008b2a:	2b04      	cmp	r3, #4
 8008b2c:	f340 808a 	ble.w	8008c44 <_dtoa_r+0x924>
 8008b30:	f1c0 001c 	rsb	r0, r0, #28
 8008b34:	9b06      	ldr	r3, [sp, #24]
 8008b36:	4407      	add	r7, r0
 8008b38:	4403      	add	r3, r0
 8008b3a:	9306      	str	r3, [sp, #24]
 8008b3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b3e:	4403      	add	r3, r0
 8008b40:	9309      	str	r3, [sp, #36]	; 0x24
 8008b42:	9b06      	ldr	r3, [sp, #24]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	dd05      	ble.n	8008b54 <_dtoa_r+0x834>
 8008b48:	4651      	mov	r1, sl
 8008b4a:	461a      	mov	r2, r3
 8008b4c:	4628      	mov	r0, r5
 8008b4e:	f000 fe1d 	bl	800978c <__lshift>
 8008b52:	4682      	mov	sl, r0
 8008b54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	dd05      	ble.n	8008b66 <_dtoa_r+0x846>
 8008b5a:	4621      	mov	r1, r4
 8008b5c:	461a      	mov	r2, r3
 8008b5e:	4628      	mov	r0, r5
 8008b60:	f000 fe14 	bl	800978c <__lshift>
 8008b64:	4604      	mov	r4, r0
 8008b66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d070      	beq.n	8008c4e <_dtoa_r+0x92e>
 8008b6c:	4621      	mov	r1, r4
 8008b6e:	4650      	mov	r0, sl
 8008b70:	f000 fe78 	bl	8009864 <__mcmp>
 8008b74:	2800      	cmp	r0, #0
 8008b76:	da6a      	bge.n	8008c4e <_dtoa_r+0x92e>
 8008b78:	2300      	movs	r3, #0
 8008b7a:	4651      	mov	r1, sl
 8008b7c:	220a      	movs	r2, #10
 8008b7e:	4628      	mov	r0, r5
 8008b80:	f000 fc58 	bl	8009434 <__multadd>
 8008b84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b86:	4682      	mov	sl, r0
 8008b88:	f109 39ff 	add.w	r9, r9, #4294967295
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	f000 8193 	beq.w	8008eb8 <_dtoa_r+0xb98>
 8008b92:	4631      	mov	r1, r6
 8008b94:	2300      	movs	r3, #0
 8008b96:	220a      	movs	r2, #10
 8008b98:	4628      	mov	r0, r5
 8008b9a:	f000 fc4b 	bl	8009434 <__multadd>
 8008b9e:	f1bb 0f00 	cmp.w	fp, #0
 8008ba2:	4606      	mov	r6, r0
 8008ba4:	f300 8093 	bgt.w	8008cce <_dtoa_r+0x9ae>
 8008ba8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008baa:	2b02      	cmp	r3, #2
 8008bac:	dc57      	bgt.n	8008c5e <_dtoa_r+0x93e>
 8008bae:	e08e      	b.n	8008cce <_dtoa_r+0x9ae>
 8008bb0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008bb2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008bb6:	e756      	b.n	8008a66 <_dtoa_r+0x746>
 8008bb8:	9b02      	ldr	r3, [sp, #8]
 8008bba:	1e5c      	subs	r4, r3, #1
 8008bbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bbe:	42a3      	cmp	r3, r4
 8008bc0:	bfb7      	itett	lt
 8008bc2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008bc4:	1b1c      	subge	r4, r3, r4
 8008bc6:	1ae2      	sublt	r2, r4, r3
 8008bc8:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008bca:	bfbe      	ittt	lt
 8008bcc:	940a      	strlt	r4, [sp, #40]	; 0x28
 8008bce:	189b      	addlt	r3, r3, r2
 8008bd0:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008bd2:	9b02      	ldr	r3, [sp, #8]
 8008bd4:	bfb8      	it	lt
 8008bd6:	2400      	movlt	r4, #0
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	bfbb      	ittet	lt
 8008bdc:	9b06      	ldrlt	r3, [sp, #24]
 8008bde:	9a02      	ldrlt	r2, [sp, #8]
 8008be0:	9f06      	ldrge	r7, [sp, #24]
 8008be2:	1a9f      	sublt	r7, r3, r2
 8008be4:	bfac      	ite	ge
 8008be6:	9b02      	ldrge	r3, [sp, #8]
 8008be8:	2300      	movlt	r3, #0
 8008bea:	e73e      	b.n	8008a6a <_dtoa_r+0x74a>
 8008bec:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008bee:	9f06      	ldr	r7, [sp, #24]
 8008bf0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8008bf2:	e745      	b.n	8008a80 <_dtoa_r+0x760>
 8008bf4:	3fe00000 	.word	0x3fe00000
 8008bf8:	40240000 	.word	0x40240000
 8008bfc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008bfe:	e76a      	b.n	8008ad6 <_dtoa_r+0x7b6>
 8008c00:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008c02:	2b01      	cmp	r3, #1
 8008c04:	dc19      	bgt.n	8008c3a <_dtoa_r+0x91a>
 8008c06:	9b04      	ldr	r3, [sp, #16]
 8008c08:	b9bb      	cbnz	r3, 8008c3a <_dtoa_r+0x91a>
 8008c0a:	9b05      	ldr	r3, [sp, #20]
 8008c0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c10:	b99b      	cbnz	r3, 8008c3a <_dtoa_r+0x91a>
 8008c12:	9b05      	ldr	r3, [sp, #20]
 8008c14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008c18:	0d1b      	lsrs	r3, r3, #20
 8008c1a:	051b      	lsls	r3, r3, #20
 8008c1c:	b183      	cbz	r3, 8008c40 <_dtoa_r+0x920>
 8008c1e:	f04f 0801 	mov.w	r8, #1
 8008c22:	9b06      	ldr	r3, [sp, #24]
 8008c24:	3301      	adds	r3, #1
 8008c26:	9306      	str	r3, [sp, #24]
 8008c28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c2a:	3301      	adds	r3, #1
 8008c2c:	9309      	str	r3, [sp, #36]	; 0x24
 8008c2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	f47f af6a 	bne.w	8008b0a <_dtoa_r+0x7ea>
 8008c36:	2001      	movs	r0, #1
 8008c38:	e76f      	b.n	8008b1a <_dtoa_r+0x7fa>
 8008c3a:	f04f 0800 	mov.w	r8, #0
 8008c3e:	e7f6      	b.n	8008c2e <_dtoa_r+0x90e>
 8008c40:	4698      	mov	r8, r3
 8008c42:	e7f4      	b.n	8008c2e <_dtoa_r+0x90e>
 8008c44:	f43f af7d 	beq.w	8008b42 <_dtoa_r+0x822>
 8008c48:	4618      	mov	r0, r3
 8008c4a:	301c      	adds	r0, #28
 8008c4c:	e772      	b.n	8008b34 <_dtoa_r+0x814>
 8008c4e:	9b02      	ldr	r3, [sp, #8]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	dc36      	bgt.n	8008cc2 <_dtoa_r+0x9a2>
 8008c54:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008c56:	2b02      	cmp	r3, #2
 8008c58:	dd33      	ble.n	8008cc2 <_dtoa_r+0x9a2>
 8008c5a:	f8dd b008 	ldr.w	fp, [sp, #8]
 8008c5e:	f1bb 0f00 	cmp.w	fp, #0
 8008c62:	d10d      	bne.n	8008c80 <_dtoa_r+0x960>
 8008c64:	4621      	mov	r1, r4
 8008c66:	465b      	mov	r3, fp
 8008c68:	2205      	movs	r2, #5
 8008c6a:	4628      	mov	r0, r5
 8008c6c:	f000 fbe2 	bl	8009434 <__multadd>
 8008c70:	4601      	mov	r1, r0
 8008c72:	4604      	mov	r4, r0
 8008c74:	4650      	mov	r0, sl
 8008c76:	f000 fdf5 	bl	8009864 <__mcmp>
 8008c7a:	2800      	cmp	r0, #0
 8008c7c:	f73f adb6 	bgt.w	80087ec <_dtoa_r+0x4cc>
 8008c80:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008c82:	9f08      	ldr	r7, [sp, #32]
 8008c84:	ea6f 0903 	mvn.w	r9, r3
 8008c88:	f04f 0800 	mov.w	r8, #0
 8008c8c:	4621      	mov	r1, r4
 8008c8e:	4628      	mov	r0, r5
 8008c90:	f000 fbae 	bl	80093f0 <_Bfree>
 8008c94:	2e00      	cmp	r6, #0
 8008c96:	f43f aea4 	beq.w	80089e2 <_dtoa_r+0x6c2>
 8008c9a:	f1b8 0f00 	cmp.w	r8, #0
 8008c9e:	d005      	beq.n	8008cac <_dtoa_r+0x98c>
 8008ca0:	45b0      	cmp	r8, r6
 8008ca2:	d003      	beq.n	8008cac <_dtoa_r+0x98c>
 8008ca4:	4641      	mov	r1, r8
 8008ca6:	4628      	mov	r0, r5
 8008ca8:	f000 fba2 	bl	80093f0 <_Bfree>
 8008cac:	4631      	mov	r1, r6
 8008cae:	4628      	mov	r0, r5
 8008cb0:	f000 fb9e 	bl	80093f0 <_Bfree>
 8008cb4:	e695      	b.n	80089e2 <_dtoa_r+0x6c2>
 8008cb6:	2400      	movs	r4, #0
 8008cb8:	4626      	mov	r6, r4
 8008cba:	e7e1      	b.n	8008c80 <_dtoa_r+0x960>
 8008cbc:	46c1      	mov	r9, r8
 8008cbe:	4626      	mov	r6, r4
 8008cc0:	e594      	b.n	80087ec <_dtoa_r+0x4cc>
 8008cc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008cc4:	f8dd b008 	ldr.w	fp, [sp, #8]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	f000 80fc 	beq.w	8008ec6 <_dtoa_r+0xba6>
 8008cce:	2f00      	cmp	r7, #0
 8008cd0:	dd05      	ble.n	8008cde <_dtoa_r+0x9be>
 8008cd2:	4631      	mov	r1, r6
 8008cd4:	463a      	mov	r2, r7
 8008cd6:	4628      	mov	r0, r5
 8008cd8:	f000 fd58 	bl	800978c <__lshift>
 8008cdc:	4606      	mov	r6, r0
 8008cde:	f1b8 0f00 	cmp.w	r8, #0
 8008ce2:	d05c      	beq.n	8008d9e <_dtoa_r+0xa7e>
 8008ce4:	4628      	mov	r0, r5
 8008ce6:	6871      	ldr	r1, [r6, #4]
 8008ce8:	f000 fb42 	bl	8009370 <_Balloc>
 8008cec:	4607      	mov	r7, r0
 8008cee:	b928      	cbnz	r0, 8008cfc <_dtoa_r+0x9dc>
 8008cf0:	4602      	mov	r2, r0
 8008cf2:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008cf6:	4b7e      	ldr	r3, [pc, #504]	; (8008ef0 <_dtoa_r+0xbd0>)
 8008cf8:	f7ff bb26 	b.w	8008348 <_dtoa_r+0x28>
 8008cfc:	6932      	ldr	r2, [r6, #16]
 8008cfe:	f106 010c 	add.w	r1, r6, #12
 8008d02:	3202      	adds	r2, #2
 8008d04:	0092      	lsls	r2, r2, #2
 8008d06:	300c      	adds	r0, #12
 8008d08:	f7fe fbba 	bl	8007480 <memcpy>
 8008d0c:	2201      	movs	r2, #1
 8008d0e:	4639      	mov	r1, r7
 8008d10:	4628      	mov	r0, r5
 8008d12:	f000 fd3b 	bl	800978c <__lshift>
 8008d16:	46b0      	mov	r8, r6
 8008d18:	4606      	mov	r6, r0
 8008d1a:	9b08      	ldr	r3, [sp, #32]
 8008d1c:	3301      	adds	r3, #1
 8008d1e:	9302      	str	r3, [sp, #8]
 8008d20:	9b08      	ldr	r3, [sp, #32]
 8008d22:	445b      	add	r3, fp
 8008d24:	930a      	str	r3, [sp, #40]	; 0x28
 8008d26:	9b04      	ldr	r3, [sp, #16]
 8008d28:	f003 0301 	and.w	r3, r3, #1
 8008d2c:	9309      	str	r3, [sp, #36]	; 0x24
 8008d2e:	9b02      	ldr	r3, [sp, #8]
 8008d30:	4621      	mov	r1, r4
 8008d32:	4650      	mov	r0, sl
 8008d34:	f103 3bff 	add.w	fp, r3, #4294967295
 8008d38:	f7ff fa64 	bl	8008204 <quorem>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	4641      	mov	r1, r8
 8008d40:	3330      	adds	r3, #48	; 0x30
 8008d42:	9004      	str	r0, [sp, #16]
 8008d44:	4650      	mov	r0, sl
 8008d46:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d48:	f000 fd8c 	bl	8009864 <__mcmp>
 8008d4c:	4632      	mov	r2, r6
 8008d4e:	9006      	str	r0, [sp, #24]
 8008d50:	4621      	mov	r1, r4
 8008d52:	4628      	mov	r0, r5
 8008d54:	f000 fda2 	bl	800989c <__mdiff>
 8008d58:	68c2      	ldr	r2, [r0, #12]
 8008d5a:	4607      	mov	r7, r0
 8008d5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d5e:	bb02      	cbnz	r2, 8008da2 <_dtoa_r+0xa82>
 8008d60:	4601      	mov	r1, r0
 8008d62:	4650      	mov	r0, sl
 8008d64:	f000 fd7e 	bl	8009864 <__mcmp>
 8008d68:	4602      	mov	r2, r0
 8008d6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d6c:	4639      	mov	r1, r7
 8008d6e:	4628      	mov	r0, r5
 8008d70:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8008d74:	f000 fb3c 	bl	80093f0 <_Bfree>
 8008d78:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008d7a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008d7c:	9f02      	ldr	r7, [sp, #8]
 8008d7e:	ea43 0102 	orr.w	r1, r3, r2
 8008d82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d84:	430b      	orrs	r3, r1
 8008d86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d88:	d10d      	bne.n	8008da6 <_dtoa_r+0xa86>
 8008d8a:	2b39      	cmp	r3, #57	; 0x39
 8008d8c:	d027      	beq.n	8008dde <_dtoa_r+0xabe>
 8008d8e:	9a06      	ldr	r2, [sp, #24]
 8008d90:	2a00      	cmp	r2, #0
 8008d92:	dd01      	ble.n	8008d98 <_dtoa_r+0xa78>
 8008d94:	9b04      	ldr	r3, [sp, #16]
 8008d96:	3331      	adds	r3, #49	; 0x31
 8008d98:	f88b 3000 	strb.w	r3, [fp]
 8008d9c:	e776      	b.n	8008c8c <_dtoa_r+0x96c>
 8008d9e:	4630      	mov	r0, r6
 8008da0:	e7b9      	b.n	8008d16 <_dtoa_r+0x9f6>
 8008da2:	2201      	movs	r2, #1
 8008da4:	e7e2      	b.n	8008d6c <_dtoa_r+0xa4c>
 8008da6:	9906      	ldr	r1, [sp, #24]
 8008da8:	2900      	cmp	r1, #0
 8008daa:	db04      	blt.n	8008db6 <_dtoa_r+0xa96>
 8008dac:	9822      	ldr	r0, [sp, #136]	; 0x88
 8008dae:	4301      	orrs	r1, r0
 8008db0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008db2:	4301      	orrs	r1, r0
 8008db4:	d120      	bne.n	8008df8 <_dtoa_r+0xad8>
 8008db6:	2a00      	cmp	r2, #0
 8008db8:	ddee      	ble.n	8008d98 <_dtoa_r+0xa78>
 8008dba:	4651      	mov	r1, sl
 8008dbc:	2201      	movs	r2, #1
 8008dbe:	4628      	mov	r0, r5
 8008dc0:	9302      	str	r3, [sp, #8]
 8008dc2:	f000 fce3 	bl	800978c <__lshift>
 8008dc6:	4621      	mov	r1, r4
 8008dc8:	4682      	mov	sl, r0
 8008dca:	f000 fd4b 	bl	8009864 <__mcmp>
 8008dce:	2800      	cmp	r0, #0
 8008dd0:	9b02      	ldr	r3, [sp, #8]
 8008dd2:	dc02      	bgt.n	8008dda <_dtoa_r+0xaba>
 8008dd4:	d1e0      	bne.n	8008d98 <_dtoa_r+0xa78>
 8008dd6:	07da      	lsls	r2, r3, #31
 8008dd8:	d5de      	bpl.n	8008d98 <_dtoa_r+0xa78>
 8008dda:	2b39      	cmp	r3, #57	; 0x39
 8008ddc:	d1da      	bne.n	8008d94 <_dtoa_r+0xa74>
 8008dde:	2339      	movs	r3, #57	; 0x39
 8008de0:	f88b 3000 	strb.w	r3, [fp]
 8008de4:	463b      	mov	r3, r7
 8008de6:	461f      	mov	r7, r3
 8008de8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8008dec:	3b01      	subs	r3, #1
 8008dee:	2a39      	cmp	r2, #57	; 0x39
 8008df0:	d050      	beq.n	8008e94 <_dtoa_r+0xb74>
 8008df2:	3201      	adds	r2, #1
 8008df4:	701a      	strb	r2, [r3, #0]
 8008df6:	e749      	b.n	8008c8c <_dtoa_r+0x96c>
 8008df8:	2a00      	cmp	r2, #0
 8008dfa:	dd03      	ble.n	8008e04 <_dtoa_r+0xae4>
 8008dfc:	2b39      	cmp	r3, #57	; 0x39
 8008dfe:	d0ee      	beq.n	8008dde <_dtoa_r+0xabe>
 8008e00:	3301      	adds	r3, #1
 8008e02:	e7c9      	b.n	8008d98 <_dtoa_r+0xa78>
 8008e04:	9a02      	ldr	r2, [sp, #8]
 8008e06:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008e08:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008e0c:	428a      	cmp	r2, r1
 8008e0e:	d02a      	beq.n	8008e66 <_dtoa_r+0xb46>
 8008e10:	4651      	mov	r1, sl
 8008e12:	2300      	movs	r3, #0
 8008e14:	220a      	movs	r2, #10
 8008e16:	4628      	mov	r0, r5
 8008e18:	f000 fb0c 	bl	8009434 <__multadd>
 8008e1c:	45b0      	cmp	r8, r6
 8008e1e:	4682      	mov	sl, r0
 8008e20:	f04f 0300 	mov.w	r3, #0
 8008e24:	f04f 020a 	mov.w	r2, #10
 8008e28:	4641      	mov	r1, r8
 8008e2a:	4628      	mov	r0, r5
 8008e2c:	d107      	bne.n	8008e3e <_dtoa_r+0xb1e>
 8008e2e:	f000 fb01 	bl	8009434 <__multadd>
 8008e32:	4680      	mov	r8, r0
 8008e34:	4606      	mov	r6, r0
 8008e36:	9b02      	ldr	r3, [sp, #8]
 8008e38:	3301      	adds	r3, #1
 8008e3a:	9302      	str	r3, [sp, #8]
 8008e3c:	e777      	b.n	8008d2e <_dtoa_r+0xa0e>
 8008e3e:	f000 faf9 	bl	8009434 <__multadd>
 8008e42:	4631      	mov	r1, r6
 8008e44:	4680      	mov	r8, r0
 8008e46:	2300      	movs	r3, #0
 8008e48:	220a      	movs	r2, #10
 8008e4a:	4628      	mov	r0, r5
 8008e4c:	f000 faf2 	bl	8009434 <__multadd>
 8008e50:	4606      	mov	r6, r0
 8008e52:	e7f0      	b.n	8008e36 <_dtoa_r+0xb16>
 8008e54:	f1bb 0f00 	cmp.w	fp, #0
 8008e58:	bfcc      	ite	gt
 8008e5a:	465f      	movgt	r7, fp
 8008e5c:	2701      	movle	r7, #1
 8008e5e:	f04f 0800 	mov.w	r8, #0
 8008e62:	9a08      	ldr	r2, [sp, #32]
 8008e64:	4417      	add	r7, r2
 8008e66:	4651      	mov	r1, sl
 8008e68:	2201      	movs	r2, #1
 8008e6a:	4628      	mov	r0, r5
 8008e6c:	9302      	str	r3, [sp, #8]
 8008e6e:	f000 fc8d 	bl	800978c <__lshift>
 8008e72:	4621      	mov	r1, r4
 8008e74:	4682      	mov	sl, r0
 8008e76:	f000 fcf5 	bl	8009864 <__mcmp>
 8008e7a:	2800      	cmp	r0, #0
 8008e7c:	dcb2      	bgt.n	8008de4 <_dtoa_r+0xac4>
 8008e7e:	d102      	bne.n	8008e86 <_dtoa_r+0xb66>
 8008e80:	9b02      	ldr	r3, [sp, #8]
 8008e82:	07db      	lsls	r3, r3, #31
 8008e84:	d4ae      	bmi.n	8008de4 <_dtoa_r+0xac4>
 8008e86:	463b      	mov	r3, r7
 8008e88:	461f      	mov	r7, r3
 8008e8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008e8e:	2a30      	cmp	r2, #48	; 0x30
 8008e90:	d0fa      	beq.n	8008e88 <_dtoa_r+0xb68>
 8008e92:	e6fb      	b.n	8008c8c <_dtoa_r+0x96c>
 8008e94:	9a08      	ldr	r2, [sp, #32]
 8008e96:	429a      	cmp	r2, r3
 8008e98:	d1a5      	bne.n	8008de6 <_dtoa_r+0xac6>
 8008e9a:	2331      	movs	r3, #49	; 0x31
 8008e9c:	f109 0901 	add.w	r9, r9, #1
 8008ea0:	7013      	strb	r3, [r2, #0]
 8008ea2:	e6f3      	b.n	8008c8c <_dtoa_r+0x96c>
 8008ea4:	4b13      	ldr	r3, [pc, #76]	; (8008ef4 <_dtoa_r+0xbd4>)
 8008ea6:	f7ff baa7 	b.w	80083f8 <_dtoa_r+0xd8>
 8008eaa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	f47f aa80 	bne.w	80083b2 <_dtoa_r+0x92>
 8008eb2:	4b11      	ldr	r3, [pc, #68]	; (8008ef8 <_dtoa_r+0xbd8>)
 8008eb4:	f7ff baa0 	b.w	80083f8 <_dtoa_r+0xd8>
 8008eb8:	f1bb 0f00 	cmp.w	fp, #0
 8008ebc:	dc03      	bgt.n	8008ec6 <_dtoa_r+0xba6>
 8008ebe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008ec0:	2b02      	cmp	r3, #2
 8008ec2:	f73f aecc 	bgt.w	8008c5e <_dtoa_r+0x93e>
 8008ec6:	9f08      	ldr	r7, [sp, #32]
 8008ec8:	4621      	mov	r1, r4
 8008eca:	4650      	mov	r0, sl
 8008ecc:	f7ff f99a 	bl	8008204 <quorem>
 8008ed0:	9a08      	ldr	r2, [sp, #32]
 8008ed2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008ed6:	f807 3b01 	strb.w	r3, [r7], #1
 8008eda:	1aba      	subs	r2, r7, r2
 8008edc:	4593      	cmp	fp, r2
 8008ede:	ddb9      	ble.n	8008e54 <_dtoa_r+0xb34>
 8008ee0:	4651      	mov	r1, sl
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	220a      	movs	r2, #10
 8008ee6:	4628      	mov	r0, r5
 8008ee8:	f000 faa4 	bl	8009434 <__multadd>
 8008eec:	4682      	mov	sl, r0
 8008eee:	e7eb      	b.n	8008ec8 <_dtoa_r+0xba8>
 8008ef0:	0800aa17 	.word	0x0800aa17
 8008ef4:	0800a970 	.word	0x0800a970
 8008ef8:	0800a994 	.word	0x0800a994

08008efc <__sflush_r>:
 8008efc:	898a      	ldrh	r2, [r1, #12]
 8008efe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f02:	4605      	mov	r5, r0
 8008f04:	0710      	lsls	r0, r2, #28
 8008f06:	460c      	mov	r4, r1
 8008f08:	d458      	bmi.n	8008fbc <__sflush_r+0xc0>
 8008f0a:	684b      	ldr	r3, [r1, #4]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	dc05      	bgt.n	8008f1c <__sflush_r+0x20>
 8008f10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	dc02      	bgt.n	8008f1c <__sflush_r+0x20>
 8008f16:	2000      	movs	r0, #0
 8008f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f1e:	2e00      	cmp	r6, #0
 8008f20:	d0f9      	beq.n	8008f16 <__sflush_r+0x1a>
 8008f22:	2300      	movs	r3, #0
 8008f24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008f28:	682f      	ldr	r7, [r5, #0]
 8008f2a:	602b      	str	r3, [r5, #0]
 8008f2c:	d032      	beq.n	8008f94 <__sflush_r+0x98>
 8008f2e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008f30:	89a3      	ldrh	r3, [r4, #12]
 8008f32:	075a      	lsls	r2, r3, #29
 8008f34:	d505      	bpl.n	8008f42 <__sflush_r+0x46>
 8008f36:	6863      	ldr	r3, [r4, #4]
 8008f38:	1ac0      	subs	r0, r0, r3
 8008f3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f3c:	b10b      	cbz	r3, 8008f42 <__sflush_r+0x46>
 8008f3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f40:	1ac0      	subs	r0, r0, r3
 8008f42:	2300      	movs	r3, #0
 8008f44:	4602      	mov	r2, r0
 8008f46:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f48:	4628      	mov	r0, r5
 8008f4a:	6a21      	ldr	r1, [r4, #32]
 8008f4c:	47b0      	blx	r6
 8008f4e:	1c43      	adds	r3, r0, #1
 8008f50:	89a3      	ldrh	r3, [r4, #12]
 8008f52:	d106      	bne.n	8008f62 <__sflush_r+0x66>
 8008f54:	6829      	ldr	r1, [r5, #0]
 8008f56:	291d      	cmp	r1, #29
 8008f58:	d82c      	bhi.n	8008fb4 <__sflush_r+0xb8>
 8008f5a:	4a2a      	ldr	r2, [pc, #168]	; (8009004 <__sflush_r+0x108>)
 8008f5c:	40ca      	lsrs	r2, r1
 8008f5e:	07d6      	lsls	r6, r2, #31
 8008f60:	d528      	bpl.n	8008fb4 <__sflush_r+0xb8>
 8008f62:	2200      	movs	r2, #0
 8008f64:	6062      	str	r2, [r4, #4]
 8008f66:	6922      	ldr	r2, [r4, #16]
 8008f68:	04d9      	lsls	r1, r3, #19
 8008f6a:	6022      	str	r2, [r4, #0]
 8008f6c:	d504      	bpl.n	8008f78 <__sflush_r+0x7c>
 8008f6e:	1c42      	adds	r2, r0, #1
 8008f70:	d101      	bne.n	8008f76 <__sflush_r+0x7a>
 8008f72:	682b      	ldr	r3, [r5, #0]
 8008f74:	b903      	cbnz	r3, 8008f78 <__sflush_r+0x7c>
 8008f76:	6560      	str	r0, [r4, #84]	; 0x54
 8008f78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f7a:	602f      	str	r7, [r5, #0]
 8008f7c:	2900      	cmp	r1, #0
 8008f7e:	d0ca      	beq.n	8008f16 <__sflush_r+0x1a>
 8008f80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f84:	4299      	cmp	r1, r3
 8008f86:	d002      	beq.n	8008f8e <__sflush_r+0x92>
 8008f88:	4628      	mov	r0, r5
 8008f8a:	f000 fd81 	bl	8009a90 <_free_r>
 8008f8e:	2000      	movs	r0, #0
 8008f90:	6360      	str	r0, [r4, #52]	; 0x34
 8008f92:	e7c1      	b.n	8008f18 <__sflush_r+0x1c>
 8008f94:	6a21      	ldr	r1, [r4, #32]
 8008f96:	2301      	movs	r3, #1
 8008f98:	4628      	mov	r0, r5
 8008f9a:	47b0      	blx	r6
 8008f9c:	1c41      	adds	r1, r0, #1
 8008f9e:	d1c7      	bne.n	8008f30 <__sflush_r+0x34>
 8008fa0:	682b      	ldr	r3, [r5, #0]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d0c4      	beq.n	8008f30 <__sflush_r+0x34>
 8008fa6:	2b1d      	cmp	r3, #29
 8008fa8:	d001      	beq.n	8008fae <__sflush_r+0xb2>
 8008faa:	2b16      	cmp	r3, #22
 8008fac:	d101      	bne.n	8008fb2 <__sflush_r+0xb6>
 8008fae:	602f      	str	r7, [r5, #0]
 8008fb0:	e7b1      	b.n	8008f16 <__sflush_r+0x1a>
 8008fb2:	89a3      	ldrh	r3, [r4, #12]
 8008fb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fb8:	81a3      	strh	r3, [r4, #12]
 8008fba:	e7ad      	b.n	8008f18 <__sflush_r+0x1c>
 8008fbc:	690f      	ldr	r7, [r1, #16]
 8008fbe:	2f00      	cmp	r7, #0
 8008fc0:	d0a9      	beq.n	8008f16 <__sflush_r+0x1a>
 8008fc2:	0793      	lsls	r3, r2, #30
 8008fc4:	bf18      	it	ne
 8008fc6:	2300      	movne	r3, #0
 8008fc8:	680e      	ldr	r6, [r1, #0]
 8008fca:	bf08      	it	eq
 8008fcc:	694b      	ldreq	r3, [r1, #20]
 8008fce:	eba6 0807 	sub.w	r8, r6, r7
 8008fd2:	600f      	str	r7, [r1, #0]
 8008fd4:	608b      	str	r3, [r1, #8]
 8008fd6:	f1b8 0f00 	cmp.w	r8, #0
 8008fda:	dd9c      	ble.n	8008f16 <__sflush_r+0x1a>
 8008fdc:	4643      	mov	r3, r8
 8008fde:	463a      	mov	r2, r7
 8008fe0:	4628      	mov	r0, r5
 8008fe2:	6a21      	ldr	r1, [r4, #32]
 8008fe4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008fe6:	47b0      	blx	r6
 8008fe8:	2800      	cmp	r0, #0
 8008fea:	dc06      	bgt.n	8008ffa <__sflush_r+0xfe>
 8008fec:	89a3      	ldrh	r3, [r4, #12]
 8008fee:	f04f 30ff 	mov.w	r0, #4294967295
 8008ff2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ff6:	81a3      	strh	r3, [r4, #12]
 8008ff8:	e78e      	b.n	8008f18 <__sflush_r+0x1c>
 8008ffa:	4407      	add	r7, r0
 8008ffc:	eba8 0800 	sub.w	r8, r8, r0
 8009000:	e7e9      	b.n	8008fd6 <__sflush_r+0xda>
 8009002:	bf00      	nop
 8009004:	20400001 	.word	0x20400001

08009008 <_fflush_r>:
 8009008:	b538      	push	{r3, r4, r5, lr}
 800900a:	690b      	ldr	r3, [r1, #16]
 800900c:	4605      	mov	r5, r0
 800900e:	460c      	mov	r4, r1
 8009010:	b913      	cbnz	r3, 8009018 <_fflush_r+0x10>
 8009012:	2500      	movs	r5, #0
 8009014:	4628      	mov	r0, r5
 8009016:	bd38      	pop	{r3, r4, r5, pc}
 8009018:	b118      	cbz	r0, 8009022 <_fflush_r+0x1a>
 800901a:	6983      	ldr	r3, [r0, #24]
 800901c:	b90b      	cbnz	r3, 8009022 <_fflush_r+0x1a>
 800901e:	f000 f887 	bl	8009130 <__sinit>
 8009022:	4b14      	ldr	r3, [pc, #80]	; (8009074 <_fflush_r+0x6c>)
 8009024:	429c      	cmp	r4, r3
 8009026:	d11b      	bne.n	8009060 <_fflush_r+0x58>
 8009028:	686c      	ldr	r4, [r5, #4]
 800902a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d0ef      	beq.n	8009012 <_fflush_r+0xa>
 8009032:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009034:	07d0      	lsls	r0, r2, #31
 8009036:	d404      	bmi.n	8009042 <_fflush_r+0x3a>
 8009038:	0599      	lsls	r1, r3, #22
 800903a:	d402      	bmi.n	8009042 <_fflush_r+0x3a>
 800903c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800903e:	f000 f91a 	bl	8009276 <__retarget_lock_acquire_recursive>
 8009042:	4628      	mov	r0, r5
 8009044:	4621      	mov	r1, r4
 8009046:	f7ff ff59 	bl	8008efc <__sflush_r>
 800904a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800904c:	4605      	mov	r5, r0
 800904e:	07da      	lsls	r2, r3, #31
 8009050:	d4e0      	bmi.n	8009014 <_fflush_r+0xc>
 8009052:	89a3      	ldrh	r3, [r4, #12]
 8009054:	059b      	lsls	r3, r3, #22
 8009056:	d4dd      	bmi.n	8009014 <_fflush_r+0xc>
 8009058:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800905a:	f000 f90d 	bl	8009278 <__retarget_lock_release_recursive>
 800905e:	e7d9      	b.n	8009014 <_fflush_r+0xc>
 8009060:	4b05      	ldr	r3, [pc, #20]	; (8009078 <_fflush_r+0x70>)
 8009062:	429c      	cmp	r4, r3
 8009064:	d101      	bne.n	800906a <_fflush_r+0x62>
 8009066:	68ac      	ldr	r4, [r5, #8]
 8009068:	e7df      	b.n	800902a <_fflush_r+0x22>
 800906a:	4b04      	ldr	r3, [pc, #16]	; (800907c <_fflush_r+0x74>)
 800906c:	429c      	cmp	r4, r3
 800906e:	bf08      	it	eq
 8009070:	68ec      	ldreq	r4, [r5, #12]
 8009072:	e7da      	b.n	800902a <_fflush_r+0x22>
 8009074:	0800aa48 	.word	0x0800aa48
 8009078:	0800aa68 	.word	0x0800aa68
 800907c:	0800aa28 	.word	0x0800aa28

08009080 <std>:
 8009080:	2300      	movs	r3, #0
 8009082:	b510      	push	{r4, lr}
 8009084:	4604      	mov	r4, r0
 8009086:	e9c0 3300 	strd	r3, r3, [r0]
 800908a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800908e:	6083      	str	r3, [r0, #8]
 8009090:	8181      	strh	r1, [r0, #12]
 8009092:	6643      	str	r3, [r0, #100]	; 0x64
 8009094:	81c2      	strh	r2, [r0, #14]
 8009096:	6183      	str	r3, [r0, #24]
 8009098:	4619      	mov	r1, r3
 800909a:	2208      	movs	r2, #8
 800909c:	305c      	adds	r0, #92	; 0x5c
 800909e:	f7fe f9fd 	bl	800749c <memset>
 80090a2:	4b05      	ldr	r3, [pc, #20]	; (80090b8 <std+0x38>)
 80090a4:	6224      	str	r4, [r4, #32]
 80090a6:	6263      	str	r3, [r4, #36]	; 0x24
 80090a8:	4b04      	ldr	r3, [pc, #16]	; (80090bc <std+0x3c>)
 80090aa:	62a3      	str	r3, [r4, #40]	; 0x28
 80090ac:	4b04      	ldr	r3, [pc, #16]	; (80090c0 <std+0x40>)
 80090ae:	62e3      	str	r3, [r4, #44]	; 0x2c
 80090b0:	4b04      	ldr	r3, [pc, #16]	; (80090c4 <std+0x44>)
 80090b2:	6323      	str	r3, [r4, #48]	; 0x30
 80090b4:	bd10      	pop	{r4, pc}
 80090b6:	bf00      	nop
 80090b8:	0800a165 	.word	0x0800a165
 80090bc:	0800a187 	.word	0x0800a187
 80090c0:	0800a1bf 	.word	0x0800a1bf
 80090c4:	0800a1e3 	.word	0x0800a1e3

080090c8 <_cleanup_r>:
 80090c8:	4901      	ldr	r1, [pc, #4]	; (80090d0 <_cleanup_r+0x8>)
 80090ca:	f000 b8af 	b.w	800922c <_fwalk_reent>
 80090ce:	bf00      	nop
 80090d0:	08009009 	.word	0x08009009

080090d4 <__sfmoreglue>:
 80090d4:	b570      	push	{r4, r5, r6, lr}
 80090d6:	2568      	movs	r5, #104	; 0x68
 80090d8:	1e4a      	subs	r2, r1, #1
 80090da:	4355      	muls	r5, r2
 80090dc:	460e      	mov	r6, r1
 80090de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80090e2:	f000 fd21 	bl	8009b28 <_malloc_r>
 80090e6:	4604      	mov	r4, r0
 80090e8:	b140      	cbz	r0, 80090fc <__sfmoreglue+0x28>
 80090ea:	2100      	movs	r1, #0
 80090ec:	e9c0 1600 	strd	r1, r6, [r0]
 80090f0:	300c      	adds	r0, #12
 80090f2:	60a0      	str	r0, [r4, #8]
 80090f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80090f8:	f7fe f9d0 	bl	800749c <memset>
 80090fc:	4620      	mov	r0, r4
 80090fe:	bd70      	pop	{r4, r5, r6, pc}

08009100 <__sfp_lock_acquire>:
 8009100:	4801      	ldr	r0, [pc, #4]	; (8009108 <__sfp_lock_acquire+0x8>)
 8009102:	f000 b8b8 	b.w	8009276 <__retarget_lock_acquire_recursive>
 8009106:	bf00      	nop
 8009108:	200041e4 	.word	0x200041e4

0800910c <__sfp_lock_release>:
 800910c:	4801      	ldr	r0, [pc, #4]	; (8009114 <__sfp_lock_release+0x8>)
 800910e:	f000 b8b3 	b.w	8009278 <__retarget_lock_release_recursive>
 8009112:	bf00      	nop
 8009114:	200041e4 	.word	0x200041e4

08009118 <__sinit_lock_acquire>:
 8009118:	4801      	ldr	r0, [pc, #4]	; (8009120 <__sinit_lock_acquire+0x8>)
 800911a:	f000 b8ac 	b.w	8009276 <__retarget_lock_acquire_recursive>
 800911e:	bf00      	nop
 8009120:	200041df 	.word	0x200041df

08009124 <__sinit_lock_release>:
 8009124:	4801      	ldr	r0, [pc, #4]	; (800912c <__sinit_lock_release+0x8>)
 8009126:	f000 b8a7 	b.w	8009278 <__retarget_lock_release_recursive>
 800912a:	bf00      	nop
 800912c:	200041df 	.word	0x200041df

08009130 <__sinit>:
 8009130:	b510      	push	{r4, lr}
 8009132:	4604      	mov	r4, r0
 8009134:	f7ff fff0 	bl	8009118 <__sinit_lock_acquire>
 8009138:	69a3      	ldr	r3, [r4, #24]
 800913a:	b11b      	cbz	r3, 8009144 <__sinit+0x14>
 800913c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009140:	f7ff bff0 	b.w	8009124 <__sinit_lock_release>
 8009144:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009148:	6523      	str	r3, [r4, #80]	; 0x50
 800914a:	4b13      	ldr	r3, [pc, #76]	; (8009198 <__sinit+0x68>)
 800914c:	4a13      	ldr	r2, [pc, #76]	; (800919c <__sinit+0x6c>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	62a2      	str	r2, [r4, #40]	; 0x28
 8009152:	42a3      	cmp	r3, r4
 8009154:	bf08      	it	eq
 8009156:	2301      	moveq	r3, #1
 8009158:	4620      	mov	r0, r4
 800915a:	bf08      	it	eq
 800915c:	61a3      	streq	r3, [r4, #24]
 800915e:	f000 f81f 	bl	80091a0 <__sfp>
 8009162:	6060      	str	r0, [r4, #4]
 8009164:	4620      	mov	r0, r4
 8009166:	f000 f81b 	bl	80091a0 <__sfp>
 800916a:	60a0      	str	r0, [r4, #8]
 800916c:	4620      	mov	r0, r4
 800916e:	f000 f817 	bl	80091a0 <__sfp>
 8009172:	2200      	movs	r2, #0
 8009174:	2104      	movs	r1, #4
 8009176:	60e0      	str	r0, [r4, #12]
 8009178:	6860      	ldr	r0, [r4, #4]
 800917a:	f7ff ff81 	bl	8009080 <std>
 800917e:	2201      	movs	r2, #1
 8009180:	2109      	movs	r1, #9
 8009182:	68a0      	ldr	r0, [r4, #8]
 8009184:	f7ff ff7c 	bl	8009080 <std>
 8009188:	2202      	movs	r2, #2
 800918a:	2112      	movs	r1, #18
 800918c:	68e0      	ldr	r0, [r4, #12]
 800918e:	f7ff ff77 	bl	8009080 <std>
 8009192:	2301      	movs	r3, #1
 8009194:	61a3      	str	r3, [r4, #24]
 8009196:	e7d1      	b.n	800913c <__sinit+0xc>
 8009198:	0800a95c 	.word	0x0800a95c
 800919c:	080090c9 	.word	0x080090c9

080091a0 <__sfp>:
 80091a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091a2:	4607      	mov	r7, r0
 80091a4:	f7ff ffac 	bl	8009100 <__sfp_lock_acquire>
 80091a8:	4b1e      	ldr	r3, [pc, #120]	; (8009224 <__sfp+0x84>)
 80091aa:	681e      	ldr	r6, [r3, #0]
 80091ac:	69b3      	ldr	r3, [r6, #24]
 80091ae:	b913      	cbnz	r3, 80091b6 <__sfp+0x16>
 80091b0:	4630      	mov	r0, r6
 80091b2:	f7ff ffbd 	bl	8009130 <__sinit>
 80091b6:	3648      	adds	r6, #72	; 0x48
 80091b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80091bc:	3b01      	subs	r3, #1
 80091be:	d503      	bpl.n	80091c8 <__sfp+0x28>
 80091c0:	6833      	ldr	r3, [r6, #0]
 80091c2:	b30b      	cbz	r3, 8009208 <__sfp+0x68>
 80091c4:	6836      	ldr	r6, [r6, #0]
 80091c6:	e7f7      	b.n	80091b8 <__sfp+0x18>
 80091c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80091cc:	b9d5      	cbnz	r5, 8009204 <__sfp+0x64>
 80091ce:	4b16      	ldr	r3, [pc, #88]	; (8009228 <__sfp+0x88>)
 80091d0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80091d4:	60e3      	str	r3, [r4, #12]
 80091d6:	6665      	str	r5, [r4, #100]	; 0x64
 80091d8:	f000 f84c 	bl	8009274 <__retarget_lock_init_recursive>
 80091dc:	f7ff ff96 	bl	800910c <__sfp_lock_release>
 80091e0:	2208      	movs	r2, #8
 80091e2:	4629      	mov	r1, r5
 80091e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80091e8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80091ec:	6025      	str	r5, [r4, #0]
 80091ee:	61a5      	str	r5, [r4, #24]
 80091f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80091f4:	f7fe f952 	bl	800749c <memset>
 80091f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80091fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009200:	4620      	mov	r0, r4
 8009202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009204:	3468      	adds	r4, #104	; 0x68
 8009206:	e7d9      	b.n	80091bc <__sfp+0x1c>
 8009208:	2104      	movs	r1, #4
 800920a:	4638      	mov	r0, r7
 800920c:	f7ff ff62 	bl	80090d4 <__sfmoreglue>
 8009210:	4604      	mov	r4, r0
 8009212:	6030      	str	r0, [r6, #0]
 8009214:	2800      	cmp	r0, #0
 8009216:	d1d5      	bne.n	80091c4 <__sfp+0x24>
 8009218:	f7ff ff78 	bl	800910c <__sfp_lock_release>
 800921c:	230c      	movs	r3, #12
 800921e:	603b      	str	r3, [r7, #0]
 8009220:	e7ee      	b.n	8009200 <__sfp+0x60>
 8009222:	bf00      	nop
 8009224:	0800a95c 	.word	0x0800a95c
 8009228:	ffff0001 	.word	0xffff0001

0800922c <_fwalk_reent>:
 800922c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009230:	4606      	mov	r6, r0
 8009232:	4688      	mov	r8, r1
 8009234:	2700      	movs	r7, #0
 8009236:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800923a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800923e:	f1b9 0901 	subs.w	r9, r9, #1
 8009242:	d505      	bpl.n	8009250 <_fwalk_reent+0x24>
 8009244:	6824      	ldr	r4, [r4, #0]
 8009246:	2c00      	cmp	r4, #0
 8009248:	d1f7      	bne.n	800923a <_fwalk_reent+0xe>
 800924a:	4638      	mov	r0, r7
 800924c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009250:	89ab      	ldrh	r3, [r5, #12]
 8009252:	2b01      	cmp	r3, #1
 8009254:	d907      	bls.n	8009266 <_fwalk_reent+0x3a>
 8009256:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800925a:	3301      	adds	r3, #1
 800925c:	d003      	beq.n	8009266 <_fwalk_reent+0x3a>
 800925e:	4629      	mov	r1, r5
 8009260:	4630      	mov	r0, r6
 8009262:	47c0      	blx	r8
 8009264:	4307      	orrs	r7, r0
 8009266:	3568      	adds	r5, #104	; 0x68
 8009268:	e7e9      	b.n	800923e <_fwalk_reent+0x12>
	...

0800926c <_localeconv_r>:
 800926c:	4800      	ldr	r0, [pc, #0]	; (8009270 <_localeconv_r+0x4>)
 800926e:	4770      	bx	lr
 8009270:	20000260 	.word	0x20000260

08009274 <__retarget_lock_init_recursive>:
 8009274:	4770      	bx	lr

08009276 <__retarget_lock_acquire_recursive>:
 8009276:	4770      	bx	lr

08009278 <__retarget_lock_release_recursive>:
 8009278:	4770      	bx	lr

0800927a <__swhatbuf_r>:
 800927a:	b570      	push	{r4, r5, r6, lr}
 800927c:	460e      	mov	r6, r1
 800927e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009282:	4614      	mov	r4, r2
 8009284:	2900      	cmp	r1, #0
 8009286:	461d      	mov	r5, r3
 8009288:	b096      	sub	sp, #88	; 0x58
 800928a:	da07      	bge.n	800929c <__swhatbuf_r+0x22>
 800928c:	2300      	movs	r3, #0
 800928e:	602b      	str	r3, [r5, #0]
 8009290:	89b3      	ldrh	r3, [r6, #12]
 8009292:	061a      	lsls	r2, r3, #24
 8009294:	d410      	bmi.n	80092b8 <__swhatbuf_r+0x3e>
 8009296:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800929a:	e00e      	b.n	80092ba <__swhatbuf_r+0x40>
 800929c:	466a      	mov	r2, sp
 800929e:	f000 fff7 	bl	800a290 <_fstat_r>
 80092a2:	2800      	cmp	r0, #0
 80092a4:	dbf2      	blt.n	800928c <__swhatbuf_r+0x12>
 80092a6:	9a01      	ldr	r2, [sp, #4]
 80092a8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80092ac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80092b0:	425a      	negs	r2, r3
 80092b2:	415a      	adcs	r2, r3
 80092b4:	602a      	str	r2, [r5, #0]
 80092b6:	e7ee      	b.n	8009296 <__swhatbuf_r+0x1c>
 80092b8:	2340      	movs	r3, #64	; 0x40
 80092ba:	2000      	movs	r0, #0
 80092bc:	6023      	str	r3, [r4, #0]
 80092be:	b016      	add	sp, #88	; 0x58
 80092c0:	bd70      	pop	{r4, r5, r6, pc}
	...

080092c4 <__smakebuf_r>:
 80092c4:	898b      	ldrh	r3, [r1, #12]
 80092c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80092c8:	079d      	lsls	r5, r3, #30
 80092ca:	4606      	mov	r6, r0
 80092cc:	460c      	mov	r4, r1
 80092ce:	d507      	bpl.n	80092e0 <__smakebuf_r+0x1c>
 80092d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80092d4:	6023      	str	r3, [r4, #0]
 80092d6:	6123      	str	r3, [r4, #16]
 80092d8:	2301      	movs	r3, #1
 80092da:	6163      	str	r3, [r4, #20]
 80092dc:	b002      	add	sp, #8
 80092de:	bd70      	pop	{r4, r5, r6, pc}
 80092e0:	466a      	mov	r2, sp
 80092e2:	ab01      	add	r3, sp, #4
 80092e4:	f7ff ffc9 	bl	800927a <__swhatbuf_r>
 80092e8:	9900      	ldr	r1, [sp, #0]
 80092ea:	4605      	mov	r5, r0
 80092ec:	4630      	mov	r0, r6
 80092ee:	f000 fc1b 	bl	8009b28 <_malloc_r>
 80092f2:	b948      	cbnz	r0, 8009308 <__smakebuf_r+0x44>
 80092f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092f8:	059a      	lsls	r2, r3, #22
 80092fa:	d4ef      	bmi.n	80092dc <__smakebuf_r+0x18>
 80092fc:	f023 0303 	bic.w	r3, r3, #3
 8009300:	f043 0302 	orr.w	r3, r3, #2
 8009304:	81a3      	strh	r3, [r4, #12]
 8009306:	e7e3      	b.n	80092d0 <__smakebuf_r+0xc>
 8009308:	4b0d      	ldr	r3, [pc, #52]	; (8009340 <__smakebuf_r+0x7c>)
 800930a:	62b3      	str	r3, [r6, #40]	; 0x28
 800930c:	89a3      	ldrh	r3, [r4, #12]
 800930e:	6020      	str	r0, [r4, #0]
 8009310:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009314:	81a3      	strh	r3, [r4, #12]
 8009316:	9b00      	ldr	r3, [sp, #0]
 8009318:	6120      	str	r0, [r4, #16]
 800931a:	6163      	str	r3, [r4, #20]
 800931c:	9b01      	ldr	r3, [sp, #4]
 800931e:	b15b      	cbz	r3, 8009338 <__smakebuf_r+0x74>
 8009320:	4630      	mov	r0, r6
 8009322:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009326:	f000 ffc5 	bl	800a2b4 <_isatty_r>
 800932a:	b128      	cbz	r0, 8009338 <__smakebuf_r+0x74>
 800932c:	89a3      	ldrh	r3, [r4, #12]
 800932e:	f023 0303 	bic.w	r3, r3, #3
 8009332:	f043 0301 	orr.w	r3, r3, #1
 8009336:	81a3      	strh	r3, [r4, #12]
 8009338:	89a0      	ldrh	r0, [r4, #12]
 800933a:	4305      	orrs	r5, r0
 800933c:	81a5      	strh	r5, [r4, #12]
 800933e:	e7cd      	b.n	80092dc <__smakebuf_r+0x18>
 8009340:	080090c9 	.word	0x080090c9

08009344 <malloc>:
 8009344:	4b02      	ldr	r3, [pc, #8]	; (8009350 <malloc+0xc>)
 8009346:	4601      	mov	r1, r0
 8009348:	6818      	ldr	r0, [r3, #0]
 800934a:	f000 bbed 	b.w	8009b28 <_malloc_r>
 800934e:	bf00      	nop
 8009350:	2000010c 	.word	0x2000010c

08009354 <memchr>:
 8009354:	4603      	mov	r3, r0
 8009356:	b510      	push	{r4, lr}
 8009358:	b2c9      	uxtb	r1, r1
 800935a:	4402      	add	r2, r0
 800935c:	4293      	cmp	r3, r2
 800935e:	4618      	mov	r0, r3
 8009360:	d101      	bne.n	8009366 <memchr+0x12>
 8009362:	2000      	movs	r0, #0
 8009364:	e003      	b.n	800936e <memchr+0x1a>
 8009366:	7804      	ldrb	r4, [r0, #0]
 8009368:	3301      	adds	r3, #1
 800936a:	428c      	cmp	r4, r1
 800936c:	d1f6      	bne.n	800935c <memchr+0x8>
 800936e:	bd10      	pop	{r4, pc}

08009370 <_Balloc>:
 8009370:	b570      	push	{r4, r5, r6, lr}
 8009372:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009374:	4604      	mov	r4, r0
 8009376:	460d      	mov	r5, r1
 8009378:	b976      	cbnz	r6, 8009398 <_Balloc+0x28>
 800937a:	2010      	movs	r0, #16
 800937c:	f7ff ffe2 	bl	8009344 <malloc>
 8009380:	4602      	mov	r2, r0
 8009382:	6260      	str	r0, [r4, #36]	; 0x24
 8009384:	b920      	cbnz	r0, 8009390 <_Balloc+0x20>
 8009386:	2166      	movs	r1, #102	; 0x66
 8009388:	4b17      	ldr	r3, [pc, #92]	; (80093e8 <_Balloc+0x78>)
 800938a:	4818      	ldr	r0, [pc, #96]	; (80093ec <_Balloc+0x7c>)
 800938c:	f000 ff40 	bl	800a210 <__assert_func>
 8009390:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009394:	6006      	str	r6, [r0, #0]
 8009396:	60c6      	str	r6, [r0, #12]
 8009398:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800939a:	68f3      	ldr	r3, [r6, #12]
 800939c:	b183      	cbz	r3, 80093c0 <_Balloc+0x50>
 800939e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80093a0:	68db      	ldr	r3, [r3, #12]
 80093a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80093a6:	b9b8      	cbnz	r0, 80093d8 <_Balloc+0x68>
 80093a8:	2101      	movs	r1, #1
 80093aa:	fa01 f605 	lsl.w	r6, r1, r5
 80093ae:	1d72      	adds	r2, r6, #5
 80093b0:	4620      	mov	r0, r4
 80093b2:	0092      	lsls	r2, r2, #2
 80093b4:	f000 fb5e 	bl	8009a74 <_calloc_r>
 80093b8:	b160      	cbz	r0, 80093d4 <_Balloc+0x64>
 80093ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80093be:	e00e      	b.n	80093de <_Balloc+0x6e>
 80093c0:	2221      	movs	r2, #33	; 0x21
 80093c2:	2104      	movs	r1, #4
 80093c4:	4620      	mov	r0, r4
 80093c6:	f000 fb55 	bl	8009a74 <_calloc_r>
 80093ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80093cc:	60f0      	str	r0, [r6, #12]
 80093ce:	68db      	ldr	r3, [r3, #12]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d1e4      	bne.n	800939e <_Balloc+0x2e>
 80093d4:	2000      	movs	r0, #0
 80093d6:	bd70      	pop	{r4, r5, r6, pc}
 80093d8:	6802      	ldr	r2, [r0, #0]
 80093da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80093de:	2300      	movs	r3, #0
 80093e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80093e4:	e7f7      	b.n	80093d6 <_Balloc+0x66>
 80093e6:	bf00      	nop
 80093e8:	0800a9a1 	.word	0x0800a9a1
 80093ec:	0800aa88 	.word	0x0800aa88

080093f0 <_Bfree>:
 80093f0:	b570      	push	{r4, r5, r6, lr}
 80093f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80093f4:	4605      	mov	r5, r0
 80093f6:	460c      	mov	r4, r1
 80093f8:	b976      	cbnz	r6, 8009418 <_Bfree+0x28>
 80093fa:	2010      	movs	r0, #16
 80093fc:	f7ff ffa2 	bl	8009344 <malloc>
 8009400:	4602      	mov	r2, r0
 8009402:	6268      	str	r0, [r5, #36]	; 0x24
 8009404:	b920      	cbnz	r0, 8009410 <_Bfree+0x20>
 8009406:	218a      	movs	r1, #138	; 0x8a
 8009408:	4b08      	ldr	r3, [pc, #32]	; (800942c <_Bfree+0x3c>)
 800940a:	4809      	ldr	r0, [pc, #36]	; (8009430 <_Bfree+0x40>)
 800940c:	f000 ff00 	bl	800a210 <__assert_func>
 8009410:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009414:	6006      	str	r6, [r0, #0]
 8009416:	60c6      	str	r6, [r0, #12]
 8009418:	b13c      	cbz	r4, 800942a <_Bfree+0x3a>
 800941a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800941c:	6862      	ldr	r2, [r4, #4]
 800941e:	68db      	ldr	r3, [r3, #12]
 8009420:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009424:	6021      	str	r1, [r4, #0]
 8009426:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800942a:	bd70      	pop	{r4, r5, r6, pc}
 800942c:	0800a9a1 	.word	0x0800a9a1
 8009430:	0800aa88 	.word	0x0800aa88

08009434 <__multadd>:
 8009434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009438:	4698      	mov	r8, r3
 800943a:	460c      	mov	r4, r1
 800943c:	2300      	movs	r3, #0
 800943e:	690e      	ldr	r6, [r1, #16]
 8009440:	4607      	mov	r7, r0
 8009442:	f101 0014 	add.w	r0, r1, #20
 8009446:	6805      	ldr	r5, [r0, #0]
 8009448:	3301      	adds	r3, #1
 800944a:	b2a9      	uxth	r1, r5
 800944c:	fb02 8101 	mla	r1, r2, r1, r8
 8009450:	0c2d      	lsrs	r5, r5, #16
 8009452:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8009456:	fb02 c505 	mla	r5, r2, r5, ip
 800945a:	b289      	uxth	r1, r1
 800945c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009460:	429e      	cmp	r6, r3
 8009462:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8009466:	f840 1b04 	str.w	r1, [r0], #4
 800946a:	dcec      	bgt.n	8009446 <__multadd+0x12>
 800946c:	f1b8 0f00 	cmp.w	r8, #0
 8009470:	d022      	beq.n	80094b8 <__multadd+0x84>
 8009472:	68a3      	ldr	r3, [r4, #8]
 8009474:	42b3      	cmp	r3, r6
 8009476:	dc19      	bgt.n	80094ac <__multadd+0x78>
 8009478:	6861      	ldr	r1, [r4, #4]
 800947a:	4638      	mov	r0, r7
 800947c:	3101      	adds	r1, #1
 800947e:	f7ff ff77 	bl	8009370 <_Balloc>
 8009482:	4605      	mov	r5, r0
 8009484:	b928      	cbnz	r0, 8009492 <__multadd+0x5e>
 8009486:	4602      	mov	r2, r0
 8009488:	21b5      	movs	r1, #181	; 0xb5
 800948a:	4b0d      	ldr	r3, [pc, #52]	; (80094c0 <__multadd+0x8c>)
 800948c:	480d      	ldr	r0, [pc, #52]	; (80094c4 <__multadd+0x90>)
 800948e:	f000 febf 	bl	800a210 <__assert_func>
 8009492:	6922      	ldr	r2, [r4, #16]
 8009494:	f104 010c 	add.w	r1, r4, #12
 8009498:	3202      	adds	r2, #2
 800949a:	0092      	lsls	r2, r2, #2
 800949c:	300c      	adds	r0, #12
 800949e:	f7fd ffef 	bl	8007480 <memcpy>
 80094a2:	4621      	mov	r1, r4
 80094a4:	4638      	mov	r0, r7
 80094a6:	f7ff ffa3 	bl	80093f0 <_Bfree>
 80094aa:	462c      	mov	r4, r5
 80094ac:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80094b0:	3601      	adds	r6, #1
 80094b2:	f8c3 8014 	str.w	r8, [r3, #20]
 80094b6:	6126      	str	r6, [r4, #16]
 80094b8:	4620      	mov	r0, r4
 80094ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094be:	bf00      	nop
 80094c0:	0800aa17 	.word	0x0800aa17
 80094c4:	0800aa88 	.word	0x0800aa88

080094c8 <__hi0bits>:
 80094c8:	0c02      	lsrs	r2, r0, #16
 80094ca:	0412      	lsls	r2, r2, #16
 80094cc:	4603      	mov	r3, r0
 80094ce:	b9ca      	cbnz	r2, 8009504 <__hi0bits+0x3c>
 80094d0:	0403      	lsls	r3, r0, #16
 80094d2:	2010      	movs	r0, #16
 80094d4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80094d8:	bf04      	itt	eq
 80094da:	021b      	lsleq	r3, r3, #8
 80094dc:	3008      	addeq	r0, #8
 80094de:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80094e2:	bf04      	itt	eq
 80094e4:	011b      	lsleq	r3, r3, #4
 80094e6:	3004      	addeq	r0, #4
 80094e8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80094ec:	bf04      	itt	eq
 80094ee:	009b      	lsleq	r3, r3, #2
 80094f0:	3002      	addeq	r0, #2
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	db05      	blt.n	8009502 <__hi0bits+0x3a>
 80094f6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80094fa:	f100 0001 	add.w	r0, r0, #1
 80094fe:	bf08      	it	eq
 8009500:	2020      	moveq	r0, #32
 8009502:	4770      	bx	lr
 8009504:	2000      	movs	r0, #0
 8009506:	e7e5      	b.n	80094d4 <__hi0bits+0xc>

08009508 <__lo0bits>:
 8009508:	6803      	ldr	r3, [r0, #0]
 800950a:	4602      	mov	r2, r0
 800950c:	f013 0007 	ands.w	r0, r3, #7
 8009510:	d00b      	beq.n	800952a <__lo0bits+0x22>
 8009512:	07d9      	lsls	r1, r3, #31
 8009514:	d422      	bmi.n	800955c <__lo0bits+0x54>
 8009516:	0798      	lsls	r0, r3, #30
 8009518:	bf49      	itett	mi
 800951a:	085b      	lsrmi	r3, r3, #1
 800951c:	089b      	lsrpl	r3, r3, #2
 800951e:	2001      	movmi	r0, #1
 8009520:	6013      	strmi	r3, [r2, #0]
 8009522:	bf5c      	itt	pl
 8009524:	2002      	movpl	r0, #2
 8009526:	6013      	strpl	r3, [r2, #0]
 8009528:	4770      	bx	lr
 800952a:	b299      	uxth	r1, r3
 800952c:	b909      	cbnz	r1, 8009532 <__lo0bits+0x2a>
 800952e:	2010      	movs	r0, #16
 8009530:	0c1b      	lsrs	r3, r3, #16
 8009532:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009536:	bf04      	itt	eq
 8009538:	0a1b      	lsreq	r3, r3, #8
 800953a:	3008      	addeq	r0, #8
 800953c:	0719      	lsls	r1, r3, #28
 800953e:	bf04      	itt	eq
 8009540:	091b      	lsreq	r3, r3, #4
 8009542:	3004      	addeq	r0, #4
 8009544:	0799      	lsls	r1, r3, #30
 8009546:	bf04      	itt	eq
 8009548:	089b      	lsreq	r3, r3, #2
 800954a:	3002      	addeq	r0, #2
 800954c:	07d9      	lsls	r1, r3, #31
 800954e:	d403      	bmi.n	8009558 <__lo0bits+0x50>
 8009550:	085b      	lsrs	r3, r3, #1
 8009552:	f100 0001 	add.w	r0, r0, #1
 8009556:	d003      	beq.n	8009560 <__lo0bits+0x58>
 8009558:	6013      	str	r3, [r2, #0]
 800955a:	4770      	bx	lr
 800955c:	2000      	movs	r0, #0
 800955e:	4770      	bx	lr
 8009560:	2020      	movs	r0, #32
 8009562:	4770      	bx	lr

08009564 <__i2b>:
 8009564:	b510      	push	{r4, lr}
 8009566:	460c      	mov	r4, r1
 8009568:	2101      	movs	r1, #1
 800956a:	f7ff ff01 	bl	8009370 <_Balloc>
 800956e:	4602      	mov	r2, r0
 8009570:	b928      	cbnz	r0, 800957e <__i2b+0x1a>
 8009572:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009576:	4b04      	ldr	r3, [pc, #16]	; (8009588 <__i2b+0x24>)
 8009578:	4804      	ldr	r0, [pc, #16]	; (800958c <__i2b+0x28>)
 800957a:	f000 fe49 	bl	800a210 <__assert_func>
 800957e:	2301      	movs	r3, #1
 8009580:	6144      	str	r4, [r0, #20]
 8009582:	6103      	str	r3, [r0, #16]
 8009584:	bd10      	pop	{r4, pc}
 8009586:	bf00      	nop
 8009588:	0800aa17 	.word	0x0800aa17
 800958c:	0800aa88 	.word	0x0800aa88

08009590 <__multiply>:
 8009590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009594:	4614      	mov	r4, r2
 8009596:	690a      	ldr	r2, [r1, #16]
 8009598:	6923      	ldr	r3, [r4, #16]
 800959a:	460d      	mov	r5, r1
 800959c:	429a      	cmp	r2, r3
 800959e:	bfbe      	ittt	lt
 80095a0:	460b      	movlt	r3, r1
 80095a2:	4625      	movlt	r5, r4
 80095a4:	461c      	movlt	r4, r3
 80095a6:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80095aa:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80095ae:	68ab      	ldr	r3, [r5, #8]
 80095b0:	6869      	ldr	r1, [r5, #4]
 80095b2:	eb0a 0709 	add.w	r7, sl, r9
 80095b6:	42bb      	cmp	r3, r7
 80095b8:	b085      	sub	sp, #20
 80095ba:	bfb8      	it	lt
 80095bc:	3101      	addlt	r1, #1
 80095be:	f7ff fed7 	bl	8009370 <_Balloc>
 80095c2:	b930      	cbnz	r0, 80095d2 <__multiply+0x42>
 80095c4:	4602      	mov	r2, r0
 80095c6:	f240 115d 	movw	r1, #349	; 0x15d
 80095ca:	4b41      	ldr	r3, [pc, #260]	; (80096d0 <__multiply+0x140>)
 80095cc:	4841      	ldr	r0, [pc, #260]	; (80096d4 <__multiply+0x144>)
 80095ce:	f000 fe1f 	bl	800a210 <__assert_func>
 80095d2:	f100 0614 	add.w	r6, r0, #20
 80095d6:	4633      	mov	r3, r6
 80095d8:	2200      	movs	r2, #0
 80095da:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80095de:	4543      	cmp	r3, r8
 80095e0:	d31e      	bcc.n	8009620 <__multiply+0x90>
 80095e2:	f105 0c14 	add.w	ip, r5, #20
 80095e6:	f104 0314 	add.w	r3, r4, #20
 80095ea:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80095ee:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80095f2:	9202      	str	r2, [sp, #8]
 80095f4:	ebac 0205 	sub.w	r2, ip, r5
 80095f8:	3a15      	subs	r2, #21
 80095fa:	f022 0203 	bic.w	r2, r2, #3
 80095fe:	3204      	adds	r2, #4
 8009600:	f105 0115 	add.w	r1, r5, #21
 8009604:	458c      	cmp	ip, r1
 8009606:	bf38      	it	cc
 8009608:	2204      	movcc	r2, #4
 800960a:	9201      	str	r2, [sp, #4]
 800960c:	9a02      	ldr	r2, [sp, #8]
 800960e:	9303      	str	r3, [sp, #12]
 8009610:	429a      	cmp	r2, r3
 8009612:	d808      	bhi.n	8009626 <__multiply+0x96>
 8009614:	2f00      	cmp	r7, #0
 8009616:	dc55      	bgt.n	80096c4 <__multiply+0x134>
 8009618:	6107      	str	r7, [r0, #16]
 800961a:	b005      	add	sp, #20
 800961c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009620:	f843 2b04 	str.w	r2, [r3], #4
 8009624:	e7db      	b.n	80095de <__multiply+0x4e>
 8009626:	f8b3 a000 	ldrh.w	sl, [r3]
 800962a:	f1ba 0f00 	cmp.w	sl, #0
 800962e:	d020      	beq.n	8009672 <__multiply+0xe2>
 8009630:	46b1      	mov	r9, r6
 8009632:	2200      	movs	r2, #0
 8009634:	f105 0e14 	add.w	lr, r5, #20
 8009638:	f85e 4b04 	ldr.w	r4, [lr], #4
 800963c:	f8d9 b000 	ldr.w	fp, [r9]
 8009640:	b2a1      	uxth	r1, r4
 8009642:	fa1f fb8b 	uxth.w	fp, fp
 8009646:	fb0a b101 	mla	r1, sl, r1, fp
 800964a:	4411      	add	r1, r2
 800964c:	f8d9 2000 	ldr.w	r2, [r9]
 8009650:	0c24      	lsrs	r4, r4, #16
 8009652:	0c12      	lsrs	r2, r2, #16
 8009654:	fb0a 2404 	mla	r4, sl, r4, r2
 8009658:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800965c:	b289      	uxth	r1, r1
 800965e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009662:	45f4      	cmp	ip, lr
 8009664:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009668:	f849 1b04 	str.w	r1, [r9], #4
 800966c:	d8e4      	bhi.n	8009638 <__multiply+0xa8>
 800966e:	9901      	ldr	r1, [sp, #4]
 8009670:	5072      	str	r2, [r6, r1]
 8009672:	9a03      	ldr	r2, [sp, #12]
 8009674:	3304      	adds	r3, #4
 8009676:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800967a:	f1b9 0f00 	cmp.w	r9, #0
 800967e:	d01f      	beq.n	80096c0 <__multiply+0x130>
 8009680:	46b6      	mov	lr, r6
 8009682:	f04f 0a00 	mov.w	sl, #0
 8009686:	6834      	ldr	r4, [r6, #0]
 8009688:	f105 0114 	add.w	r1, r5, #20
 800968c:	880a      	ldrh	r2, [r1, #0]
 800968e:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009692:	b2a4      	uxth	r4, r4
 8009694:	fb09 b202 	mla	r2, r9, r2, fp
 8009698:	4492      	add	sl, r2
 800969a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800969e:	f84e 4b04 	str.w	r4, [lr], #4
 80096a2:	f851 4b04 	ldr.w	r4, [r1], #4
 80096a6:	f8be 2000 	ldrh.w	r2, [lr]
 80096aa:	0c24      	lsrs	r4, r4, #16
 80096ac:	fb09 2404 	mla	r4, r9, r4, r2
 80096b0:	458c      	cmp	ip, r1
 80096b2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80096b6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80096ba:	d8e7      	bhi.n	800968c <__multiply+0xfc>
 80096bc:	9a01      	ldr	r2, [sp, #4]
 80096be:	50b4      	str	r4, [r6, r2]
 80096c0:	3604      	adds	r6, #4
 80096c2:	e7a3      	b.n	800960c <__multiply+0x7c>
 80096c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d1a5      	bne.n	8009618 <__multiply+0x88>
 80096cc:	3f01      	subs	r7, #1
 80096ce:	e7a1      	b.n	8009614 <__multiply+0x84>
 80096d0:	0800aa17 	.word	0x0800aa17
 80096d4:	0800aa88 	.word	0x0800aa88

080096d8 <__pow5mult>:
 80096d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096dc:	4615      	mov	r5, r2
 80096de:	f012 0203 	ands.w	r2, r2, #3
 80096e2:	4606      	mov	r6, r0
 80096e4:	460f      	mov	r7, r1
 80096e6:	d007      	beq.n	80096f8 <__pow5mult+0x20>
 80096e8:	4c25      	ldr	r4, [pc, #148]	; (8009780 <__pow5mult+0xa8>)
 80096ea:	3a01      	subs	r2, #1
 80096ec:	2300      	movs	r3, #0
 80096ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80096f2:	f7ff fe9f 	bl	8009434 <__multadd>
 80096f6:	4607      	mov	r7, r0
 80096f8:	10ad      	asrs	r5, r5, #2
 80096fa:	d03d      	beq.n	8009778 <__pow5mult+0xa0>
 80096fc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80096fe:	b97c      	cbnz	r4, 8009720 <__pow5mult+0x48>
 8009700:	2010      	movs	r0, #16
 8009702:	f7ff fe1f 	bl	8009344 <malloc>
 8009706:	4602      	mov	r2, r0
 8009708:	6270      	str	r0, [r6, #36]	; 0x24
 800970a:	b928      	cbnz	r0, 8009718 <__pow5mult+0x40>
 800970c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009710:	4b1c      	ldr	r3, [pc, #112]	; (8009784 <__pow5mult+0xac>)
 8009712:	481d      	ldr	r0, [pc, #116]	; (8009788 <__pow5mult+0xb0>)
 8009714:	f000 fd7c 	bl	800a210 <__assert_func>
 8009718:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800971c:	6004      	str	r4, [r0, #0]
 800971e:	60c4      	str	r4, [r0, #12]
 8009720:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009724:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009728:	b94c      	cbnz	r4, 800973e <__pow5mult+0x66>
 800972a:	f240 2171 	movw	r1, #625	; 0x271
 800972e:	4630      	mov	r0, r6
 8009730:	f7ff ff18 	bl	8009564 <__i2b>
 8009734:	2300      	movs	r3, #0
 8009736:	4604      	mov	r4, r0
 8009738:	f8c8 0008 	str.w	r0, [r8, #8]
 800973c:	6003      	str	r3, [r0, #0]
 800973e:	f04f 0900 	mov.w	r9, #0
 8009742:	07eb      	lsls	r3, r5, #31
 8009744:	d50a      	bpl.n	800975c <__pow5mult+0x84>
 8009746:	4639      	mov	r1, r7
 8009748:	4622      	mov	r2, r4
 800974a:	4630      	mov	r0, r6
 800974c:	f7ff ff20 	bl	8009590 <__multiply>
 8009750:	4680      	mov	r8, r0
 8009752:	4639      	mov	r1, r7
 8009754:	4630      	mov	r0, r6
 8009756:	f7ff fe4b 	bl	80093f0 <_Bfree>
 800975a:	4647      	mov	r7, r8
 800975c:	106d      	asrs	r5, r5, #1
 800975e:	d00b      	beq.n	8009778 <__pow5mult+0xa0>
 8009760:	6820      	ldr	r0, [r4, #0]
 8009762:	b938      	cbnz	r0, 8009774 <__pow5mult+0x9c>
 8009764:	4622      	mov	r2, r4
 8009766:	4621      	mov	r1, r4
 8009768:	4630      	mov	r0, r6
 800976a:	f7ff ff11 	bl	8009590 <__multiply>
 800976e:	6020      	str	r0, [r4, #0]
 8009770:	f8c0 9000 	str.w	r9, [r0]
 8009774:	4604      	mov	r4, r0
 8009776:	e7e4      	b.n	8009742 <__pow5mult+0x6a>
 8009778:	4638      	mov	r0, r7
 800977a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800977e:	bf00      	nop
 8009780:	0800abd8 	.word	0x0800abd8
 8009784:	0800a9a1 	.word	0x0800a9a1
 8009788:	0800aa88 	.word	0x0800aa88

0800978c <__lshift>:
 800978c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009790:	460c      	mov	r4, r1
 8009792:	4607      	mov	r7, r0
 8009794:	4691      	mov	r9, r2
 8009796:	6923      	ldr	r3, [r4, #16]
 8009798:	6849      	ldr	r1, [r1, #4]
 800979a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800979e:	68a3      	ldr	r3, [r4, #8]
 80097a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80097a4:	f108 0601 	add.w	r6, r8, #1
 80097a8:	42b3      	cmp	r3, r6
 80097aa:	db0b      	blt.n	80097c4 <__lshift+0x38>
 80097ac:	4638      	mov	r0, r7
 80097ae:	f7ff fddf 	bl	8009370 <_Balloc>
 80097b2:	4605      	mov	r5, r0
 80097b4:	b948      	cbnz	r0, 80097ca <__lshift+0x3e>
 80097b6:	4602      	mov	r2, r0
 80097b8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80097bc:	4b27      	ldr	r3, [pc, #156]	; (800985c <__lshift+0xd0>)
 80097be:	4828      	ldr	r0, [pc, #160]	; (8009860 <__lshift+0xd4>)
 80097c0:	f000 fd26 	bl	800a210 <__assert_func>
 80097c4:	3101      	adds	r1, #1
 80097c6:	005b      	lsls	r3, r3, #1
 80097c8:	e7ee      	b.n	80097a8 <__lshift+0x1c>
 80097ca:	2300      	movs	r3, #0
 80097cc:	f100 0114 	add.w	r1, r0, #20
 80097d0:	f100 0210 	add.w	r2, r0, #16
 80097d4:	4618      	mov	r0, r3
 80097d6:	4553      	cmp	r3, sl
 80097d8:	db33      	blt.n	8009842 <__lshift+0xb6>
 80097da:	6920      	ldr	r0, [r4, #16]
 80097dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80097e0:	f104 0314 	add.w	r3, r4, #20
 80097e4:	f019 091f 	ands.w	r9, r9, #31
 80097e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80097ec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80097f0:	d02b      	beq.n	800984a <__lshift+0xbe>
 80097f2:	468a      	mov	sl, r1
 80097f4:	2200      	movs	r2, #0
 80097f6:	f1c9 0e20 	rsb	lr, r9, #32
 80097fa:	6818      	ldr	r0, [r3, #0]
 80097fc:	fa00 f009 	lsl.w	r0, r0, r9
 8009800:	4302      	orrs	r2, r0
 8009802:	f84a 2b04 	str.w	r2, [sl], #4
 8009806:	f853 2b04 	ldr.w	r2, [r3], #4
 800980a:	459c      	cmp	ip, r3
 800980c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009810:	d8f3      	bhi.n	80097fa <__lshift+0x6e>
 8009812:	ebac 0304 	sub.w	r3, ip, r4
 8009816:	3b15      	subs	r3, #21
 8009818:	f023 0303 	bic.w	r3, r3, #3
 800981c:	3304      	adds	r3, #4
 800981e:	f104 0015 	add.w	r0, r4, #21
 8009822:	4584      	cmp	ip, r0
 8009824:	bf38      	it	cc
 8009826:	2304      	movcc	r3, #4
 8009828:	50ca      	str	r2, [r1, r3]
 800982a:	b10a      	cbz	r2, 8009830 <__lshift+0xa4>
 800982c:	f108 0602 	add.w	r6, r8, #2
 8009830:	3e01      	subs	r6, #1
 8009832:	4638      	mov	r0, r7
 8009834:	4621      	mov	r1, r4
 8009836:	612e      	str	r6, [r5, #16]
 8009838:	f7ff fdda 	bl	80093f0 <_Bfree>
 800983c:	4628      	mov	r0, r5
 800983e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009842:	f842 0f04 	str.w	r0, [r2, #4]!
 8009846:	3301      	adds	r3, #1
 8009848:	e7c5      	b.n	80097d6 <__lshift+0x4a>
 800984a:	3904      	subs	r1, #4
 800984c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009850:	459c      	cmp	ip, r3
 8009852:	f841 2f04 	str.w	r2, [r1, #4]!
 8009856:	d8f9      	bhi.n	800984c <__lshift+0xc0>
 8009858:	e7ea      	b.n	8009830 <__lshift+0xa4>
 800985a:	bf00      	nop
 800985c:	0800aa17 	.word	0x0800aa17
 8009860:	0800aa88 	.word	0x0800aa88

08009864 <__mcmp>:
 8009864:	4603      	mov	r3, r0
 8009866:	690a      	ldr	r2, [r1, #16]
 8009868:	6900      	ldr	r0, [r0, #16]
 800986a:	b530      	push	{r4, r5, lr}
 800986c:	1a80      	subs	r0, r0, r2
 800986e:	d10d      	bne.n	800988c <__mcmp+0x28>
 8009870:	3314      	adds	r3, #20
 8009872:	3114      	adds	r1, #20
 8009874:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009878:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800987c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009880:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009884:	4295      	cmp	r5, r2
 8009886:	d002      	beq.n	800988e <__mcmp+0x2a>
 8009888:	d304      	bcc.n	8009894 <__mcmp+0x30>
 800988a:	2001      	movs	r0, #1
 800988c:	bd30      	pop	{r4, r5, pc}
 800988e:	42a3      	cmp	r3, r4
 8009890:	d3f4      	bcc.n	800987c <__mcmp+0x18>
 8009892:	e7fb      	b.n	800988c <__mcmp+0x28>
 8009894:	f04f 30ff 	mov.w	r0, #4294967295
 8009898:	e7f8      	b.n	800988c <__mcmp+0x28>
	...

0800989c <__mdiff>:
 800989c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098a0:	460c      	mov	r4, r1
 80098a2:	4606      	mov	r6, r0
 80098a4:	4611      	mov	r1, r2
 80098a6:	4620      	mov	r0, r4
 80098a8:	4692      	mov	sl, r2
 80098aa:	f7ff ffdb 	bl	8009864 <__mcmp>
 80098ae:	1e05      	subs	r5, r0, #0
 80098b0:	d111      	bne.n	80098d6 <__mdiff+0x3a>
 80098b2:	4629      	mov	r1, r5
 80098b4:	4630      	mov	r0, r6
 80098b6:	f7ff fd5b 	bl	8009370 <_Balloc>
 80098ba:	4602      	mov	r2, r0
 80098bc:	b928      	cbnz	r0, 80098ca <__mdiff+0x2e>
 80098be:	f240 2132 	movw	r1, #562	; 0x232
 80098c2:	4b3c      	ldr	r3, [pc, #240]	; (80099b4 <__mdiff+0x118>)
 80098c4:	483c      	ldr	r0, [pc, #240]	; (80099b8 <__mdiff+0x11c>)
 80098c6:	f000 fca3 	bl	800a210 <__assert_func>
 80098ca:	2301      	movs	r3, #1
 80098cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80098d0:	4610      	mov	r0, r2
 80098d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098d6:	bfa4      	itt	ge
 80098d8:	4653      	movge	r3, sl
 80098da:	46a2      	movge	sl, r4
 80098dc:	4630      	mov	r0, r6
 80098de:	f8da 1004 	ldr.w	r1, [sl, #4]
 80098e2:	bfa6      	itte	ge
 80098e4:	461c      	movge	r4, r3
 80098e6:	2500      	movge	r5, #0
 80098e8:	2501      	movlt	r5, #1
 80098ea:	f7ff fd41 	bl	8009370 <_Balloc>
 80098ee:	4602      	mov	r2, r0
 80098f0:	b918      	cbnz	r0, 80098fa <__mdiff+0x5e>
 80098f2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80098f6:	4b2f      	ldr	r3, [pc, #188]	; (80099b4 <__mdiff+0x118>)
 80098f8:	e7e4      	b.n	80098c4 <__mdiff+0x28>
 80098fa:	f100 0814 	add.w	r8, r0, #20
 80098fe:	f8da 7010 	ldr.w	r7, [sl, #16]
 8009902:	60c5      	str	r5, [r0, #12]
 8009904:	f04f 0c00 	mov.w	ip, #0
 8009908:	f10a 0514 	add.w	r5, sl, #20
 800990c:	f10a 0010 	add.w	r0, sl, #16
 8009910:	46c2      	mov	sl, r8
 8009912:	6926      	ldr	r6, [r4, #16]
 8009914:	f104 0914 	add.w	r9, r4, #20
 8009918:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800991c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009920:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8009924:	f859 3b04 	ldr.w	r3, [r9], #4
 8009928:	fa1f f18b 	uxth.w	r1, fp
 800992c:	4461      	add	r1, ip
 800992e:	fa1f fc83 	uxth.w	ip, r3
 8009932:	0c1b      	lsrs	r3, r3, #16
 8009934:	eba1 010c 	sub.w	r1, r1, ip
 8009938:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800993c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009940:	b289      	uxth	r1, r1
 8009942:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8009946:	454e      	cmp	r6, r9
 8009948:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800994c:	f84a 3b04 	str.w	r3, [sl], #4
 8009950:	d8e6      	bhi.n	8009920 <__mdiff+0x84>
 8009952:	1b33      	subs	r3, r6, r4
 8009954:	3b15      	subs	r3, #21
 8009956:	f023 0303 	bic.w	r3, r3, #3
 800995a:	3415      	adds	r4, #21
 800995c:	3304      	adds	r3, #4
 800995e:	42a6      	cmp	r6, r4
 8009960:	bf38      	it	cc
 8009962:	2304      	movcc	r3, #4
 8009964:	441d      	add	r5, r3
 8009966:	4443      	add	r3, r8
 8009968:	461e      	mov	r6, r3
 800996a:	462c      	mov	r4, r5
 800996c:	4574      	cmp	r4, lr
 800996e:	d30e      	bcc.n	800998e <__mdiff+0xf2>
 8009970:	f10e 0103 	add.w	r1, lr, #3
 8009974:	1b49      	subs	r1, r1, r5
 8009976:	f021 0103 	bic.w	r1, r1, #3
 800997a:	3d03      	subs	r5, #3
 800997c:	45ae      	cmp	lr, r5
 800997e:	bf38      	it	cc
 8009980:	2100      	movcc	r1, #0
 8009982:	4419      	add	r1, r3
 8009984:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009988:	b18b      	cbz	r3, 80099ae <__mdiff+0x112>
 800998a:	6117      	str	r7, [r2, #16]
 800998c:	e7a0      	b.n	80098d0 <__mdiff+0x34>
 800998e:	f854 8b04 	ldr.w	r8, [r4], #4
 8009992:	fa1f f188 	uxth.w	r1, r8
 8009996:	4461      	add	r1, ip
 8009998:	1408      	asrs	r0, r1, #16
 800999a:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800999e:	b289      	uxth	r1, r1
 80099a0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80099a4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80099a8:	f846 1b04 	str.w	r1, [r6], #4
 80099ac:	e7de      	b.n	800996c <__mdiff+0xd0>
 80099ae:	3f01      	subs	r7, #1
 80099b0:	e7e8      	b.n	8009984 <__mdiff+0xe8>
 80099b2:	bf00      	nop
 80099b4:	0800aa17 	.word	0x0800aa17
 80099b8:	0800aa88 	.word	0x0800aa88

080099bc <__d2b>:
 80099bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80099c0:	2101      	movs	r1, #1
 80099c2:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80099c6:	4690      	mov	r8, r2
 80099c8:	461d      	mov	r5, r3
 80099ca:	f7ff fcd1 	bl	8009370 <_Balloc>
 80099ce:	4604      	mov	r4, r0
 80099d0:	b930      	cbnz	r0, 80099e0 <__d2b+0x24>
 80099d2:	4602      	mov	r2, r0
 80099d4:	f240 310a 	movw	r1, #778	; 0x30a
 80099d8:	4b24      	ldr	r3, [pc, #144]	; (8009a6c <__d2b+0xb0>)
 80099da:	4825      	ldr	r0, [pc, #148]	; (8009a70 <__d2b+0xb4>)
 80099dc:	f000 fc18 	bl	800a210 <__assert_func>
 80099e0:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80099e4:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80099e8:	bb2d      	cbnz	r5, 8009a36 <__d2b+0x7a>
 80099ea:	9301      	str	r3, [sp, #4]
 80099ec:	f1b8 0300 	subs.w	r3, r8, #0
 80099f0:	d026      	beq.n	8009a40 <__d2b+0x84>
 80099f2:	4668      	mov	r0, sp
 80099f4:	9300      	str	r3, [sp, #0]
 80099f6:	f7ff fd87 	bl	8009508 <__lo0bits>
 80099fa:	9900      	ldr	r1, [sp, #0]
 80099fc:	b1f0      	cbz	r0, 8009a3c <__d2b+0x80>
 80099fe:	9a01      	ldr	r2, [sp, #4]
 8009a00:	f1c0 0320 	rsb	r3, r0, #32
 8009a04:	fa02 f303 	lsl.w	r3, r2, r3
 8009a08:	430b      	orrs	r3, r1
 8009a0a:	40c2      	lsrs	r2, r0
 8009a0c:	6163      	str	r3, [r4, #20]
 8009a0e:	9201      	str	r2, [sp, #4]
 8009a10:	9b01      	ldr	r3, [sp, #4]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	bf14      	ite	ne
 8009a16:	2102      	movne	r1, #2
 8009a18:	2101      	moveq	r1, #1
 8009a1a:	61a3      	str	r3, [r4, #24]
 8009a1c:	6121      	str	r1, [r4, #16]
 8009a1e:	b1c5      	cbz	r5, 8009a52 <__d2b+0x96>
 8009a20:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009a24:	4405      	add	r5, r0
 8009a26:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009a2a:	603d      	str	r5, [r7, #0]
 8009a2c:	6030      	str	r0, [r6, #0]
 8009a2e:	4620      	mov	r0, r4
 8009a30:	b002      	add	sp, #8
 8009a32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009a3a:	e7d6      	b.n	80099ea <__d2b+0x2e>
 8009a3c:	6161      	str	r1, [r4, #20]
 8009a3e:	e7e7      	b.n	8009a10 <__d2b+0x54>
 8009a40:	a801      	add	r0, sp, #4
 8009a42:	f7ff fd61 	bl	8009508 <__lo0bits>
 8009a46:	2101      	movs	r1, #1
 8009a48:	9b01      	ldr	r3, [sp, #4]
 8009a4a:	6121      	str	r1, [r4, #16]
 8009a4c:	6163      	str	r3, [r4, #20]
 8009a4e:	3020      	adds	r0, #32
 8009a50:	e7e5      	b.n	8009a1e <__d2b+0x62>
 8009a52:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8009a56:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009a5a:	6038      	str	r0, [r7, #0]
 8009a5c:	6918      	ldr	r0, [r3, #16]
 8009a5e:	f7ff fd33 	bl	80094c8 <__hi0bits>
 8009a62:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8009a66:	6031      	str	r1, [r6, #0]
 8009a68:	e7e1      	b.n	8009a2e <__d2b+0x72>
 8009a6a:	bf00      	nop
 8009a6c:	0800aa17 	.word	0x0800aa17
 8009a70:	0800aa88 	.word	0x0800aa88

08009a74 <_calloc_r>:
 8009a74:	b538      	push	{r3, r4, r5, lr}
 8009a76:	fb02 f501 	mul.w	r5, r2, r1
 8009a7a:	4629      	mov	r1, r5
 8009a7c:	f000 f854 	bl	8009b28 <_malloc_r>
 8009a80:	4604      	mov	r4, r0
 8009a82:	b118      	cbz	r0, 8009a8c <_calloc_r+0x18>
 8009a84:	462a      	mov	r2, r5
 8009a86:	2100      	movs	r1, #0
 8009a88:	f7fd fd08 	bl	800749c <memset>
 8009a8c:	4620      	mov	r0, r4
 8009a8e:	bd38      	pop	{r3, r4, r5, pc}

08009a90 <_free_r>:
 8009a90:	b538      	push	{r3, r4, r5, lr}
 8009a92:	4605      	mov	r5, r0
 8009a94:	2900      	cmp	r1, #0
 8009a96:	d043      	beq.n	8009b20 <_free_r+0x90>
 8009a98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a9c:	1f0c      	subs	r4, r1, #4
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	bfb8      	it	lt
 8009aa2:	18e4      	addlt	r4, r4, r3
 8009aa4:	f000 fc54 	bl	800a350 <__malloc_lock>
 8009aa8:	4a1e      	ldr	r2, [pc, #120]	; (8009b24 <_free_r+0x94>)
 8009aaa:	6813      	ldr	r3, [r2, #0]
 8009aac:	4610      	mov	r0, r2
 8009aae:	b933      	cbnz	r3, 8009abe <_free_r+0x2e>
 8009ab0:	6063      	str	r3, [r4, #4]
 8009ab2:	6014      	str	r4, [r2, #0]
 8009ab4:	4628      	mov	r0, r5
 8009ab6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009aba:	f000 bc4f 	b.w	800a35c <__malloc_unlock>
 8009abe:	42a3      	cmp	r3, r4
 8009ac0:	d90a      	bls.n	8009ad8 <_free_r+0x48>
 8009ac2:	6821      	ldr	r1, [r4, #0]
 8009ac4:	1862      	adds	r2, r4, r1
 8009ac6:	4293      	cmp	r3, r2
 8009ac8:	bf01      	itttt	eq
 8009aca:	681a      	ldreq	r2, [r3, #0]
 8009acc:	685b      	ldreq	r3, [r3, #4]
 8009ace:	1852      	addeq	r2, r2, r1
 8009ad0:	6022      	streq	r2, [r4, #0]
 8009ad2:	6063      	str	r3, [r4, #4]
 8009ad4:	6004      	str	r4, [r0, #0]
 8009ad6:	e7ed      	b.n	8009ab4 <_free_r+0x24>
 8009ad8:	461a      	mov	r2, r3
 8009ada:	685b      	ldr	r3, [r3, #4]
 8009adc:	b10b      	cbz	r3, 8009ae2 <_free_r+0x52>
 8009ade:	42a3      	cmp	r3, r4
 8009ae0:	d9fa      	bls.n	8009ad8 <_free_r+0x48>
 8009ae2:	6811      	ldr	r1, [r2, #0]
 8009ae4:	1850      	adds	r0, r2, r1
 8009ae6:	42a0      	cmp	r0, r4
 8009ae8:	d10b      	bne.n	8009b02 <_free_r+0x72>
 8009aea:	6820      	ldr	r0, [r4, #0]
 8009aec:	4401      	add	r1, r0
 8009aee:	1850      	adds	r0, r2, r1
 8009af0:	4283      	cmp	r3, r0
 8009af2:	6011      	str	r1, [r2, #0]
 8009af4:	d1de      	bne.n	8009ab4 <_free_r+0x24>
 8009af6:	6818      	ldr	r0, [r3, #0]
 8009af8:	685b      	ldr	r3, [r3, #4]
 8009afa:	4401      	add	r1, r0
 8009afc:	6011      	str	r1, [r2, #0]
 8009afe:	6053      	str	r3, [r2, #4]
 8009b00:	e7d8      	b.n	8009ab4 <_free_r+0x24>
 8009b02:	d902      	bls.n	8009b0a <_free_r+0x7a>
 8009b04:	230c      	movs	r3, #12
 8009b06:	602b      	str	r3, [r5, #0]
 8009b08:	e7d4      	b.n	8009ab4 <_free_r+0x24>
 8009b0a:	6820      	ldr	r0, [r4, #0]
 8009b0c:	1821      	adds	r1, r4, r0
 8009b0e:	428b      	cmp	r3, r1
 8009b10:	bf01      	itttt	eq
 8009b12:	6819      	ldreq	r1, [r3, #0]
 8009b14:	685b      	ldreq	r3, [r3, #4]
 8009b16:	1809      	addeq	r1, r1, r0
 8009b18:	6021      	streq	r1, [r4, #0]
 8009b1a:	6063      	str	r3, [r4, #4]
 8009b1c:	6054      	str	r4, [r2, #4]
 8009b1e:	e7c9      	b.n	8009ab4 <_free_r+0x24>
 8009b20:	bd38      	pop	{r3, r4, r5, pc}
 8009b22:	bf00      	nop
 8009b24:	20000328 	.word	0x20000328

08009b28 <_malloc_r>:
 8009b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b2a:	1ccd      	adds	r5, r1, #3
 8009b2c:	f025 0503 	bic.w	r5, r5, #3
 8009b30:	3508      	adds	r5, #8
 8009b32:	2d0c      	cmp	r5, #12
 8009b34:	bf38      	it	cc
 8009b36:	250c      	movcc	r5, #12
 8009b38:	2d00      	cmp	r5, #0
 8009b3a:	4606      	mov	r6, r0
 8009b3c:	db01      	blt.n	8009b42 <_malloc_r+0x1a>
 8009b3e:	42a9      	cmp	r1, r5
 8009b40:	d903      	bls.n	8009b4a <_malloc_r+0x22>
 8009b42:	230c      	movs	r3, #12
 8009b44:	6033      	str	r3, [r6, #0]
 8009b46:	2000      	movs	r0, #0
 8009b48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b4a:	f000 fc01 	bl	800a350 <__malloc_lock>
 8009b4e:	4921      	ldr	r1, [pc, #132]	; (8009bd4 <_malloc_r+0xac>)
 8009b50:	680a      	ldr	r2, [r1, #0]
 8009b52:	4614      	mov	r4, r2
 8009b54:	b99c      	cbnz	r4, 8009b7e <_malloc_r+0x56>
 8009b56:	4f20      	ldr	r7, [pc, #128]	; (8009bd8 <_malloc_r+0xb0>)
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	b923      	cbnz	r3, 8009b66 <_malloc_r+0x3e>
 8009b5c:	4621      	mov	r1, r4
 8009b5e:	4630      	mov	r0, r6
 8009b60:	f000 faf0 	bl	800a144 <_sbrk_r>
 8009b64:	6038      	str	r0, [r7, #0]
 8009b66:	4629      	mov	r1, r5
 8009b68:	4630      	mov	r0, r6
 8009b6a:	f000 faeb 	bl	800a144 <_sbrk_r>
 8009b6e:	1c43      	adds	r3, r0, #1
 8009b70:	d123      	bne.n	8009bba <_malloc_r+0x92>
 8009b72:	230c      	movs	r3, #12
 8009b74:	4630      	mov	r0, r6
 8009b76:	6033      	str	r3, [r6, #0]
 8009b78:	f000 fbf0 	bl	800a35c <__malloc_unlock>
 8009b7c:	e7e3      	b.n	8009b46 <_malloc_r+0x1e>
 8009b7e:	6823      	ldr	r3, [r4, #0]
 8009b80:	1b5b      	subs	r3, r3, r5
 8009b82:	d417      	bmi.n	8009bb4 <_malloc_r+0x8c>
 8009b84:	2b0b      	cmp	r3, #11
 8009b86:	d903      	bls.n	8009b90 <_malloc_r+0x68>
 8009b88:	6023      	str	r3, [r4, #0]
 8009b8a:	441c      	add	r4, r3
 8009b8c:	6025      	str	r5, [r4, #0]
 8009b8e:	e004      	b.n	8009b9a <_malloc_r+0x72>
 8009b90:	6863      	ldr	r3, [r4, #4]
 8009b92:	42a2      	cmp	r2, r4
 8009b94:	bf0c      	ite	eq
 8009b96:	600b      	streq	r3, [r1, #0]
 8009b98:	6053      	strne	r3, [r2, #4]
 8009b9a:	4630      	mov	r0, r6
 8009b9c:	f000 fbde 	bl	800a35c <__malloc_unlock>
 8009ba0:	f104 000b 	add.w	r0, r4, #11
 8009ba4:	1d23      	adds	r3, r4, #4
 8009ba6:	f020 0007 	bic.w	r0, r0, #7
 8009baa:	1ac2      	subs	r2, r0, r3
 8009bac:	d0cc      	beq.n	8009b48 <_malloc_r+0x20>
 8009bae:	1a1b      	subs	r3, r3, r0
 8009bb0:	50a3      	str	r3, [r4, r2]
 8009bb2:	e7c9      	b.n	8009b48 <_malloc_r+0x20>
 8009bb4:	4622      	mov	r2, r4
 8009bb6:	6864      	ldr	r4, [r4, #4]
 8009bb8:	e7cc      	b.n	8009b54 <_malloc_r+0x2c>
 8009bba:	1cc4      	adds	r4, r0, #3
 8009bbc:	f024 0403 	bic.w	r4, r4, #3
 8009bc0:	42a0      	cmp	r0, r4
 8009bc2:	d0e3      	beq.n	8009b8c <_malloc_r+0x64>
 8009bc4:	1a21      	subs	r1, r4, r0
 8009bc6:	4630      	mov	r0, r6
 8009bc8:	f000 fabc 	bl	800a144 <_sbrk_r>
 8009bcc:	3001      	adds	r0, #1
 8009bce:	d1dd      	bne.n	8009b8c <_malloc_r+0x64>
 8009bd0:	e7cf      	b.n	8009b72 <_malloc_r+0x4a>
 8009bd2:	bf00      	nop
 8009bd4:	20000328 	.word	0x20000328
 8009bd8:	2000032c 	.word	0x2000032c

08009bdc <__ssputs_r>:
 8009bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009be0:	688e      	ldr	r6, [r1, #8]
 8009be2:	4682      	mov	sl, r0
 8009be4:	429e      	cmp	r6, r3
 8009be6:	460c      	mov	r4, r1
 8009be8:	4690      	mov	r8, r2
 8009bea:	461f      	mov	r7, r3
 8009bec:	d838      	bhi.n	8009c60 <__ssputs_r+0x84>
 8009bee:	898a      	ldrh	r2, [r1, #12]
 8009bf0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009bf4:	d032      	beq.n	8009c5c <__ssputs_r+0x80>
 8009bf6:	6825      	ldr	r5, [r4, #0]
 8009bf8:	6909      	ldr	r1, [r1, #16]
 8009bfa:	3301      	adds	r3, #1
 8009bfc:	eba5 0901 	sub.w	r9, r5, r1
 8009c00:	6965      	ldr	r5, [r4, #20]
 8009c02:	444b      	add	r3, r9
 8009c04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009c08:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009c0c:	106d      	asrs	r5, r5, #1
 8009c0e:	429d      	cmp	r5, r3
 8009c10:	bf38      	it	cc
 8009c12:	461d      	movcc	r5, r3
 8009c14:	0553      	lsls	r3, r2, #21
 8009c16:	d531      	bpl.n	8009c7c <__ssputs_r+0xa0>
 8009c18:	4629      	mov	r1, r5
 8009c1a:	f7ff ff85 	bl	8009b28 <_malloc_r>
 8009c1e:	4606      	mov	r6, r0
 8009c20:	b950      	cbnz	r0, 8009c38 <__ssputs_r+0x5c>
 8009c22:	230c      	movs	r3, #12
 8009c24:	f04f 30ff 	mov.w	r0, #4294967295
 8009c28:	f8ca 3000 	str.w	r3, [sl]
 8009c2c:	89a3      	ldrh	r3, [r4, #12]
 8009c2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c32:	81a3      	strh	r3, [r4, #12]
 8009c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c38:	464a      	mov	r2, r9
 8009c3a:	6921      	ldr	r1, [r4, #16]
 8009c3c:	f7fd fc20 	bl	8007480 <memcpy>
 8009c40:	89a3      	ldrh	r3, [r4, #12]
 8009c42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009c46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c4a:	81a3      	strh	r3, [r4, #12]
 8009c4c:	6126      	str	r6, [r4, #16]
 8009c4e:	444e      	add	r6, r9
 8009c50:	6026      	str	r6, [r4, #0]
 8009c52:	463e      	mov	r6, r7
 8009c54:	6165      	str	r5, [r4, #20]
 8009c56:	eba5 0509 	sub.w	r5, r5, r9
 8009c5a:	60a5      	str	r5, [r4, #8]
 8009c5c:	42be      	cmp	r6, r7
 8009c5e:	d900      	bls.n	8009c62 <__ssputs_r+0x86>
 8009c60:	463e      	mov	r6, r7
 8009c62:	4632      	mov	r2, r6
 8009c64:	4641      	mov	r1, r8
 8009c66:	6820      	ldr	r0, [r4, #0]
 8009c68:	f000 fb58 	bl	800a31c <memmove>
 8009c6c:	68a3      	ldr	r3, [r4, #8]
 8009c6e:	6822      	ldr	r2, [r4, #0]
 8009c70:	1b9b      	subs	r3, r3, r6
 8009c72:	4432      	add	r2, r6
 8009c74:	2000      	movs	r0, #0
 8009c76:	60a3      	str	r3, [r4, #8]
 8009c78:	6022      	str	r2, [r4, #0]
 8009c7a:	e7db      	b.n	8009c34 <__ssputs_r+0x58>
 8009c7c:	462a      	mov	r2, r5
 8009c7e:	f000 fb73 	bl	800a368 <_realloc_r>
 8009c82:	4606      	mov	r6, r0
 8009c84:	2800      	cmp	r0, #0
 8009c86:	d1e1      	bne.n	8009c4c <__ssputs_r+0x70>
 8009c88:	4650      	mov	r0, sl
 8009c8a:	6921      	ldr	r1, [r4, #16]
 8009c8c:	f7ff ff00 	bl	8009a90 <_free_r>
 8009c90:	e7c7      	b.n	8009c22 <__ssputs_r+0x46>
	...

08009c94 <_svfiprintf_r>:
 8009c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c98:	4698      	mov	r8, r3
 8009c9a:	898b      	ldrh	r3, [r1, #12]
 8009c9c:	4607      	mov	r7, r0
 8009c9e:	061b      	lsls	r3, r3, #24
 8009ca0:	460d      	mov	r5, r1
 8009ca2:	4614      	mov	r4, r2
 8009ca4:	b09d      	sub	sp, #116	; 0x74
 8009ca6:	d50e      	bpl.n	8009cc6 <_svfiprintf_r+0x32>
 8009ca8:	690b      	ldr	r3, [r1, #16]
 8009caa:	b963      	cbnz	r3, 8009cc6 <_svfiprintf_r+0x32>
 8009cac:	2140      	movs	r1, #64	; 0x40
 8009cae:	f7ff ff3b 	bl	8009b28 <_malloc_r>
 8009cb2:	6028      	str	r0, [r5, #0]
 8009cb4:	6128      	str	r0, [r5, #16]
 8009cb6:	b920      	cbnz	r0, 8009cc2 <_svfiprintf_r+0x2e>
 8009cb8:	230c      	movs	r3, #12
 8009cba:	603b      	str	r3, [r7, #0]
 8009cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8009cc0:	e0d1      	b.n	8009e66 <_svfiprintf_r+0x1d2>
 8009cc2:	2340      	movs	r3, #64	; 0x40
 8009cc4:	616b      	str	r3, [r5, #20]
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	9309      	str	r3, [sp, #36]	; 0x24
 8009cca:	2320      	movs	r3, #32
 8009ccc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009cd0:	2330      	movs	r3, #48	; 0x30
 8009cd2:	f04f 0901 	mov.w	r9, #1
 8009cd6:	f8cd 800c 	str.w	r8, [sp, #12]
 8009cda:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009e80 <_svfiprintf_r+0x1ec>
 8009cde:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ce2:	4623      	mov	r3, r4
 8009ce4:	469a      	mov	sl, r3
 8009ce6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009cea:	b10a      	cbz	r2, 8009cf0 <_svfiprintf_r+0x5c>
 8009cec:	2a25      	cmp	r2, #37	; 0x25
 8009cee:	d1f9      	bne.n	8009ce4 <_svfiprintf_r+0x50>
 8009cf0:	ebba 0b04 	subs.w	fp, sl, r4
 8009cf4:	d00b      	beq.n	8009d0e <_svfiprintf_r+0x7a>
 8009cf6:	465b      	mov	r3, fp
 8009cf8:	4622      	mov	r2, r4
 8009cfa:	4629      	mov	r1, r5
 8009cfc:	4638      	mov	r0, r7
 8009cfe:	f7ff ff6d 	bl	8009bdc <__ssputs_r>
 8009d02:	3001      	adds	r0, #1
 8009d04:	f000 80aa 	beq.w	8009e5c <_svfiprintf_r+0x1c8>
 8009d08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d0a:	445a      	add	r2, fp
 8009d0c:	9209      	str	r2, [sp, #36]	; 0x24
 8009d0e:	f89a 3000 	ldrb.w	r3, [sl]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	f000 80a2 	beq.w	8009e5c <_svfiprintf_r+0x1c8>
 8009d18:	2300      	movs	r3, #0
 8009d1a:	f04f 32ff 	mov.w	r2, #4294967295
 8009d1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d22:	f10a 0a01 	add.w	sl, sl, #1
 8009d26:	9304      	str	r3, [sp, #16]
 8009d28:	9307      	str	r3, [sp, #28]
 8009d2a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d2e:	931a      	str	r3, [sp, #104]	; 0x68
 8009d30:	4654      	mov	r4, sl
 8009d32:	2205      	movs	r2, #5
 8009d34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d38:	4851      	ldr	r0, [pc, #324]	; (8009e80 <_svfiprintf_r+0x1ec>)
 8009d3a:	f7ff fb0b 	bl	8009354 <memchr>
 8009d3e:	9a04      	ldr	r2, [sp, #16]
 8009d40:	b9d8      	cbnz	r0, 8009d7a <_svfiprintf_r+0xe6>
 8009d42:	06d0      	lsls	r0, r2, #27
 8009d44:	bf44      	itt	mi
 8009d46:	2320      	movmi	r3, #32
 8009d48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d4c:	0711      	lsls	r1, r2, #28
 8009d4e:	bf44      	itt	mi
 8009d50:	232b      	movmi	r3, #43	; 0x2b
 8009d52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d56:	f89a 3000 	ldrb.w	r3, [sl]
 8009d5a:	2b2a      	cmp	r3, #42	; 0x2a
 8009d5c:	d015      	beq.n	8009d8a <_svfiprintf_r+0xf6>
 8009d5e:	4654      	mov	r4, sl
 8009d60:	2000      	movs	r0, #0
 8009d62:	f04f 0c0a 	mov.w	ip, #10
 8009d66:	9a07      	ldr	r2, [sp, #28]
 8009d68:	4621      	mov	r1, r4
 8009d6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d6e:	3b30      	subs	r3, #48	; 0x30
 8009d70:	2b09      	cmp	r3, #9
 8009d72:	d94e      	bls.n	8009e12 <_svfiprintf_r+0x17e>
 8009d74:	b1b0      	cbz	r0, 8009da4 <_svfiprintf_r+0x110>
 8009d76:	9207      	str	r2, [sp, #28]
 8009d78:	e014      	b.n	8009da4 <_svfiprintf_r+0x110>
 8009d7a:	eba0 0308 	sub.w	r3, r0, r8
 8009d7e:	fa09 f303 	lsl.w	r3, r9, r3
 8009d82:	4313      	orrs	r3, r2
 8009d84:	46a2      	mov	sl, r4
 8009d86:	9304      	str	r3, [sp, #16]
 8009d88:	e7d2      	b.n	8009d30 <_svfiprintf_r+0x9c>
 8009d8a:	9b03      	ldr	r3, [sp, #12]
 8009d8c:	1d19      	adds	r1, r3, #4
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	9103      	str	r1, [sp, #12]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	bfbb      	ittet	lt
 8009d96:	425b      	neglt	r3, r3
 8009d98:	f042 0202 	orrlt.w	r2, r2, #2
 8009d9c:	9307      	strge	r3, [sp, #28]
 8009d9e:	9307      	strlt	r3, [sp, #28]
 8009da0:	bfb8      	it	lt
 8009da2:	9204      	strlt	r2, [sp, #16]
 8009da4:	7823      	ldrb	r3, [r4, #0]
 8009da6:	2b2e      	cmp	r3, #46	; 0x2e
 8009da8:	d10c      	bne.n	8009dc4 <_svfiprintf_r+0x130>
 8009daa:	7863      	ldrb	r3, [r4, #1]
 8009dac:	2b2a      	cmp	r3, #42	; 0x2a
 8009dae:	d135      	bne.n	8009e1c <_svfiprintf_r+0x188>
 8009db0:	9b03      	ldr	r3, [sp, #12]
 8009db2:	3402      	adds	r4, #2
 8009db4:	1d1a      	adds	r2, r3, #4
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	9203      	str	r2, [sp, #12]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	bfb8      	it	lt
 8009dbe:	f04f 33ff 	movlt.w	r3, #4294967295
 8009dc2:	9305      	str	r3, [sp, #20]
 8009dc4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009e90 <_svfiprintf_r+0x1fc>
 8009dc8:	2203      	movs	r2, #3
 8009dca:	4650      	mov	r0, sl
 8009dcc:	7821      	ldrb	r1, [r4, #0]
 8009dce:	f7ff fac1 	bl	8009354 <memchr>
 8009dd2:	b140      	cbz	r0, 8009de6 <_svfiprintf_r+0x152>
 8009dd4:	2340      	movs	r3, #64	; 0x40
 8009dd6:	eba0 000a 	sub.w	r0, r0, sl
 8009dda:	fa03 f000 	lsl.w	r0, r3, r0
 8009dde:	9b04      	ldr	r3, [sp, #16]
 8009de0:	3401      	adds	r4, #1
 8009de2:	4303      	orrs	r3, r0
 8009de4:	9304      	str	r3, [sp, #16]
 8009de6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dea:	2206      	movs	r2, #6
 8009dec:	4825      	ldr	r0, [pc, #148]	; (8009e84 <_svfiprintf_r+0x1f0>)
 8009dee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009df2:	f7ff faaf 	bl	8009354 <memchr>
 8009df6:	2800      	cmp	r0, #0
 8009df8:	d038      	beq.n	8009e6c <_svfiprintf_r+0x1d8>
 8009dfa:	4b23      	ldr	r3, [pc, #140]	; (8009e88 <_svfiprintf_r+0x1f4>)
 8009dfc:	bb1b      	cbnz	r3, 8009e46 <_svfiprintf_r+0x1b2>
 8009dfe:	9b03      	ldr	r3, [sp, #12]
 8009e00:	3307      	adds	r3, #7
 8009e02:	f023 0307 	bic.w	r3, r3, #7
 8009e06:	3308      	adds	r3, #8
 8009e08:	9303      	str	r3, [sp, #12]
 8009e0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e0c:	4433      	add	r3, r6
 8009e0e:	9309      	str	r3, [sp, #36]	; 0x24
 8009e10:	e767      	b.n	8009ce2 <_svfiprintf_r+0x4e>
 8009e12:	460c      	mov	r4, r1
 8009e14:	2001      	movs	r0, #1
 8009e16:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e1a:	e7a5      	b.n	8009d68 <_svfiprintf_r+0xd4>
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	f04f 0c0a 	mov.w	ip, #10
 8009e22:	4619      	mov	r1, r3
 8009e24:	3401      	adds	r4, #1
 8009e26:	9305      	str	r3, [sp, #20]
 8009e28:	4620      	mov	r0, r4
 8009e2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e2e:	3a30      	subs	r2, #48	; 0x30
 8009e30:	2a09      	cmp	r2, #9
 8009e32:	d903      	bls.n	8009e3c <_svfiprintf_r+0x1a8>
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d0c5      	beq.n	8009dc4 <_svfiprintf_r+0x130>
 8009e38:	9105      	str	r1, [sp, #20]
 8009e3a:	e7c3      	b.n	8009dc4 <_svfiprintf_r+0x130>
 8009e3c:	4604      	mov	r4, r0
 8009e3e:	2301      	movs	r3, #1
 8009e40:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e44:	e7f0      	b.n	8009e28 <_svfiprintf_r+0x194>
 8009e46:	ab03      	add	r3, sp, #12
 8009e48:	9300      	str	r3, [sp, #0]
 8009e4a:	462a      	mov	r2, r5
 8009e4c:	4638      	mov	r0, r7
 8009e4e:	4b0f      	ldr	r3, [pc, #60]	; (8009e8c <_svfiprintf_r+0x1f8>)
 8009e50:	a904      	add	r1, sp, #16
 8009e52:	f7fd fbc9 	bl	80075e8 <_printf_float>
 8009e56:	1c42      	adds	r2, r0, #1
 8009e58:	4606      	mov	r6, r0
 8009e5a:	d1d6      	bne.n	8009e0a <_svfiprintf_r+0x176>
 8009e5c:	89ab      	ldrh	r3, [r5, #12]
 8009e5e:	065b      	lsls	r3, r3, #25
 8009e60:	f53f af2c 	bmi.w	8009cbc <_svfiprintf_r+0x28>
 8009e64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e66:	b01d      	add	sp, #116	; 0x74
 8009e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e6c:	ab03      	add	r3, sp, #12
 8009e6e:	9300      	str	r3, [sp, #0]
 8009e70:	462a      	mov	r2, r5
 8009e72:	4638      	mov	r0, r7
 8009e74:	4b05      	ldr	r3, [pc, #20]	; (8009e8c <_svfiprintf_r+0x1f8>)
 8009e76:	a904      	add	r1, sp, #16
 8009e78:	f7fd fe52 	bl	8007b20 <_printf_i>
 8009e7c:	e7eb      	b.n	8009e56 <_svfiprintf_r+0x1c2>
 8009e7e:	bf00      	nop
 8009e80:	0800abe4 	.word	0x0800abe4
 8009e84:	0800abee 	.word	0x0800abee
 8009e88:	080075e9 	.word	0x080075e9
 8009e8c:	08009bdd 	.word	0x08009bdd
 8009e90:	0800abea 	.word	0x0800abea

08009e94 <__sfputc_r>:
 8009e94:	6893      	ldr	r3, [r2, #8]
 8009e96:	b410      	push	{r4}
 8009e98:	3b01      	subs	r3, #1
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	6093      	str	r3, [r2, #8]
 8009e9e:	da07      	bge.n	8009eb0 <__sfputc_r+0x1c>
 8009ea0:	6994      	ldr	r4, [r2, #24]
 8009ea2:	42a3      	cmp	r3, r4
 8009ea4:	db01      	blt.n	8009eaa <__sfputc_r+0x16>
 8009ea6:	290a      	cmp	r1, #10
 8009ea8:	d102      	bne.n	8009eb0 <__sfputc_r+0x1c>
 8009eaa:	bc10      	pop	{r4}
 8009eac:	f7fe b8ea 	b.w	8008084 <__swbuf_r>
 8009eb0:	6813      	ldr	r3, [r2, #0]
 8009eb2:	1c58      	adds	r0, r3, #1
 8009eb4:	6010      	str	r0, [r2, #0]
 8009eb6:	7019      	strb	r1, [r3, #0]
 8009eb8:	4608      	mov	r0, r1
 8009eba:	bc10      	pop	{r4}
 8009ebc:	4770      	bx	lr

08009ebe <__sfputs_r>:
 8009ebe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ec0:	4606      	mov	r6, r0
 8009ec2:	460f      	mov	r7, r1
 8009ec4:	4614      	mov	r4, r2
 8009ec6:	18d5      	adds	r5, r2, r3
 8009ec8:	42ac      	cmp	r4, r5
 8009eca:	d101      	bne.n	8009ed0 <__sfputs_r+0x12>
 8009ecc:	2000      	movs	r0, #0
 8009ece:	e007      	b.n	8009ee0 <__sfputs_r+0x22>
 8009ed0:	463a      	mov	r2, r7
 8009ed2:	4630      	mov	r0, r6
 8009ed4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ed8:	f7ff ffdc 	bl	8009e94 <__sfputc_r>
 8009edc:	1c43      	adds	r3, r0, #1
 8009ede:	d1f3      	bne.n	8009ec8 <__sfputs_r+0xa>
 8009ee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009ee4 <_vfiprintf_r>:
 8009ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ee8:	460d      	mov	r5, r1
 8009eea:	4614      	mov	r4, r2
 8009eec:	4698      	mov	r8, r3
 8009eee:	4606      	mov	r6, r0
 8009ef0:	b09d      	sub	sp, #116	; 0x74
 8009ef2:	b118      	cbz	r0, 8009efc <_vfiprintf_r+0x18>
 8009ef4:	6983      	ldr	r3, [r0, #24]
 8009ef6:	b90b      	cbnz	r3, 8009efc <_vfiprintf_r+0x18>
 8009ef8:	f7ff f91a 	bl	8009130 <__sinit>
 8009efc:	4b89      	ldr	r3, [pc, #548]	; (800a124 <_vfiprintf_r+0x240>)
 8009efe:	429d      	cmp	r5, r3
 8009f00:	d11b      	bne.n	8009f3a <_vfiprintf_r+0x56>
 8009f02:	6875      	ldr	r5, [r6, #4]
 8009f04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f06:	07d9      	lsls	r1, r3, #31
 8009f08:	d405      	bmi.n	8009f16 <_vfiprintf_r+0x32>
 8009f0a:	89ab      	ldrh	r3, [r5, #12]
 8009f0c:	059a      	lsls	r2, r3, #22
 8009f0e:	d402      	bmi.n	8009f16 <_vfiprintf_r+0x32>
 8009f10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f12:	f7ff f9b0 	bl	8009276 <__retarget_lock_acquire_recursive>
 8009f16:	89ab      	ldrh	r3, [r5, #12]
 8009f18:	071b      	lsls	r3, r3, #28
 8009f1a:	d501      	bpl.n	8009f20 <_vfiprintf_r+0x3c>
 8009f1c:	692b      	ldr	r3, [r5, #16]
 8009f1e:	b9eb      	cbnz	r3, 8009f5c <_vfiprintf_r+0x78>
 8009f20:	4629      	mov	r1, r5
 8009f22:	4630      	mov	r0, r6
 8009f24:	f7fe f900 	bl	8008128 <__swsetup_r>
 8009f28:	b1c0      	cbz	r0, 8009f5c <_vfiprintf_r+0x78>
 8009f2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f2c:	07dc      	lsls	r4, r3, #31
 8009f2e:	d50e      	bpl.n	8009f4e <_vfiprintf_r+0x6a>
 8009f30:	f04f 30ff 	mov.w	r0, #4294967295
 8009f34:	b01d      	add	sp, #116	; 0x74
 8009f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f3a:	4b7b      	ldr	r3, [pc, #492]	; (800a128 <_vfiprintf_r+0x244>)
 8009f3c:	429d      	cmp	r5, r3
 8009f3e:	d101      	bne.n	8009f44 <_vfiprintf_r+0x60>
 8009f40:	68b5      	ldr	r5, [r6, #8]
 8009f42:	e7df      	b.n	8009f04 <_vfiprintf_r+0x20>
 8009f44:	4b79      	ldr	r3, [pc, #484]	; (800a12c <_vfiprintf_r+0x248>)
 8009f46:	429d      	cmp	r5, r3
 8009f48:	bf08      	it	eq
 8009f4a:	68f5      	ldreq	r5, [r6, #12]
 8009f4c:	e7da      	b.n	8009f04 <_vfiprintf_r+0x20>
 8009f4e:	89ab      	ldrh	r3, [r5, #12]
 8009f50:	0598      	lsls	r0, r3, #22
 8009f52:	d4ed      	bmi.n	8009f30 <_vfiprintf_r+0x4c>
 8009f54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f56:	f7ff f98f 	bl	8009278 <__retarget_lock_release_recursive>
 8009f5a:	e7e9      	b.n	8009f30 <_vfiprintf_r+0x4c>
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	9309      	str	r3, [sp, #36]	; 0x24
 8009f60:	2320      	movs	r3, #32
 8009f62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f66:	2330      	movs	r3, #48	; 0x30
 8009f68:	f04f 0901 	mov.w	r9, #1
 8009f6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f70:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a130 <_vfiprintf_r+0x24c>
 8009f74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009f78:	4623      	mov	r3, r4
 8009f7a:	469a      	mov	sl, r3
 8009f7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f80:	b10a      	cbz	r2, 8009f86 <_vfiprintf_r+0xa2>
 8009f82:	2a25      	cmp	r2, #37	; 0x25
 8009f84:	d1f9      	bne.n	8009f7a <_vfiprintf_r+0x96>
 8009f86:	ebba 0b04 	subs.w	fp, sl, r4
 8009f8a:	d00b      	beq.n	8009fa4 <_vfiprintf_r+0xc0>
 8009f8c:	465b      	mov	r3, fp
 8009f8e:	4622      	mov	r2, r4
 8009f90:	4629      	mov	r1, r5
 8009f92:	4630      	mov	r0, r6
 8009f94:	f7ff ff93 	bl	8009ebe <__sfputs_r>
 8009f98:	3001      	adds	r0, #1
 8009f9a:	f000 80aa 	beq.w	800a0f2 <_vfiprintf_r+0x20e>
 8009f9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009fa0:	445a      	add	r2, fp
 8009fa2:	9209      	str	r2, [sp, #36]	; 0x24
 8009fa4:	f89a 3000 	ldrb.w	r3, [sl]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	f000 80a2 	beq.w	800a0f2 <_vfiprintf_r+0x20e>
 8009fae:	2300      	movs	r3, #0
 8009fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8009fb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009fb8:	f10a 0a01 	add.w	sl, sl, #1
 8009fbc:	9304      	str	r3, [sp, #16]
 8009fbe:	9307      	str	r3, [sp, #28]
 8009fc0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009fc4:	931a      	str	r3, [sp, #104]	; 0x68
 8009fc6:	4654      	mov	r4, sl
 8009fc8:	2205      	movs	r2, #5
 8009fca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fce:	4858      	ldr	r0, [pc, #352]	; (800a130 <_vfiprintf_r+0x24c>)
 8009fd0:	f7ff f9c0 	bl	8009354 <memchr>
 8009fd4:	9a04      	ldr	r2, [sp, #16]
 8009fd6:	b9d8      	cbnz	r0, 800a010 <_vfiprintf_r+0x12c>
 8009fd8:	06d1      	lsls	r1, r2, #27
 8009fda:	bf44      	itt	mi
 8009fdc:	2320      	movmi	r3, #32
 8009fde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009fe2:	0713      	lsls	r3, r2, #28
 8009fe4:	bf44      	itt	mi
 8009fe6:	232b      	movmi	r3, #43	; 0x2b
 8009fe8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009fec:	f89a 3000 	ldrb.w	r3, [sl]
 8009ff0:	2b2a      	cmp	r3, #42	; 0x2a
 8009ff2:	d015      	beq.n	800a020 <_vfiprintf_r+0x13c>
 8009ff4:	4654      	mov	r4, sl
 8009ff6:	2000      	movs	r0, #0
 8009ff8:	f04f 0c0a 	mov.w	ip, #10
 8009ffc:	9a07      	ldr	r2, [sp, #28]
 8009ffe:	4621      	mov	r1, r4
 800a000:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a004:	3b30      	subs	r3, #48	; 0x30
 800a006:	2b09      	cmp	r3, #9
 800a008:	d94e      	bls.n	800a0a8 <_vfiprintf_r+0x1c4>
 800a00a:	b1b0      	cbz	r0, 800a03a <_vfiprintf_r+0x156>
 800a00c:	9207      	str	r2, [sp, #28]
 800a00e:	e014      	b.n	800a03a <_vfiprintf_r+0x156>
 800a010:	eba0 0308 	sub.w	r3, r0, r8
 800a014:	fa09 f303 	lsl.w	r3, r9, r3
 800a018:	4313      	orrs	r3, r2
 800a01a:	46a2      	mov	sl, r4
 800a01c:	9304      	str	r3, [sp, #16]
 800a01e:	e7d2      	b.n	8009fc6 <_vfiprintf_r+0xe2>
 800a020:	9b03      	ldr	r3, [sp, #12]
 800a022:	1d19      	adds	r1, r3, #4
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	9103      	str	r1, [sp, #12]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	bfbb      	ittet	lt
 800a02c:	425b      	neglt	r3, r3
 800a02e:	f042 0202 	orrlt.w	r2, r2, #2
 800a032:	9307      	strge	r3, [sp, #28]
 800a034:	9307      	strlt	r3, [sp, #28]
 800a036:	bfb8      	it	lt
 800a038:	9204      	strlt	r2, [sp, #16]
 800a03a:	7823      	ldrb	r3, [r4, #0]
 800a03c:	2b2e      	cmp	r3, #46	; 0x2e
 800a03e:	d10c      	bne.n	800a05a <_vfiprintf_r+0x176>
 800a040:	7863      	ldrb	r3, [r4, #1]
 800a042:	2b2a      	cmp	r3, #42	; 0x2a
 800a044:	d135      	bne.n	800a0b2 <_vfiprintf_r+0x1ce>
 800a046:	9b03      	ldr	r3, [sp, #12]
 800a048:	3402      	adds	r4, #2
 800a04a:	1d1a      	adds	r2, r3, #4
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	9203      	str	r2, [sp, #12]
 800a050:	2b00      	cmp	r3, #0
 800a052:	bfb8      	it	lt
 800a054:	f04f 33ff 	movlt.w	r3, #4294967295
 800a058:	9305      	str	r3, [sp, #20]
 800a05a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a140 <_vfiprintf_r+0x25c>
 800a05e:	2203      	movs	r2, #3
 800a060:	4650      	mov	r0, sl
 800a062:	7821      	ldrb	r1, [r4, #0]
 800a064:	f7ff f976 	bl	8009354 <memchr>
 800a068:	b140      	cbz	r0, 800a07c <_vfiprintf_r+0x198>
 800a06a:	2340      	movs	r3, #64	; 0x40
 800a06c:	eba0 000a 	sub.w	r0, r0, sl
 800a070:	fa03 f000 	lsl.w	r0, r3, r0
 800a074:	9b04      	ldr	r3, [sp, #16]
 800a076:	3401      	adds	r4, #1
 800a078:	4303      	orrs	r3, r0
 800a07a:	9304      	str	r3, [sp, #16]
 800a07c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a080:	2206      	movs	r2, #6
 800a082:	482c      	ldr	r0, [pc, #176]	; (800a134 <_vfiprintf_r+0x250>)
 800a084:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a088:	f7ff f964 	bl	8009354 <memchr>
 800a08c:	2800      	cmp	r0, #0
 800a08e:	d03f      	beq.n	800a110 <_vfiprintf_r+0x22c>
 800a090:	4b29      	ldr	r3, [pc, #164]	; (800a138 <_vfiprintf_r+0x254>)
 800a092:	bb1b      	cbnz	r3, 800a0dc <_vfiprintf_r+0x1f8>
 800a094:	9b03      	ldr	r3, [sp, #12]
 800a096:	3307      	adds	r3, #7
 800a098:	f023 0307 	bic.w	r3, r3, #7
 800a09c:	3308      	adds	r3, #8
 800a09e:	9303      	str	r3, [sp, #12]
 800a0a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0a2:	443b      	add	r3, r7
 800a0a4:	9309      	str	r3, [sp, #36]	; 0x24
 800a0a6:	e767      	b.n	8009f78 <_vfiprintf_r+0x94>
 800a0a8:	460c      	mov	r4, r1
 800a0aa:	2001      	movs	r0, #1
 800a0ac:	fb0c 3202 	mla	r2, ip, r2, r3
 800a0b0:	e7a5      	b.n	8009ffe <_vfiprintf_r+0x11a>
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	f04f 0c0a 	mov.w	ip, #10
 800a0b8:	4619      	mov	r1, r3
 800a0ba:	3401      	adds	r4, #1
 800a0bc:	9305      	str	r3, [sp, #20]
 800a0be:	4620      	mov	r0, r4
 800a0c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0c4:	3a30      	subs	r2, #48	; 0x30
 800a0c6:	2a09      	cmp	r2, #9
 800a0c8:	d903      	bls.n	800a0d2 <_vfiprintf_r+0x1ee>
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d0c5      	beq.n	800a05a <_vfiprintf_r+0x176>
 800a0ce:	9105      	str	r1, [sp, #20]
 800a0d0:	e7c3      	b.n	800a05a <_vfiprintf_r+0x176>
 800a0d2:	4604      	mov	r4, r0
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	fb0c 2101 	mla	r1, ip, r1, r2
 800a0da:	e7f0      	b.n	800a0be <_vfiprintf_r+0x1da>
 800a0dc:	ab03      	add	r3, sp, #12
 800a0de:	9300      	str	r3, [sp, #0]
 800a0e0:	462a      	mov	r2, r5
 800a0e2:	4630      	mov	r0, r6
 800a0e4:	4b15      	ldr	r3, [pc, #84]	; (800a13c <_vfiprintf_r+0x258>)
 800a0e6:	a904      	add	r1, sp, #16
 800a0e8:	f7fd fa7e 	bl	80075e8 <_printf_float>
 800a0ec:	4607      	mov	r7, r0
 800a0ee:	1c78      	adds	r0, r7, #1
 800a0f0:	d1d6      	bne.n	800a0a0 <_vfiprintf_r+0x1bc>
 800a0f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a0f4:	07d9      	lsls	r1, r3, #31
 800a0f6:	d405      	bmi.n	800a104 <_vfiprintf_r+0x220>
 800a0f8:	89ab      	ldrh	r3, [r5, #12]
 800a0fa:	059a      	lsls	r2, r3, #22
 800a0fc:	d402      	bmi.n	800a104 <_vfiprintf_r+0x220>
 800a0fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a100:	f7ff f8ba 	bl	8009278 <__retarget_lock_release_recursive>
 800a104:	89ab      	ldrh	r3, [r5, #12]
 800a106:	065b      	lsls	r3, r3, #25
 800a108:	f53f af12 	bmi.w	8009f30 <_vfiprintf_r+0x4c>
 800a10c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a10e:	e711      	b.n	8009f34 <_vfiprintf_r+0x50>
 800a110:	ab03      	add	r3, sp, #12
 800a112:	9300      	str	r3, [sp, #0]
 800a114:	462a      	mov	r2, r5
 800a116:	4630      	mov	r0, r6
 800a118:	4b08      	ldr	r3, [pc, #32]	; (800a13c <_vfiprintf_r+0x258>)
 800a11a:	a904      	add	r1, sp, #16
 800a11c:	f7fd fd00 	bl	8007b20 <_printf_i>
 800a120:	e7e4      	b.n	800a0ec <_vfiprintf_r+0x208>
 800a122:	bf00      	nop
 800a124:	0800aa48 	.word	0x0800aa48
 800a128:	0800aa68 	.word	0x0800aa68
 800a12c:	0800aa28 	.word	0x0800aa28
 800a130:	0800abe4 	.word	0x0800abe4
 800a134:	0800abee 	.word	0x0800abee
 800a138:	080075e9 	.word	0x080075e9
 800a13c:	08009ebf 	.word	0x08009ebf
 800a140:	0800abea 	.word	0x0800abea

0800a144 <_sbrk_r>:
 800a144:	b538      	push	{r3, r4, r5, lr}
 800a146:	2300      	movs	r3, #0
 800a148:	4d05      	ldr	r5, [pc, #20]	; (800a160 <_sbrk_r+0x1c>)
 800a14a:	4604      	mov	r4, r0
 800a14c:	4608      	mov	r0, r1
 800a14e:	602b      	str	r3, [r5, #0]
 800a150:	f7f8 fd3a 	bl	8002bc8 <_sbrk>
 800a154:	1c43      	adds	r3, r0, #1
 800a156:	d102      	bne.n	800a15e <_sbrk_r+0x1a>
 800a158:	682b      	ldr	r3, [r5, #0]
 800a15a:	b103      	cbz	r3, 800a15e <_sbrk_r+0x1a>
 800a15c:	6023      	str	r3, [r4, #0]
 800a15e:	bd38      	pop	{r3, r4, r5, pc}
 800a160:	200041e8 	.word	0x200041e8

0800a164 <__sread>:
 800a164:	b510      	push	{r4, lr}
 800a166:	460c      	mov	r4, r1
 800a168:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a16c:	f000 f922 	bl	800a3b4 <_read_r>
 800a170:	2800      	cmp	r0, #0
 800a172:	bfab      	itete	ge
 800a174:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a176:	89a3      	ldrhlt	r3, [r4, #12]
 800a178:	181b      	addge	r3, r3, r0
 800a17a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a17e:	bfac      	ite	ge
 800a180:	6563      	strge	r3, [r4, #84]	; 0x54
 800a182:	81a3      	strhlt	r3, [r4, #12]
 800a184:	bd10      	pop	{r4, pc}

0800a186 <__swrite>:
 800a186:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a18a:	461f      	mov	r7, r3
 800a18c:	898b      	ldrh	r3, [r1, #12]
 800a18e:	4605      	mov	r5, r0
 800a190:	05db      	lsls	r3, r3, #23
 800a192:	460c      	mov	r4, r1
 800a194:	4616      	mov	r6, r2
 800a196:	d505      	bpl.n	800a1a4 <__swrite+0x1e>
 800a198:	2302      	movs	r3, #2
 800a19a:	2200      	movs	r2, #0
 800a19c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1a0:	f000 f898 	bl	800a2d4 <_lseek_r>
 800a1a4:	89a3      	ldrh	r3, [r4, #12]
 800a1a6:	4632      	mov	r2, r6
 800a1a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a1ac:	81a3      	strh	r3, [r4, #12]
 800a1ae:	4628      	mov	r0, r5
 800a1b0:	463b      	mov	r3, r7
 800a1b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a1ba:	f000 b817 	b.w	800a1ec <_write_r>

0800a1be <__sseek>:
 800a1be:	b510      	push	{r4, lr}
 800a1c0:	460c      	mov	r4, r1
 800a1c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1c6:	f000 f885 	bl	800a2d4 <_lseek_r>
 800a1ca:	1c43      	adds	r3, r0, #1
 800a1cc:	89a3      	ldrh	r3, [r4, #12]
 800a1ce:	bf15      	itete	ne
 800a1d0:	6560      	strne	r0, [r4, #84]	; 0x54
 800a1d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a1d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a1da:	81a3      	strheq	r3, [r4, #12]
 800a1dc:	bf18      	it	ne
 800a1de:	81a3      	strhne	r3, [r4, #12]
 800a1e0:	bd10      	pop	{r4, pc}

0800a1e2 <__sclose>:
 800a1e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1e6:	f000 b831 	b.w	800a24c <_close_r>
	...

0800a1ec <_write_r>:
 800a1ec:	b538      	push	{r3, r4, r5, lr}
 800a1ee:	4604      	mov	r4, r0
 800a1f0:	4608      	mov	r0, r1
 800a1f2:	4611      	mov	r1, r2
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	4d05      	ldr	r5, [pc, #20]	; (800a20c <_write_r+0x20>)
 800a1f8:	602a      	str	r2, [r5, #0]
 800a1fa:	461a      	mov	r2, r3
 800a1fc:	f7f8 ffe0 	bl	80031c0 <_write>
 800a200:	1c43      	adds	r3, r0, #1
 800a202:	d102      	bne.n	800a20a <_write_r+0x1e>
 800a204:	682b      	ldr	r3, [r5, #0]
 800a206:	b103      	cbz	r3, 800a20a <_write_r+0x1e>
 800a208:	6023      	str	r3, [r4, #0]
 800a20a:	bd38      	pop	{r3, r4, r5, pc}
 800a20c:	200041e8 	.word	0x200041e8

0800a210 <__assert_func>:
 800a210:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a212:	4614      	mov	r4, r2
 800a214:	461a      	mov	r2, r3
 800a216:	4b09      	ldr	r3, [pc, #36]	; (800a23c <__assert_func+0x2c>)
 800a218:	4605      	mov	r5, r0
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	68d8      	ldr	r0, [r3, #12]
 800a21e:	b14c      	cbz	r4, 800a234 <__assert_func+0x24>
 800a220:	4b07      	ldr	r3, [pc, #28]	; (800a240 <__assert_func+0x30>)
 800a222:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a226:	9100      	str	r1, [sp, #0]
 800a228:	462b      	mov	r3, r5
 800a22a:	4906      	ldr	r1, [pc, #24]	; (800a244 <__assert_func+0x34>)
 800a22c:	f000 f81e 	bl	800a26c <fiprintf>
 800a230:	f000 f8df 	bl	800a3f2 <abort>
 800a234:	4b04      	ldr	r3, [pc, #16]	; (800a248 <__assert_func+0x38>)
 800a236:	461c      	mov	r4, r3
 800a238:	e7f3      	b.n	800a222 <__assert_func+0x12>
 800a23a:	bf00      	nop
 800a23c:	2000010c 	.word	0x2000010c
 800a240:	0800abf5 	.word	0x0800abf5
 800a244:	0800ac02 	.word	0x0800ac02
 800a248:	0800ac30 	.word	0x0800ac30

0800a24c <_close_r>:
 800a24c:	b538      	push	{r3, r4, r5, lr}
 800a24e:	2300      	movs	r3, #0
 800a250:	4d05      	ldr	r5, [pc, #20]	; (800a268 <_close_r+0x1c>)
 800a252:	4604      	mov	r4, r0
 800a254:	4608      	mov	r0, r1
 800a256:	602b      	str	r3, [r5, #0]
 800a258:	f7f8 fc86 	bl	8002b68 <_close>
 800a25c:	1c43      	adds	r3, r0, #1
 800a25e:	d102      	bne.n	800a266 <_close_r+0x1a>
 800a260:	682b      	ldr	r3, [r5, #0]
 800a262:	b103      	cbz	r3, 800a266 <_close_r+0x1a>
 800a264:	6023      	str	r3, [r4, #0]
 800a266:	bd38      	pop	{r3, r4, r5, pc}
 800a268:	200041e8 	.word	0x200041e8

0800a26c <fiprintf>:
 800a26c:	b40e      	push	{r1, r2, r3}
 800a26e:	b503      	push	{r0, r1, lr}
 800a270:	4601      	mov	r1, r0
 800a272:	ab03      	add	r3, sp, #12
 800a274:	4805      	ldr	r0, [pc, #20]	; (800a28c <fiprintf+0x20>)
 800a276:	f853 2b04 	ldr.w	r2, [r3], #4
 800a27a:	6800      	ldr	r0, [r0, #0]
 800a27c:	9301      	str	r3, [sp, #4]
 800a27e:	f7ff fe31 	bl	8009ee4 <_vfiprintf_r>
 800a282:	b002      	add	sp, #8
 800a284:	f85d eb04 	ldr.w	lr, [sp], #4
 800a288:	b003      	add	sp, #12
 800a28a:	4770      	bx	lr
 800a28c:	2000010c 	.word	0x2000010c

0800a290 <_fstat_r>:
 800a290:	b538      	push	{r3, r4, r5, lr}
 800a292:	2300      	movs	r3, #0
 800a294:	4d06      	ldr	r5, [pc, #24]	; (800a2b0 <_fstat_r+0x20>)
 800a296:	4604      	mov	r4, r0
 800a298:	4608      	mov	r0, r1
 800a29a:	4611      	mov	r1, r2
 800a29c:	602b      	str	r3, [r5, #0]
 800a29e:	f7f8 fc6e 	bl	8002b7e <_fstat>
 800a2a2:	1c43      	adds	r3, r0, #1
 800a2a4:	d102      	bne.n	800a2ac <_fstat_r+0x1c>
 800a2a6:	682b      	ldr	r3, [r5, #0]
 800a2a8:	b103      	cbz	r3, 800a2ac <_fstat_r+0x1c>
 800a2aa:	6023      	str	r3, [r4, #0]
 800a2ac:	bd38      	pop	{r3, r4, r5, pc}
 800a2ae:	bf00      	nop
 800a2b0:	200041e8 	.word	0x200041e8

0800a2b4 <_isatty_r>:
 800a2b4:	b538      	push	{r3, r4, r5, lr}
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	4d05      	ldr	r5, [pc, #20]	; (800a2d0 <_isatty_r+0x1c>)
 800a2ba:	4604      	mov	r4, r0
 800a2bc:	4608      	mov	r0, r1
 800a2be:	602b      	str	r3, [r5, #0]
 800a2c0:	f7f8 fc6c 	bl	8002b9c <_isatty>
 800a2c4:	1c43      	adds	r3, r0, #1
 800a2c6:	d102      	bne.n	800a2ce <_isatty_r+0x1a>
 800a2c8:	682b      	ldr	r3, [r5, #0]
 800a2ca:	b103      	cbz	r3, 800a2ce <_isatty_r+0x1a>
 800a2cc:	6023      	str	r3, [r4, #0]
 800a2ce:	bd38      	pop	{r3, r4, r5, pc}
 800a2d0:	200041e8 	.word	0x200041e8

0800a2d4 <_lseek_r>:
 800a2d4:	b538      	push	{r3, r4, r5, lr}
 800a2d6:	4604      	mov	r4, r0
 800a2d8:	4608      	mov	r0, r1
 800a2da:	4611      	mov	r1, r2
 800a2dc:	2200      	movs	r2, #0
 800a2de:	4d05      	ldr	r5, [pc, #20]	; (800a2f4 <_lseek_r+0x20>)
 800a2e0:	602a      	str	r2, [r5, #0]
 800a2e2:	461a      	mov	r2, r3
 800a2e4:	f7f8 fc64 	bl	8002bb0 <_lseek>
 800a2e8:	1c43      	adds	r3, r0, #1
 800a2ea:	d102      	bne.n	800a2f2 <_lseek_r+0x1e>
 800a2ec:	682b      	ldr	r3, [r5, #0]
 800a2ee:	b103      	cbz	r3, 800a2f2 <_lseek_r+0x1e>
 800a2f0:	6023      	str	r3, [r4, #0]
 800a2f2:	bd38      	pop	{r3, r4, r5, pc}
 800a2f4:	200041e8 	.word	0x200041e8

0800a2f8 <__ascii_mbtowc>:
 800a2f8:	b082      	sub	sp, #8
 800a2fa:	b901      	cbnz	r1, 800a2fe <__ascii_mbtowc+0x6>
 800a2fc:	a901      	add	r1, sp, #4
 800a2fe:	b142      	cbz	r2, 800a312 <__ascii_mbtowc+0x1a>
 800a300:	b14b      	cbz	r3, 800a316 <__ascii_mbtowc+0x1e>
 800a302:	7813      	ldrb	r3, [r2, #0]
 800a304:	600b      	str	r3, [r1, #0]
 800a306:	7812      	ldrb	r2, [r2, #0]
 800a308:	1e10      	subs	r0, r2, #0
 800a30a:	bf18      	it	ne
 800a30c:	2001      	movne	r0, #1
 800a30e:	b002      	add	sp, #8
 800a310:	4770      	bx	lr
 800a312:	4610      	mov	r0, r2
 800a314:	e7fb      	b.n	800a30e <__ascii_mbtowc+0x16>
 800a316:	f06f 0001 	mvn.w	r0, #1
 800a31a:	e7f8      	b.n	800a30e <__ascii_mbtowc+0x16>

0800a31c <memmove>:
 800a31c:	4288      	cmp	r0, r1
 800a31e:	b510      	push	{r4, lr}
 800a320:	eb01 0402 	add.w	r4, r1, r2
 800a324:	d902      	bls.n	800a32c <memmove+0x10>
 800a326:	4284      	cmp	r4, r0
 800a328:	4623      	mov	r3, r4
 800a32a:	d807      	bhi.n	800a33c <memmove+0x20>
 800a32c:	1e43      	subs	r3, r0, #1
 800a32e:	42a1      	cmp	r1, r4
 800a330:	d008      	beq.n	800a344 <memmove+0x28>
 800a332:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a336:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a33a:	e7f8      	b.n	800a32e <memmove+0x12>
 800a33c:	4601      	mov	r1, r0
 800a33e:	4402      	add	r2, r0
 800a340:	428a      	cmp	r2, r1
 800a342:	d100      	bne.n	800a346 <memmove+0x2a>
 800a344:	bd10      	pop	{r4, pc}
 800a346:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a34a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a34e:	e7f7      	b.n	800a340 <memmove+0x24>

0800a350 <__malloc_lock>:
 800a350:	4801      	ldr	r0, [pc, #4]	; (800a358 <__malloc_lock+0x8>)
 800a352:	f7fe bf90 	b.w	8009276 <__retarget_lock_acquire_recursive>
 800a356:	bf00      	nop
 800a358:	200041e0 	.word	0x200041e0

0800a35c <__malloc_unlock>:
 800a35c:	4801      	ldr	r0, [pc, #4]	; (800a364 <__malloc_unlock+0x8>)
 800a35e:	f7fe bf8b 	b.w	8009278 <__retarget_lock_release_recursive>
 800a362:	bf00      	nop
 800a364:	200041e0 	.word	0x200041e0

0800a368 <_realloc_r>:
 800a368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a36a:	4607      	mov	r7, r0
 800a36c:	4614      	mov	r4, r2
 800a36e:	460e      	mov	r6, r1
 800a370:	b921      	cbnz	r1, 800a37c <_realloc_r+0x14>
 800a372:	4611      	mov	r1, r2
 800a374:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a378:	f7ff bbd6 	b.w	8009b28 <_malloc_r>
 800a37c:	b922      	cbnz	r2, 800a388 <_realloc_r+0x20>
 800a37e:	f7ff fb87 	bl	8009a90 <_free_r>
 800a382:	4625      	mov	r5, r4
 800a384:	4628      	mov	r0, r5
 800a386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a388:	f000 f83a 	bl	800a400 <_malloc_usable_size_r>
 800a38c:	42a0      	cmp	r0, r4
 800a38e:	d20f      	bcs.n	800a3b0 <_realloc_r+0x48>
 800a390:	4621      	mov	r1, r4
 800a392:	4638      	mov	r0, r7
 800a394:	f7ff fbc8 	bl	8009b28 <_malloc_r>
 800a398:	4605      	mov	r5, r0
 800a39a:	2800      	cmp	r0, #0
 800a39c:	d0f2      	beq.n	800a384 <_realloc_r+0x1c>
 800a39e:	4631      	mov	r1, r6
 800a3a0:	4622      	mov	r2, r4
 800a3a2:	f7fd f86d 	bl	8007480 <memcpy>
 800a3a6:	4631      	mov	r1, r6
 800a3a8:	4638      	mov	r0, r7
 800a3aa:	f7ff fb71 	bl	8009a90 <_free_r>
 800a3ae:	e7e9      	b.n	800a384 <_realloc_r+0x1c>
 800a3b0:	4635      	mov	r5, r6
 800a3b2:	e7e7      	b.n	800a384 <_realloc_r+0x1c>

0800a3b4 <_read_r>:
 800a3b4:	b538      	push	{r3, r4, r5, lr}
 800a3b6:	4604      	mov	r4, r0
 800a3b8:	4608      	mov	r0, r1
 800a3ba:	4611      	mov	r1, r2
 800a3bc:	2200      	movs	r2, #0
 800a3be:	4d05      	ldr	r5, [pc, #20]	; (800a3d4 <_read_r+0x20>)
 800a3c0:	602a      	str	r2, [r5, #0]
 800a3c2:	461a      	mov	r2, r3
 800a3c4:	f7f8 fbb3 	bl	8002b2e <_read>
 800a3c8:	1c43      	adds	r3, r0, #1
 800a3ca:	d102      	bne.n	800a3d2 <_read_r+0x1e>
 800a3cc:	682b      	ldr	r3, [r5, #0]
 800a3ce:	b103      	cbz	r3, 800a3d2 <_read_r+0x1e>
 800a3d0:	6023      	str	r3, [r4, #0]
 800a3d2:	bd38      	pop	{r3, r4, r5, pc}
 800a3d4:	200041e8 	.word	0x200041e8

0800a3d8 <__ascii_wctomb>:
 800a3d8:	4603      	mov	r3, r0
 800a3da:	4608      	mov	r0, r1
 800a3dc:	b141      	cbz	r1, 800a3f0 <__ascii_wctomb+0x18>
 800a3de:	2aff      	cmp	r2, #255	; 0xff
 800a3e0:	d904      	bls.n	800a3ec <__ascii_wctomb+0x14>
 800a3e2:	228a      	movs	r2, #138	; 0x8a
 800a3e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a3e8:	601a      	str	r2, [r3, #0]
 800a3ea:	4770      	bx	lr
 800a3ec:	2001      	movs	r0, #1
 800a3ee:	700a      	strb	r2, [r1, #0]
 800a3f0:	4770      	bx	lr

0800a3f2 <abort>:
 800a3f2:	2006      	movs	r0, #6
 800a3f4:	b508      	push	{r3, lr}
 800a3f6:	f000 f833 	bl	800a460 <raise>
 800a3fa:	2001      	movs	r0, #1
 800a3fc:	f7f8 fb8d 	bl	8002b1a <_exit>

0800a400 <_malloc_usable_size_r>:
 800a400:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a404:	1f18      	subs	r0, r3, #4
 800a406:	2b00      	cmp	r3, #0
 800a408:	bfbc      	itt	lt
 800a40a:	580b      	ldrlt	r3, [r1, r0]
 800a40c:	18c0      	addlt	r0, r0, r3
 800a40e:	4770      	bx	lr

0800a410 <_raise_r>:
 800a410:	291f      	cmp	r1, #31
 800a412:	b538      	push	{r3, r4, r5, lr}
 800a414:	4604      	mov	r4, r0
 800a416:	460d      	mov	r5, r1
 800a418:	d904      	bls.n	800a424 <_raise_r+0x14>
 800a41a:	2316      	movs	r3, #22
 800a41c:	6003      	str	r3, [r0, #0]
 800a41e:	f04f 30ff 	mov.w	r0, #4294967295
 800a422:	bd38      	pop	{r3, r4, r5, pc}
 800a424:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a426:	b112      	cbz	r2, 800a42e <_raise_r+0x1e>
 800a428:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a42c:	b94b      	cbnz	r3, 800a442 <_raise_r+0x32>
 800a42e:	4620      	mov	r0, r4
 800a430:	f000 f830 	bl	800a494 <_getpid_r>
 800a434:	462a      	mov	r2, r5
 800a436:	4601      	mov	r1, r0
 800a438:	4620      	mov	r0, r4
 800a43a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a43e:	f000 b817 	b.w	800a470 <_kill_r>
 800a442:	2b01      	cmp	r3, #1
 800a444:	d00a      	beq.n	800a45c <_raise_r+0x4c>
 800a446:	1c59      	adds	r1, r3, #1
 800a448:	d103      	bne.n	800a452 <_raise_r+0x42>
 800a44a:	2316      	movs	r3, #22
 800a44c:	6003      	str	r3, [r0, #0]
 800a44e:	2001      	movs	r0, #1
 800a450:	e7e7      	b.n	800a422 <_raise_r+0x12>
 800a452:	2400      	movs	r4, #0
 800a454:	4628      	mov	r0, r5
 800a456:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a45a:	4798      	blx	r3
 800a45c:	2000      	movs	r0, #0
 800a45e:	e7e0      	b.n	800a422 <_raise_r+0x12>

0800a460 <raise>:
 800a460:	4b02      	ldr	r3, [pc, #8]	; (800a46c <raise+0xc>)
 800a462:	4601      	mov	r1, r0
 800a464:	6818      	ldr	r0, [r3, #0]
 800a466:	f7ff bfd3 	b.w	800a410 <_raise_r>
 800a46a:	bf00      	nop
 800a46c:	2000010c 	.word	0x2000010c

0800a470 <_kill_r>:
 800a470:	b538      	push	{r3, r4, r5, lr}
 800a472:	2300      	movs	r3, #0
 800a474:	4d06      	ldr	r5, [pc, #24]	; (800a490 <_kill_r+0x20>)
 800a476:	4604      	mov	r4, r0
 800a478:	4608      	mov	r0, r1
 800a47a:	4611      	mov	r1, r2
 800a47c:	602b      	str	r3, [r5, #0]
 800a47e:	f7f8 fb3c 	bl	8002afa <_kill>
 800a482:	1c43      	adds	r3, r0, #1
 800a484:	d102      	bne.n	800a48c <_kill_r+0x1c>
 800a486:	682b      	ldr	r3, [r5, #0]
 800a488:	b103      	cbz	r3, 800a48c <_kill_r+0x1c>
 800a48a:	6023      	str	r3, [r4, #0]
 800a48c:	bd38      	pop	{r3, r4, r5, pc}
 800a48e:	bf00      	nop
 800a490:	200041e8 	.word	0x200041e8

0800a494 <_getpid_r>:
 800a494:	f7f8 bb2a 	b.w	8002aec <_getpid>

0800a498 <_init>:
 800a498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a49a:	bf00      	nop
 800a49c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a49e:	bc08      	pop	{r3}
 800a4a0:	469e      	mov	lr, r3
 800a4a2:	4770      	bx	lr

0800a4a4 <_fini>:
 800a4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4a6:	bf00      	nop
 800a4a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4aa:	bc08      	pop	{r3}
 800a4ac:	469e      	mov	lr, r3
 800a4ae:	4770      	bx	lr
